
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mogavs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mogavs')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("createAdditionalPlots")
> ### * createAdditionalPlots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createAdditionalPlots
> ### Title: Function for plotting boundaries of the archive set.
> ### Aliases: createAdditionalPlots
> ### Keywords: models regression
> 
> ### ** Examples
> 
> data(sampleData)
> mod<-mogavs(y~.,data=sampleData,maxGenerations=20)
[1] "Generation 1 / 20"
[1] "Generation 2 / 20"
[1] "Generation 3 / 20"
[1] "Generation 4 / 20"
[1] "Generation 5 / 20"
[1] "Generation 6 / 20"
[1] "Generation 7 / 20"
[1] "Generation 8 / 20"
[1] "Generation 9 / 20"
[1] "Generation 10 / 20"
[1] "Generation 11 / 20"
[1] "Generation 12 / 20"
[1] "Generation 13 / 20"
[1] "Generation 14 / 20"
[1] "Generation 15 / 20"
[1] "Generation 16 / 20"
[1] "Generation 17 / 20"
[1] "Generation 18 / 20"
[1] "Generation 19 / 20"
[1] "Generation 20 / 20"
> createAdditionalPlots(mod,epsilonBand=0,kBest=15,"kbest")
> createAdditionalPlots(mod,epsilonBand=0.001,"mse")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpM8aVno/R.INSTALL70e4537df44c/mogavs/R/createAdditionalPlots.R#40: 
 --- if/while statement is in package --- 
mogavs
 --- call (currently evaluated) --- 
createAdditionalPlots(mod, epsilonBand = 0.001, "mse")
 --- R stacktrace ---
where 1: createAdditionalPlots(mod, epsilonBand = 0.001, "mse")

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function (currently evaluated)--- 
function(mogavs, epsilonBand=0, kBest=1, method=c("MSE","kBest")){
  method<-tolower(method)
  archiveSet<-mogavs$archiveSet
  obj1ArchiveSet<-mogavs$obj1ArchiveSet
  obj2ArchiveSet<-mogavs$obj2ArchiveSet
  N<-ncol(mogavs$archiveSet)
  
  if(method=="mse" && missing(epsilonBand)){
    warning("Arg epsilonBand not supplied, defaulting to zero",call.=FALSE)
    epsilonBand<-0
  }
  if(method=="kbest" && missing(kBest)){
    warning("Arg kBest not supplied, defaulting to one")
    kBest<-1
  }
  sizeArchive<-nrow(archiveSet)
  epsMembers<-list()
  epsMembersTemp<-list()
  minMSE<-list(NA)
  
  for(i in 1:N){
    #Finds all members with i number of variables
    iMembers<-which(obj1ArchiveSet==i)
    if(length(iMembers)==0){
      break
    }
    #Finds the member with i number of variables and minimum MSE
    minMSE[[i]]<-min(obj2ArchiveSet[iMembers])
    #Finds the tag of all members with i variables within epsilon range
    if(length((minMSE[[i]]))>0){
      epsMembersTemp[[i]]<-obj2ArchiveSet[iMembers]-minMSE[[i]]<=epsilonBand
      #Stores all the members with i number of variables within epsilon range
      epsMembers[[i]]<-iMembers[epsMembersTemp[[i]]]
      } else{
        epsMembersTemp[[i]]<-""
        epsMembers[[i]]<-""
      }
  }
  if(method=="mse"){
  temp<-data.frame()
  for(i in 1:N){
    if(length(epsMembers[[i]])>0){
      temp<-rbind(temp,cbind(obj1ArchiveSet[epsMembers[[i]]],obj2ArchiveSet[epsMembers[[i]]]))
    }
    
  }
  plot(obj1ArchiveSet,obj2ArchiveSet,col="red",pch=8)
  points(temp,col="blue",pch=8)
  legend("topright",c("Entire Archive Set",paste("Members in Epsilon (=",epsilonBand,") band",sep="")),col=c("red","blue"),pch=c(8,8))
  rm(temp)
}
if(method=="kbest"){
  #Create new figure to plot k best models for each number of variables
  plot(obj1ArchiveSet,obj2ArchiveSet,col="red",pch=8)
  orderedMSE<-list()
  kBestMembersTemp<-list()
  kBestMembers<-list()
  for(i in 1:N){
    #Finds all members with i number of variables
    iMembers<-which(obj1ArchiveSet==i)
    #Finds the member with i number of variables and ordered MSE
    orderedMSE[[i]]<-sort(obj2ArchiveSet[iMembers])
    I<-order(obj2ArchiveSet[iMembers])
    #finds the tag of all members that are kBest
    if(length(orderedMSE[[i]])>0){
      kBestMembersTemp[[i]]<-iMembers[I]
      s<-min(length(kBestMembersTemp[[i]]),kBest)
      kBestMembers[[i]]<-kBestMembersTemp[[i]][1:s]
    }
    else {
      kBestMembers[[i]]<-"NA"
    }
  }
  
  for(i in 1:N){
    if(length(kBestMembers[[i]])>0){
      #Plot the members with i number of variables and kBest
      points(obj1ArchiveSet[kBestMembers[[i]]],obj2ArchiveSet[kBestMembers[[i]]],col="blue",pch=8)
      legend("topright",c("Entire Archive Set",paste("kBest(=",kBest,") members for each level of variables",sep="")),col=c("red","blue"),pch=c(8,8))
      
    }
  }
}

}
<bytecode: 0x739c5e0>
<environment: namespace:mogavs>
 --- function (body) search ---
Function createAdditionalPlots in namespace mogavs has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
