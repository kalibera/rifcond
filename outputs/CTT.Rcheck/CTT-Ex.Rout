
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CTT"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('CTT')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CTTdata")
> ### * CTTdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTTdata
> ### Title: Example Multiple-Choice Data
> ### Aliases: CTTdata
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(CTTdata)
> 
> 
> 
> cleanEx()
> nameEx("CTTkey")
> ### * CTTkey
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTTkey
> ### Title: Example Multiple-Choice Key
> ### Aliases: CTTkey
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(CTTkey)
> 
> 
> 
> cleanEx()
> nameEx("cttICC")
> ### * cttICC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cttICC
> ### Title: Function for producing theoretical and empirical item
> ###   characteristic curves.
> ### Aliases: cttICC
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> library(CTT)# Example data provided with package
> data(CTTdata)
> data(CTTkey)
> 
> # Scores for each preson 
> myScores <- score(CTTdata,CTTkey, output.scored=TRUE)
> 
> # ICC for item 1
> cttICC(myScores$score, myScores$scored[,1], colTheme="spartans", cex=1.5)
> 
> 
> 
> cleanEx()
> nameEx("disattenuated.cor")
> ### * disattenuated.cor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: disattenuated.cor
> ### Title: Function for disattentuated correlation
> ### Aliases: disattenuated.cor
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # r.xy=0.6, r.xx=0.7,r.yy=0.8
> disattenuated.cor(0.6,c(0.7,0.8))
          [,1]
[1,] 0.8017837
> 
> # if r.xy is a matrix:
> cor1 <- matrix(c(1.0000000, 0.24391288, 0.2812319, 0.05251050,
+                  0.2439129, 1.00000000, 0.1652985, 0.08126448,
+                  0.2812319, 0.16529850, 1.0000000, 0.27971630,
+                  0.0525105, 0.08126448, 0.2797163, 1.00000000), byrow=TRUE,
+                  ncol=4)
> 
> rxx1 <- c(0.8,0.8,0.81,0.9)     # reliability of each test 
> new.rxx1 <- c(0.9,0.97,0.8,0.7) # projected new reliability of those tests
> 
> disattenuated.cor(cor1, rxx1, new.rxx1)
          [,1]       [,2]      [,3]       [,4]
[1,] 0.8000000 0.28487340 0.2964445 0.04911908
[2,] 0.2439129 0.80000000 0.1808890 0.07891679
[3,] 0.2812319 0.16529850 0.8100000 0.24515910
[4,] 0.0525105 0.08126448 0.2797163 0.90000000
> 
> 
> 
> cleanEx()
> nameEx("distractor.analysis")
> ### * distractor.analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distractor.analysis
> ### Title: Function for item distractor analysis
> ### Aliases: distractor.analysis
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # Example data provided with package
> data(CTTdata)
> data(CTTkey)
> 
> distractor.analysis(CTTdata,CTTkey)
You will find additional features and better formatting by using distractorAnalysis().
$i1
        score.level
response lower middle upper
       A    11      6     2
       B    17      3     1
       C     8      4     1
      *D     8     16    23

$i2
        score.level
response lower middle upper
       A    15      1     5
       B    11      4     0
      *C    10     21    22
       D     8      3     0

$i3
        score.level
response lower middle upper
      *A    17     18    20
       B    12      1     4
       C     5      5     2
       D    10      5     1

$i4
        score.level
response lower middle upper
       A     8      4     2
       B    16     10     6
       C    13      4     1
      *D     7     11    18

$i5
        score.level
response lower middle upper
       A    13      6     1
       B    10      4     5
       C    13      9     2
      *D     8     10    19

$i6
        score.level
response lower middle upper
      *A    32     23    27
       B     5      4     0
       C     5      2     0
       D     2      0     0

$i7
        score.level
response lower middle upper
       A    10      1     0
       B     9      2     0
       C     4      3     0
      *D    21     23    27

$i8
        score.level
response lower middle upper
       A     8      6     2
      *B    16     18    23
       C    11      2     2
       D     9      3     0

$i9
        score.level
response lower middle upper
       A    10      8     5
       B    14      8     4
       C    12      6     3
      *D     8      7    15

$i10
        score.level
response lower middle upper
      *A    17     15    20
       B     6      8     3
       C    11      3     1
       D    10      3     3

$i11
        score.level
response lower middle upper
      *A     6     12    22
       B    17      2     3
       C    11      7     1
       D    10      8     1

$i12
        score.level
response lower middle upper
       A    14      3     0
       B    10      3     0
       C     9      2     1
      *D    11     21    26

$i13
        score.level
response lower middle upper
       A     8      5     3
       B     7      2     1
      *C    19     21    22
       D    10      1     1

$i14
        score.level
response lower middle upper
       A    16      2     0
       B     7      7     0
      *C     9     17    26
       D    12      3     1

$i15
        score.level
response lower middle upper
       A    12      7     2
      *B    12     10    16
       C     8      6     5
       D    12      6     4

$i16
        score.level
response lower middle upper
       A    14      8     4
       B    13      7     5
      *C     9      8    15
       D     8      6     3

$i17
        score.level
response lower middle upper
       A     8      4     4
       B    15      7     1
       C    13      5     2
      *D     8     13    20

$i18
        score.level
response lower middle upper
      *A     6      8    18
       B    16      6     4
       C    12      9     2
       D    10      6     3

$i19
        score.level
response lower middle upper
      *A     5     10    18
       B    13      9     4
       C    12      4     2
       D    14      6     3

$i20
        score.level
response lower middle upper
       A     9      5     0
      *B     7     12    21
       C    15      5     2
       D    13      7     4

> 
> # Results provided in a .csv file.
> distractor.analysis(CTTdata,CTTkey,p.table=TRUE,write.csv="Hello.csv")
You will find additional features and better formatting by using distractorAnalysis().
$i1
        score.level
response lower middle upper
       A 0.250  0.207 0.074
       B 0.386  0.103 0.037
       C 0.182  0.138 0.037
      *D 0.182  0.552 0.852

$i2
        score.level
response lower middle upper
       A 0.341  0.034 0.185
       B 0.250  0.138 0.000
      *C 0.227  0.724 0.815
       D 0.182  0.103 0.000

$i3
        score.level
response lower middle upper
      *A 0.386  0.621 0.741
       B 0.273  0.034 0.148
       C 0.114  0.172 0.074
       D 0.227  0.172 0.037

$i4
        score.level
response lower middle upper
       A 0.182  0.138 0.074
       B 0.364  0.345 0.222
       C 0.295  0.138 0.037
      *D 0.159  0.379 0.667

$i5
        score.level
response lower middle upper
       A 0.295  0.207 0.037
       B 0.227  0.138 0.185
       C 0.295  0.310 0.074
      *D 0.182  0.345 0.704

$i6
        score.level
response lower middle upper
      *A 0.727  0.793 1.000
       B 0.114  0.138 0.000
       C 0.114  0.069 0.000
       D 0.045  0.000 0.000

$i7
        score.level
response lower middle upper
       A 0.227  0.034 0.000
       B 0.205  0.069 0.000
       C 0.091  0.103 0.000
      *D 0.477  0.793 1.000

$i8
        score.level
response lower middle upper
       A 0.182  0.207 0.074
      *B 0.364  0.621 0.852
       C 0.250  0.069 0.074
       D 0.205  0.103 0.000

$i9
        score.level
response lower middle upper
       A 0.227  0.276 0.185
       B 0.318  0.276 0.148
       C 0.273  0.207 0.111
      *D 0.182  0.241 0.556

$i10
        score.level
response lower middle upper
      *A 0.386  0.517 0.741
       B 0.136  0.276 0.111
       C 0.250  0.103 0.037
       D 0.227  0.103 0.111

$i11
        score.level
response lower middle upper
      *A 0.136  0.414 0.815
       B 0.386  0.069 0.111
       C 0.250  0.241 0.037
       D 0.227  0.276 0.037

$i12
        score.level
response lower middle upper
       A 0.318  0.103 0.000
       B 0.227  0.103 0.000
       C 0.205  0.069 0.037
      *D 0.250  0.724 0.963

$i13
        score.level
response lower middle upper
       A 0.182  0.172 0.111
       B 0.159  0.069 0.037
      *C 0.432  0.724 0.815
       D 0.227  0.034 0.037

$i14
        score.level
response lower middle upper
       A 0.364  0.069 0.000
       B 0.159  0.241 0.000
      *C 0.205  0.586 0.963
       D 0.273  0.103 0.037

$i15
        score.level
response lower middle upper
       A 0.273  0.241 0.074
      *B 0.273  0.345 0.593
       C 0.182  0.207 0.185
       D 0.273  0.207 0.148

$i16
        score.level
response lower middle upper
       A 0.318  0.276 0.148
       B 0.295  0.241 0.185
      *C 0.205  0.276 0.556
       D 0.182  0.207 0.111

$i17
        score.level
response lower middle upper
       A 0.182  0.138 0.148
       B 0.341  0.241 0.037
       C 0.295  0.172 0.074
      *D 0.182  0.448 0.741

$i18
        score.level
response lower middle upper
      *A 0.136  0.276 0.667
       B 0.364  0.207 0.148
       C 0.273  0.310 0.074
       D 0.227  0.207 0.111

$i19
        score.level
response lower middle upper
      *A 0.114  0.345 0.667
       B 0.295  0.310 0.148
       C 0.273  0.138 0.074
       D 0.318  0.207 0.111

$i20
        score.level
response lower middle upper
       A 0.205  0.172 0.000
      *B 0.159  0.414 0.778
       C 0.341  0.172 0.074
       D 0.295  0.241 0.148

> 
> 
> 
> cleanEx()
> nameEx("distractorAnalysis")
> ### * distractorAnalysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distractorAnalysis
> ### Title: Function for item distractor analysis
> ### Aliases: distractorAnalysis
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # Example data provided with package
> data(CTTdata)
> data(CTTkey)
> 
> distractorAnalysis(CTTdata,CTTkey)
$i1
  correct key  n rspP       pBis    discrim      lower     mid50     mid75
A           A 19 0.19 -0.3289491 -0.4210526 0.42105263 0.3157895 0.2631579
B           B 21 0.21 -0.4253910 -0.5714286 0.61904762 0.2380952 0.0952381
C           C 13 0.13 -0.2635730 -0.3846154 0.38461538 0.3846154 0.2307692
D       *   D 47 0.47  0.5354616  0.2978723 0.08510638 0.2127660 0.3191489
       upper
A 0.00000000
B 0.04761905
C 0.00000000
D 0.38297872

$i2
  correct key  n rspP       pBis    discrim     lower     mid50      mid75
A           A 21 0.21 -0.3125686 -0.5238095 0.6190476 0.0952381 0.19047619
B           B 15 0.15 -0.3460590 -0.4000000 0.4000000 0.4666667 0.13333333
C       *   C 53 0.53  0.4707659  0.2452830 0.0754717 0.2641509 0.33962264
D           D 11 0.11 -0.3345127 -0.6363636 0.6363636 0.2727273 0.09090909
      upper
A 0.0952381
B 0.0000000
C 0.3207547
D 0.0000000

$i3
  correct key  n rspP       pBis     discrim     lower      mid50     mid75
A       *   A 55 0.55  0.2299700  0.05454545 0.2363636 0.21818182 0.2545455
B           B 17 0.17 -0.2913848 -0.41176471 0.4705882 0.23529412 0.2352941
C           C 12 0.12 -0.1312768 -0.25000000 0.3333333 0.08333333 0.5000000
D           D 16 0.16 -0.2569262 -0.25000000 0.3125000 0.56250000 0.0625000
       upper
A 0.29090909
B 0.05882353
C 0.08333333
D 0.06250000

$i4
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 14 0.14 -0.2258385 -0.3571429 0.4285714 0.2857143 0.2142857
B           B 32 0.32 -0.3023767 -0.2500000 0.3437500 0.3750000 0.1875000
C           C 18 0.18 -0.3462051 -0.5000000 0.5000000 0.2777778 0.2222222
D       *   D 36 0.36  0.4430028  0.3055556 0.1111111 0.1388889 0.3333333
       upper
A 0.07142857
B 0.09375000
C 0.00000000
D 0.41666667

$i5
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 20 0.20 -0.3284056 -0.4000000 0.4000000 0.3500000 0.2500000
B           B 19 0.19 -0.1765152 -0.2105263 0.4210526 0.1578947 0.2105263
C           C 24 0.24 -0.2986566 -0.3750000 0.4166667 0.3333333 0.2083333
D       *   D 37 0.37  0.3759047  0.2702703 0.1081081 0.2162162 0.2972973
       upper
A 0.00000000
B 0.21052632
C 0.04166667
D 0.37837838

$i6
  correct key  n rspP       pBis     discrim     lower     mid50    mid75
A       *   A 82 0.82  0.2667077 -0.01219512 0.2439024 0.2195122 0.304878
B           B  9 0.09 -0.2641655 -0.44444444 0.4444444 0.5555556 0.000000
C           C  7 0.07 -0.2569278 -0.57142857 0.5714286 0.4285714 0.000000
D           D  2 0.02 -0.1882862 -1.00000000 1.0000000 0.0000000 0.000000
      upper
A 0.2317073
B 0.0000000
C 0.0000000
D 0.0000000

$i7
  correct key  n rspP       pBis    discrim     lower     mid50      mid75
A           A 11 0.11 -0.3752001 -0.7272727 0.7272727 0.1818182 0.09090909
B           B 11 0.11 -0.3954587 -0.7272727 0.7272727 0.2727273 0.00000000
C           C  7 0.07 -0.2229517 -0.4285714 0.4285714 0.4285714 0.14285714
D       *   D 71 0.71  0.4664061  0.1126761 0.1549296 0.2535211 0.32394366
      upper
A 0.0000000
B 0.0000000
C 0.0000000
D 0.2676056

$i8
  correct key  n rspP       pBis    discrim     lower     mid50      mid75
A           A 16 0.16 -0.2510876 -0.4375000 0.4375000 0.2500000 0.31250000
B       *   B 57 0.57  0.3627846  0.1403509 0.1578947 0.2280702 0.31578947
C           C 15 0.15 -0.3282934 -0.4666667 0.6000000 0.2000000 0.06666667
D           D 12 0.12 -0.2843874 -0.4166667 0.4166667 0.5000000 0.08333333
      upper
A 0.0000000
B 0.2982456
C 0.1333333
D 0.0000000

$i9
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 23 0.23 -0.1245622 -0.1739130 0.2608696 0.3043478 0.3478261
B           B 26 0.26 -0.2762085 -0.3461538 0.4230769 0.1923077 0.3076923
C           C 21 0.21 -0.2866063 -0.3333333 0.4285714 0.3333333 0.1428571
D       *   D 30 0.30  0.2945506  0.3000000 0.1333333 0.2333333 0.2000000
       upper
A 0.08695652
B 0.07692308
C 0.09523810
D 0.43333333

$i10
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 52 0.52  0.2775098  0.1346154 0.1730769 0.2692308 0.2500000
B           B 17 0.17 -0.1192005 -0.1764706 0.2352941 0.2941176 0.4117647
C           C 15 0.15 -0.3637752 -0.6000000 0.6000000 0.2666667 0.1333333
D           D 16 0.16 -0.2685868 -0.3750000 0.5000000 0.1875000 0.1875000
       upper
A 0.30769231
B 0.05882353
C 0.00000000
D 0.12500000

$i11
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 40 0.40  0.5108272  0.3000000 0.1000000 0.1250000 0.3750000
B           B 22 0.22 -0.3684201 -0.5000000 0.5909091 0.1818182 0.1363636
C           C 19 0.19 -0.3181933 -0.3684211 0.4210526 0.4210526 0.1052632
D           D 19 0.19 -0.2749689 -0.2631579 0.2631579 0.4736842 0.2631579
       upper
A 0.40000000
B 0.09090909
C 0.05263158
D 0.00000000

$i12
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 17 0.17 -0.4256823 -0.7058824 0.7058824 0.1764706 0.1176471
B           B 13 0.13 -0.3143731 -0.3846154 0.3846154 0.4615385 0.1538462
C           C 12 0.12 -0.3172316 -0.5833333 0.6666667 0.2500000 0.0000000
D       *   D 58 0.58  0.5274432  0.2241379 0.0862069 0.2413793 0.3620690
       upper
A 0.00000000
B 0.00000000
C 0.08333333
D 0.31034483

$i13
  correct key  n rspP       pBis     discrim     lower     mid50     mid75
A           A 16 0.16 -0.1923963 -0.25000000 0.3750000 0.2500000 0.2500000
B           B 10 0.10 -0.2325568 -0.50000000 0.6000000 0.2000000 0.1000000
C       *   C 62 0.62  0.2640013  0.09677419 0.1612903 0.2903226 0.2903226
D           D 12 0.12 -0.3237819 -0.66666667 0.6666667 0.1666667 0.1666667
      upper
A 0.1250000
B 0.1000000
C 0.2580645
D 0.0000000

$i14
  correct key  n rspP       pBis    discrim      lower     mid50      mid75
A           A 18 0.18 -0.4547276 -0.7222222 0.72222222 0.2222222 0.05555556
B           B 14 0.14 -0.2382406 -0.2857143 0.28571429 0.4285714 0.28571429
C       *   C 52 0.52  0.5175262  0.2692308 0.07692308 0.2307692 0.34615385
D           D 16 0.16 -0.3265624 -0.5000000 0.56250000 0.2500000 0.12500000
      upper
A 0.0000000
B 0.0000000
C 0.3461538
D 0.0625000

$i15
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 21 0.21 -0.3538586 -0.4761905 0.4761905 0.3333333 0.1904762
B       *   B 38 0.38  0.2519119  0.1578947 0.2368421 0.1315789 0.2368421
C           C 19 0.19 -0.1210826 -0.2105263 0.3157895 0.3157895 0.2631579
D           D 22 0.22 -0.1995961 -0.1363636 0.2272727 0.3636364 0.3181818
       upper
A 0.00000000
B 0.39473684
C 0.10526316
D 0.09090909

$i16
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 26 0.26 -0.2277168 -0.2692308 0.4230769 0.1538462 0.2692308
B           B 25 0.25 -0.1210891 -0.0800000 0.2800000 0.3600000 0.1600000
C       *   C 32 0.32  0.1701400  0.0937500 0.1562500 0.2187500 0.3750000
D           D 17 0.17 -0.2288209 -0.2941176 0.4117647 0.3529412 0.1176471
      upper
A 0.1538462
B 0.2000000
C 0.2500000
D 0.1176471

$i17
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 16 0.16 -0.2100624 -0.3125000 0.3750000 0.3125000 0.2500000
B           B 23 0.23 -0.3875908 -0.4782609 0.5217391 0.2608696 0.1739130
C           C 20 0.20 -0.3125888 -0.3000000 0.3500000 0.5000000 0.1000000
D       *   D 41 0.41  0.4648960  0.2682927 0.1219512 0.1219512 0.3658537
       upper
A 0.06250000
B 0.04347826
C 0.05000000
D 0.39024390

$i18
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 32 0.32  0.3938428  0.3437500 0.1250000 0.2187500 0.1875000
B           B 26 0.26 -0.2906677 -0.3461538 0.4230769 0.2692308 0.2307692
C           C 23 0.23 -0.2677864 -0.3043478 0.3043478 0.3478261 0.3478261
D           D 19 0.19 -0.2368807 -0.3157895 0.4210526 0.2105263 0.2631579
       upper
A 0.46875000
B 0.07692308
C 0.00000000
D 0.10526316

$i19
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 33 0.33  0.3402452  0.2424242 0.1212121 0.1515152 0.3636364
B           B 26 0.26 -0.2423121 -0.1923077 0.3076923 0.3461538 0.2307692
C           C 18 0.18 -0.2634886 -0.3333333 0.4444444 0.2777778 0.1666667
D           D 23 0.23 -0.2475580 -0.3478261 0.4347826 0.3043478 0.1739130
       upper
A 0.36363636
B 0.11538462
C 0.11111111
D 0.08695652

$i20
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 14 0.14 -0.2567996 -0.2857143 0.2857143 0.5714286 0.1428571
B       *   B 40 0.40  0.4147055  0.2500000 0.1500000 0.1000000 0.3500000
C           C 22 0.22 -0.3482312 -0.4545455 0.5000000 0.3181818 0.1363636
D           D 24 0.24 -0.2589735 -0.2916667 0.3750000 0.2916667 0.2500000
       upper
A 0.00000000
B 0.40000000
C 0.04545455
D 0.08333333

> 
> # Results provided in a .csv file.
> distractorAnalysis(CTTdata,CTTkey,csvReport="Hello.csv")
$i1
  correct key  n rspP       pBis    discrim      lower     mid50     mid75
A           A 19 0.19 -0.3289491 -0.4210526 0.42105263 0.3157895 0.2631579
B           B 21 0.21 -0.4253910 -0.5714286 0.61904762 0.2380952 0.0952381
C           C 13 0.13 -0.2635730 -0.3846154 0.38461538 0.3846154 0.2307692
D       *   D 47 0.47  0.5354616  0.2978723 0.08510638 0.2127660 0.3191489
       upper
A 0.00000000
B 0.04761905
C 0.00000000
D 0.38297872

$i2
  correct key  n rspP       pBis    discrim     lower     mid50      mid75
A           A 21 0.21 -0.3125686 -0.5238095 0.6190476 0.0952381 0.19047619
B           B 15 0.15 -0.3460590 -0.4000000 0.4000000 0.4666667 0.13333333
C       *   C 53 0.53  0.4707659  0.2452830 0.0754717 0.2641509 0.33962264
D           D 11 0.11 -0.3345127 -0.6363636 0.6363636 0.2727273 0.09090909
      upper
A 0.0952381
B 0.0000000
C 0.3207547
D 0.0000000

$i3
  correct key  n rspP       pBis     discrim     lower      mid50     mid75
A       *   A 55 0.55  0.2299700  0.05454545 0.2363636 0.21818182 0.2545455
B           B 17 0.17 -0.2913848 -0.41176471 0.4705882 0.23529412 0.2352941
C           C 12 0.12 -0.1312768 -0.25000000 0.3333333 0.08333333 0.5000000
D           D 16 0.16 -0.2569262 -0.25000000 0.3125000 0.56250000 0.0625000
       upper
A 0.29090909
B 0.05882353
C 0.08333333
D 0.06250000

$i4
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 14 0.14 -0.2258385 -0.3571429 0.4285714 0.2857143 0.2142857
B           B 32 0.32 -0.3023767 -0.2500000 0.3437500 0.3750000 0.1875000
C           C 18 0.18 -0.3462051 -0.5000000 0.5000000 0.2777778 0.2222222
D       *   D 36 0.36  0.4430028  0.3055556 0.1111111 0.1388889 0.3333333
       upper
A 0.07142857
B 0.09375000
C 0.00000000
D 0.41666667

$i5
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 20 0.20 -0.3284056 -0.4000000 0.4000000 0.3500000 0.2500000
B           B 19 0.19 -0.1765152 -0.2105263 0.4210526 0.1578947 0.2105263
C           C 24 0.24 -0.2986566 -0.3750000 0.4166667 0.3333333 0.2083333
D       *   D 37 0.37  0.3759047  0.2702703 0.1081081 0.2162162 0.2972973
       upper
A 0.00000000
B 0.21052632
C 0.04166667
D 0.37837838

$i6
  correct key  n rspP       pBis     discrim     lower     mid50    mid75
A       *   A 82 0.82  0.2667077 -0.01219512 0.2439024 0.2195122 0.304878
B           B  9 0.09 -0.2641655 -0.44444444 0.4444444 0.5555556 0.000000
C           C  7 0.07 -0.2569278 -0.57142857 0.5714286 0.4285714 0.000000
D           D  2 0.02 -0.1882862 -1.00000000 1.0000000 0.0000000 0.000000
      upper
A 0.2317073
B 0.0000000
C 0.0000000
D 0.0000000

$i7
  correct key  n rspP       pBis    discrim     lower     mid50      mid75
A           A 11 0.11 -0.3752001 -0.7272727 0.7272727 0.1818182 0.09090909
B           B 11 0.11 -0.3954587 -0.7272727 0.7272727 0.2727273 0.00000000
C           C  7 0.07 -0.2229517 -0.4285714 0.4285714 0.4285714 0.14285714
D       *   D 71 0.71  0.4664061  0.1126761 0.1549296 0.2535211 0.32394366
      upper
A 0.0000000
B 0.0000000
C 0.0000000
D 0.2676056

$i8
  correct key  n rspP       pBis    discrim     lower     mid50      mid75
A           A 16 0.16 -0.2510876 -0.4375000 0.4375000 0.2500000 0.31250000
B       *   B 57 0.57  0.3627846  0.1403509 0.1578947 0.2280702 0.31578947
C           C 15 0.15 -0.3282934 -0.4666667 0.6000000 0.2000000 0.06666667
D           D 12 0.12 -0.2843874 -0.4166667 0.4166667 0.5000000 0.08333333
      upper
A 0.0000000
B 0.2982456
C 0.1333333
D 0.0000000

$i9
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 23 0.23 -0.1245622 -0.1739130 0.2608696 0.3043478 0.3478261
B           B 26 0.26 -0.2762085 -0.3461538 0.4230769 0.1923077 0.3076923
C           C 21 0.21 -0.2866063 -0.3333333 0.4285714 0.3333333 0.1428571
D       *   D 30 0.30  0.2945506  0.3000000 0.1333333 0.2333333 0.2000000
       upper
A 0.08695652
B 0.07692308
C 0.09523810
D 0.43333333

$i10
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 52 0.52  0.2775098  0.1346154 0.1730769 0.2692308 0.2500000
B           B 17 0.17 -0.1192005 -0.1764706 0.2352941 0.2941176 0.4117647
C           C 15 0.15 -0.3637752 -0.6000000 0.6000000 0.2666667 0.1333333
D           D 16 0.16 -0.2685868 -0.3750000 0.5000000 0.1875000 0.1875000
       upper
A 0.30769231
B 0.05882353
C 0.00000000
D 0.12500000

$i11
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 40 0.40  0.5108272  0.3000000 0.1000000 0.1250000 0.3750000
B           B 22 0.22 -0.3684201 -0.5000000 0.5909091 0.1818182 0.1363636
C           C 19 0.19 -0.3181933 -0.3684211 0.4210526 0.4210526 0.1052632
D           D 19 0.19 -0.2749689 -0.2631579 0.2631579 0.4736842 0.2631579
       upper
A 0.40000000
B 0.09090909
C 0.05263158
D 0.00000000

$i12
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 17 0.17 -0.4256823 -0.7058824 0.7058824 0.1764706 0.1176471
B           B 13 0.13 -0.3143731 -0.3846154 0.3846154 0.4615385 0.1538462
C           C 12 0.12 -0.3172316 -0.5833333 0.6666667 0.2500000 0.0000000
D       *   D 58 0.58  0.5274432  0.2241379 0.0862069 0.2413793 0.3620690
       upper
A 0.00000000
B 0.00000000
C 0.08333333
D 0.31034483

$i13
  correct key  n rspP       pBis     discrim     lower     mid50     mid75
A           A 16 0.16 -0.1923963 -0.25000000 0.3750000 0.2500000 0.2500000
B           B 10 0.10 -0.2325568 -0.50000000 0.6000000 0.2000000 0.1000000
C       *   C 62 0.62  0.2640013  0.09677419 0.1612903 0.2903226 0.2903226
D           D 12 0.12 -0.3237819 -0.66666667 0.6666667 0.1666667 0.1666667
      upper
A 0.1250000
B 0.1000000
C 0.2580645
D 0.0000000

$i14
  correct key  n rspP       pBis    discrim      lower     mid50      mid75
A           A 18 0.18 -0.4547276 -0.7222222 0.72222222 0.2222222 0.05555556
B           B 14 0.14 -0.2382406 -0.2857143 0.28571429 0.4285714 0.28571429
C       *   C 52 0.52  0.5175262  0.2692308 0.07692308 0.2307692 0.34615385
D           D 16 0.16 -0.3265624 -0.5000000 0.56250000 0.2500000 0.12500000
      upper
A 0.0000000
B 0.0000000
C 0.3461538
D 0.0625000

$i15
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 21 0.21 -0.3538586 -0.4761905 0.4761905 0.3333333 0.1904762
B       *   B 38 0.38  0.2519119  0.1578947 0.2368421 0.1315789 0.2368421
C           C 19 0.19 -0.1210826 -0.2105263 0.3157895 0.3157895 0.2631579
D           D 22 0.22 -0.1995961 -0.1363636 0.2272727 0.3636364 0.3181818
       upper
A 0.00000000
B 0.39473684
C 0.10526316
D 0.09090909

$i16
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 26 0.26 -0.2277168 -0.2692308 0.4230769 0.1538462 0.2692308
B           B 25 0.25 -0.1210891 -0.0800000 0.2800000 0.3600000 0.1600000
C       *   C 32 0.32  0.1701400  0.0937500 0.1562500 0.2187500 0.3750000
D           D 17 0.17 -0.2288209 -0.2941176 0.4117647 0.3529412 0.1176471
      upper
A 0.1538462
B 0.2000000
C 0.2500000
D 0.1176471

$i17
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 16 0.16 -0.2100624 -0.3125000 0.3750000 0.3125000 0.2500000
B           B 23 0.23 -0.3875908 -0.4782609 0.5217391 0.2608696 0.1739130
C           C 20 0.20 -0.3125888 -0.3000000 0.3500000 0.5000000 0.1000000
D       *   D 41 0.41  0.4648960  0.2682927 0.1219512 0.1219512 0.3658537
       upper
A 0.06250000
B 0.04347826
C 0.05000000
D 0.39024390

$i18
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 32 0.32  0.3938428  0.3437500 0.1250000 0.2187500 0.1875000
B           B 26 0.26 -0.2906677 -0.3461538 0.4230769 0.2692308 0.2307692
C           C 23 0.23 -0.2677864 -0.3043478 0.3043478 0.3478261 0.3478261
D           D 19 0.19 -0.2368807 -0.3157895 0.4210526 0.2105263 0.2631579
       upper
A 0.46875000
B 0.07692308
C 0.00000000
D 0.10526316

$i19
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A       *   A 33 0.33  0.3402452  0.2424242 0.1212121 0.1515152 0.3636364
B           B 26 0.26 -0.2423121 -0.1923077 0.3076923 0.3461538 0.2307692
C           C 18 0.18 -0.2634886 -0.3333333 0.4444444 0.2777778 0.1666667
D           D 23 0.23 -0.2475580 -0.3478261 0.4347826 0.3043478 0.1739130
       upper
A 0.36363636
B 0.11538462
C 0.11111111
D 0.08695652

$i20
  correct key  n rspP       pBis    discrim     lower     mid50     mid75
A           A 14 0.14 -0.2567996 -0.2857143 0.2857143 0.5714286 0.1428571
B       *   B 40 0.40  0.4147055  0.2500000 0.1500000 0.1000000 0.3500000
C           C 22 0.22 -0.3482312 -0.4545455 0.5000000 0.3181818 0.1363636
D           D 24 0.24 -0.2589735 -0.2916667 0.3750000 0.2916667 0.2500000
       upper
A 0.00000000
B 0.40000000
C 0.04545455
D 0.08333333

> 
> 
> 
> cleanEx()
> nameEx("itemAnalysis")
> ### * itemAnalysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: itemAnalysis
> ### Title: Function for item reliability analysis
> ### Aliases: itemAnalysis
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # Scored input (data frame is preferred)
>  x<-data.frame(matrix(c(0,0,0,0,0,
+                         0,0,0,0,0,
+                         0,0,0,0,1,
+                         0,0,0,1,1,
+                         0,0,1,1,1,
+                         0,1,1,1,1,
+                         1,1,1,1,1,
+                         1,0,1,1,1,
+                         0,0,0,1,1,
+                         0,1,1,1,1),nrow=10,ncol=5,byrow=TRUE,
+                         dimnames=list(c(paste("P",c(1:10),sep="")),c(paste("I",c(1:5),sep="")))))
> itemAnalysis(x)

 Number of Items 
 5 

 Number of Examinees 
 10 

 Coefficient Alpha 
 0.816 
> 
> # To see an item report with flags.
> iA <- itemAnalysis(x, hardFlag=.25, pBisFlag=.15)
> iA$itemReport
  itemName itemMean      pBis       bis alphaIfDeleted hard lowPBis
1       I1      0.2 0.4036037 0.5766551      0.8325792    X        
2       I2      0.3 0.5299577 0.6984823      0.8027211             
3       I3      0.5 0.7905694 0.9908318      0.7166667             
4       I4      0.7 0.7237469 0.9538957      0.7424242             
5       I5      0.8 0.5995438 0.8566076      0.7827529             
> 
> # To see more item statisitics
> str(itemAnalysis(x))
List of 6
 $ nItem     : int 5
 $ nPerson   : int 10
 $ alpha     : num 0.816
 $ scaleMean : num 2.5
 $ scaleSD   : num 1.78
 $ itemReport:'data.frame':	5 obs. of  5 variables:
  ..$ itemName      : chr [1:5] "I1" "I2" "I3" "I4" ...
  ..$ itemMean      : num [1:5] 0.2 0.3 0.5 0.7 0.8
  ..$ pBis          : num [1:5(1d)] 0.404 0.53 0.791 0.724 0.6
  ..$ bis           : num [1:5(1d)] 0.577 0.698 0.991 0.954 0.857
  ..$ alphaIfDeleted: num [1:5(1d)] 0.833 0.803 0.717 0.742 0.783
 - attr(*, "class")= chr "itemAnalysis"
> 
> 
> 
> 
> cleanEx()
> nameEx("polyserial")
> ### * polyserial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polyserial
> ### Title: Function for calculating polyserial correlations
> ### Aliases: polyserial
> ### Keywords: misc
> 
> ### ** Examples
> 
> x <- rnorm(500, 50,5)
> y <- x + rnorm(500,0,2)
> x <- x + rnorm(500,0,2)
> cor(x,y)
[1] 0.8420407
> 
> y <- ifelse(y>50,1,0)
> 
> cor(x,y)
[1] 0.6766135
> 
> polyserial(x,y, ml=FALSE)
[1] 0.8480093
> polyserial(x,y)
          
0.8611665 
> 
> 
> 
> cleanEx()
> nameEx("reliability")
> ### * reliability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reliability
> ### Title: Function for item reliability analysis
> ### Aliases: reliability
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # Scored input (data frame is preferred)
>  x<-data.frame(matrix(c(0,0,0,0,0,
+                         0,0,0,0,0,
+                         0,0,0,0,1,
+                         0,0,0,1,1,
+                         0,0,1,1,1,
+                         0,1,1,1,1,
+                         1,1,1,1,1,
+                         1,0,1,1,1,
+                         0,0,0,1,1,
+                         0,1,1,1,1),nrow=10,ncol=5,byrow=TRUE,
+                         dimnames=list(c(paste("P",c(1:10),sep="")),c(paste("I",c(1:5),sep="")))))
> reliability(x, itemal=TRUE)
You will find additional options and better formatting using itemAnalysis().

 Number of Items 
 5 

 Number of Examinees 
 10 

 Coefficient Alpha 
 0.816 
> 
> # To see more item statisitics
> str(reliability(x,itemal=TRUE))
You will find additional options and better formatting using itemAnalysis().
List of 9
 $ nItem         : int 5
 $ nPerson       : int 10
 $ alpha         : num 0.816
 $ scaleMean     : num 2.5
 $ scaleSD       : num 1.78
 $ alphaIfDeleted: num [1:5(1d)] 0.833 0.803 0.717 0.742 0.783
 $ pBis          : num [1:5(1d)] 0.404 0.53 0.791 0.724 0.6
 $ bis           : num [1:5(1d)] 0.695 0.772 0.992 0.991 0.993
 $ itemMean      : Named num [1:5] 0.2 0.3 0.5 0.7 0.8
  ..- attr(*, "names")= chr [1:5] "I1" "I2" "I3" "I4" ...
 - attr(*, "class")= chr "reliability"
> 
> 
> 
> cleanEx()
> nameEx("score")
> ### * score
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: score
> ### Title: Function to score the response files
> ### Aliases: score
> ### Keywords: misc
> 
> ### ** Examples
> 
> # Example data provided with package
> data(CTTdata)
> data(CTTkey)
> 
> # Scores for each preson 
> score(CTTdata,CTTkey)
$score
  P1   P2   P3   P4   P5   P6   P7   P8   P9  P10  P11  P12  P13  P14  P15  P16 
   1    9    2    7   13    5    4   12   12    7   13    4   13   12   18    5 
 P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32 
   5    5    8    9   12    5    6    8    9    5    6    8    7    5   10    6 
 P33  P34  P35  P36  P37  P38  P39  P40  P41  P42  P43  P44  P45  P46  P47  P48 
   5    5    7    3   11    7    7    8    4    7   10    7    7    7   17   17 
 P49  P50  P51  P52  P53  P54  P55  P56  P57  P58  P59  P60  P61  P62  P63  P64 
  15    7    8   12   12    4    5    5    5   14    9    7   17    6   13   15 
 P65  P66  P67  P68  P69  P70  P71  P72  P73  P74  P75  P76  P77  P78  P79  P80 
   4    9    3   18   20   19   10    9   12   10   13    9   12   12   15   15 
 P81  P82  P83  P84  P85  P86  P87  P88  P89  P90  P91  P92  P93  P94  P95  P96 
  14   13    7    4    5   18   10   13   19   15    6    6    4   13    7   12 
 P97  P98  P99 P100 
  15   17   10   16 

> 
> # Scores, scored file, and relibility
> score(CTTdata,CTTkey,output.scored=TRUE,rel=TRUE)
You will find additional options and better formatting using itemAnalysis().
$score
  P1   P2   P3   P4   P5   P6   P7   P8   P9  P10  P11  P12  P13  P14  P15  P16 
   1    9    2    7   13    5    4   12   12    7   13    4   13   12   18    5 
 P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32 
   5    5    8    9   12    5    6    8    9    5    6    8    7    5   10    6 
 P33  P34  P35  P36  P37  P38  P39  P40  P41  P42  P43  P44  P45  P46  P47  P48 
   5    5    7    3   11    7    7    8    4    7   10    7    7    7   17   17 
 P49  P50  P51  P52  P53  P54  P55  P56  P57  P58  P59  P60  P61  P62  P63  P64 
  15    7    8   12   12    4    5    5    5   14    9    7   17    6   13   15 
 P65  P66  P67  P68  P69  P70  P71  P72  P73  P74  P75  P76  P77  P78  P79  P80 
   4    9    3   18   20   19   10    9   12   10   13    9   12   12   15   15 
 P81  P82  P83  P84  P85  P86  P87  P88  P89  P90  P91  P92  P93  P94  P95  P96 
  14   13    7    4    5   18   10   13   19   15    6    6    4   13    7   12 
 P97  P98  P99 P100 
  15   17   10   16 

$reliability

 Number of Items 
 20 

 Number of Examinees 
 100 

 Coefficient Alpha 
 0.813 

$scored
    i1 i2 i3 i4 i5 i6 i7 i8 i9 i10 i11 i12 i13 i14 i15 i16 i17 i18 i19 i20
1    0  0  0  0  0  0  0  0  0   0   0   0   0   0   0   0   0   0   1   0
2    0  0  1  1  0  0  1  1  1   1   0   1   0   0   0   1   0   1   0   0
3    0  0  0  1  0  0  0  0  0   0   0   0   0   0   0   0   0   0   0   1
4    0  1  0  1  1  1  0  0  1   0   1   0   1   0   0   0   0   0   0   0
5    0  0  1  1  0  1  1  1  0   0   1   1   1   1   0   1   0   1   1   1
6    0  0  0  0  0  1  0  0  0   1   0   0   1   1   0   0   1   0   0   0
7    0  0  0  0  0  1  1  1  0   0   0   0   0   0   1   0   0   0   0   0
8    0  1  1  1  0  1  1  0  0   1   0   1   1   1   1   0   1   0   1   0
9    1  0  1  1  1  1  1  1  0   1   0   0   0   1   0   0   1   1   0   1
10   0  1  1  0  0  0  1  0  0   1   0   1   0   0   1   1   0   0   0   0
11   1  0  0  0  1  1  1  1  1   1   1   1   0   1   0   1   1   0   1   0
12   0  0  1  1  0  1  0  0  0   0   0   0   0   0   0   1   0   0   0   0
13   1  1  0  0  1  1  1  1  0   1   0   1   1   1   0   1   1   1   0   0
14   1  1  0  1  0  1  1  1  1   0   0   1   1   0   1   0   1   0   0   1
15   1  1  1  1  1  1  1  1  1   1   1   0   1   1   1   1   0   1   1   1
16   0  1  0  0  0  0  1  0  0   1   0   0   1   0   0   0   0   1   0   0
17   1  0  1  0  1  0  0  0  0   1   0   0   0   0   0   1   0   0   0   0
18   0  0  0  0  0  1  1  0  0   0   0   0   1   0   0   1   0   0   1   0
19   1  0  1  0  1  0  1  1  1   0   0   1   0   1   0   0   0   0   0   0
20   0  1  1  1  0  0  0  0  1   0   1   0   1   1   0   0   0   0   1   1
21   1  1  1  1  0  1  1  0  0   1   1   1   1   1   0   1   0   0   0   0
22   0  0  0  0  0  1  1  0  1   0   0   1   0   0   1   0   0   0   0   0
23   0  1  0  0  0  0  1  1  1   1   0   1   0   0   0   0   0   0   0   0
24   0  1  1  0  0  0  1  1  0   1   0   0   1   1   0   0   0   0   0   1
25   1  0  0  0  0  1  1  1  0   1   0   1   0   0   1   1   0   1   0   0
26   0  0  1  0  0  1  0  0  0   0   1   0   0   0   0   0   1   0   0   1
27   0  0  0  0  0  0  1  0  0   1   0   1   1   0   0   0   1   1   0   0
28   1  1  0  0  0  1  0  0  0   0   0   1   1   1   1   0   0   0   0   1
29   1  0  0  0  1  1  1  0  1   0   0   1   1   0   0   0   0   0   0   0
30   0  0  0  0  1  1  0  1  0   0   0   0   0   1   0   0   0   1   0   0
31   1  1  0  0  0  1  1  0  0   1   0   1   1   1   1   0   0   0   0   1
32   0  0  1  0  1  1  0  0  1   1   1   0   0   0   0   0   0   0   0   0
33   0  0  1  0  0  0  0  0  0   1   1   0   0   0   1   0   0   0   0   1
34   1  0  0  0  0  1  0  1  0   0   0   1   1   0   0   0   0   0   0   0
35   0  1  0  0  1  1  1  1  0   1   0   0   1   0   0   0   0   0   0   0
36   0  0  0  0  0  1  0  1  0   0   0   0   0   1   0   0   0   0   0   0
37   1  1  1  0  0  1  1  1  0   0   1   1   1   0   0   1   1   0   0   0
38   1  1  0  0  0  1  1  1  0   0   0   1   0   0   0   0   1   0   0   0
39   0  1  0  0  0  1  1  1  0   1   1   0   0   0   0   1   0   0   0   0
40   1  1  1  0  1  1  1  0  0   0   0   0   1   0   0   0   0   0   1   0
41   0  1  0  0  0  0  0  0  1   1   0   0   0   0   0   0   0   0   1   0
42   0  0  0  1  0  1  0  1  0   1   0   1   1   0   0   0   1   0   0   0
43   0  0  0  0  0  1  1  1  1   1   0   1   1   0   0   0   0   1   1   1
44   0  0  1  0  0  1  1  1  0   0   0   0   1   1   0   0   1   0   0   0
45   1  0  0  0  0  1  1  0  0   1   0   0   1   1   0   0   0   0   1   0
46   1  0  0  0  0  1  1  1  1   0   0   0   0   0   1   1   0   0   0   0
47   1  1  1  1  1  1  1  1  1   1   0   1   1   1   1   0   1   1   0   1
48   1  1  1  1  0  1  1  1  1   1   1   1   1   1   1   0   1   1   0   1
49   1  1  0  0  0  1  1  1  1   0   1   1   1   0   1   1   1   1   1   1
50   0  0  1  0  0  1  1  1  0   0   0   0   1   0   1   0   0   1   0   0
51   0  0  1  0  0  1  1  0  0   1   0   1   1   1   0   0   0   1   0   0
52   1  1  0  1  1  1  1  1  1   1   0   1   1   0   0   0   0   0   1   0
53   1  1  0  1  1  1  1  0  0   1   1   1   1   0   1   0   1   0   0   0
54   0  0  1  1  0  1  0  1  0   0   0   0   0   0   0   0   0   0   0   0
55   0  1  1  0  0  1  1  0  0   0   0   0   1   0   0   0   0   0   0   0
56   0  0  0  1  0  1  1  0  0   0   0   0   0   0   1   0   0   1   0   0
57   0  0  1  0  0  0  1  1  0   0   0   0   1   1   0   0   0   0   0   0
58   0  0  1  0  1  1  1  0  1   1   1   1   1   1   0   0   1   1   1   1
59   1  1  1  0  0  1  1  0  0   1   0   0   1   0   0   0   0   1   1   0
60   0  0  0  0  0  1  1  0  1   1   0   1   1   1   0   0   0   0   0   0
61   1  1  1  1  1  1  1  1  0   1   1   1   0   1   1   1   1   1   0   1
62   0  0  1  0  0  0  1  1  0   0   1   0   0   0   1   0   1   0   0   0
63   1  1  1  0  0  1  1  0  0   0   1   1   1   1   0   1   1   0   1   1
64   1  1  1  0  0  1  1  1  0   1   1   1   1   1   1   1   0   1   0   1
65   0  0  1  0  0  1  0  0  0   0   0   0   1   0   0   0   0   0   0   1
66   0  1  0  0  1  0  0  1  0   0   0   1   1   0   0   1   1   1   1   0
67   0  0  0  0  0  1  0  0  0   0   0   0   0   0   1   0   0   0   1   0
68   1  1  1  1  1  1  1  1  1   1   1   1   1   1   1   0   1   0   1   1
69   1  1  1  1  1  1  1  1  1   1   1   1   1   1   1   1   1   1   1   1
70   1  1  1  1  1  1  1  1  1   1   1   1   1   1   1   0   1   1   1   1
71   0  1  0  0  1  1  0  1  0   0   1   1   1   0   1   0   1   0   1   0
72   0  1  1  0  0  0  1  1  0   0   1   1   1   1   0   0   1   0   0   0
73   1  0  1  0  0  1  1  1  0   0   1   0   0   1   1   1   1   0   1   1
74   0  1  0  1  0  1  0  0  0   1   1   0   1   1   1   0   1   0   0   1
75   1  1  1  1  1  1  1  0  0   0   0   1   1   1   0   0   0   1   1   1
76   1  1  0  0  1  1  0  0  0   1   1   1   1   1   0   0   0   0   0   0
77   1  1  1  1  0  1  1  1  0   0   1   1   0   1   1   0   1   0   0   0
78   0  1  1  0  0  1  1  1  0   0   1   1   1   1   0   1   0   0   1   1
79   1  1  0  1  0  1  1  0  1   1   0   1   1   1   1   1   1   0   1   1
80   1  1  1  1  1  1  1  1  1   1   0   1   1   1   0   0   1   1   0   0
81   1  1  1  0  1  1  1  1  1   0   1   1   1   1   1   0   0   0   1   0
82   0  1  1  0  1  1  1  1  1   0   1   1   0   1   0   1   0   0   1   1
83   0  1  1  1  0  0  0  0  0   1   0   0   0   1   0   1   0   0   0   1
84   0  0  0  0  0  1  0  0  0   0   0   0   1   0   1   0   0   0   0   1
85   0  0  1  0  0  1  1  1  0   0   0   0   0   0   0   0   1   0   0   0
86   1  1  1  1  1  1  1  1  1   1   1   1   1   1   1   0   1   1   1   0
87   0  1  1  0  0  1  1  1  1   0   1   1   0   1   0   0   0   0   0   1
88   0  1  0  1  1  1  1  1  0   1   1   1   1   1   0   1   0   0   1   0
89   1  1  1  1  1  1  1  1  1   1   1   1   1   1   1   0   1   1   1   1
90   1  1  1  1  1  1  1  1  0   0   1   1   0   1   0   1   1   1   0   1
91   1  0  1  0  1  1  0  0  0   0   0   0   0   0   0   1   0   0   0   1
92   1  0  0  0  0  1  0  0  0   1   0   0   1   0   1   1   0   0   0   0
93   0  0  1  0  0  1  0  0  0   0   0   1   0   0   1   0   0   0   0   0
94   1  0  0  0  0  1  1  1  0   1   1   1   1   1   1   1   1   0   0   1
95   0  0  0  0  1  1  0  0  0   1   0   1   1   1   0   0   0   1   0   0
96   1  1  1  1  1  1  1  1  0   0   0   1   0   0   0   0   1   1   0   1
97   1  1  0  1  1  1  1  1  0   1   1   1   1   1   1   0   1   0   0   1
98   1  1  1  1  0  1  1  1  0   1   1   1   1   1   1   0   1   1   1   1
99   0  0  1  0  1  1  1  1  0   1   0   0   1   1   0   1   1   0   0   0
100  1  0  1  1  1  1  1  1  0   1   1   1   0   1   0   1   1   1   1   1

> 
> 
> 
> cleanEx()
> nameEx("score.transform")
> ### * score.transform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: score.transform
> ### Title: Function for transforming scores onto different scales
> ### Aliases: score.transform
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # Example data provided with package
> data(CTTdata)
> data(CTTkey)
> 
> # Data scored to demonstrate function
> scores <- score(CTTdata,CTTkey)$score # obtain the scores
> 
> # the targeted mean=3, standard deviation=1
> 
> score.transform(scores,3,1)
$new.scores
      P1       P2       P3       P4       P5       P6       P7       P8 
1.124056 2.893815 1.345276 2.451375 3.778694 2.008935 1.787716 3.557474 
      P9      P10      P11      P12      P13      P14      P15      P16 
3.557474 2.451375 3.778694 1.787716 3.778694 3.557474 4.884792 2.008935 
     P17      P18      P19      P20      P21      P22      P23      P24 
2.008935 2.008935 2.672595 2.893815 3.557474 2.008935 2.230155 2.672595 
     P25      P26      P27      P28      P29      P30      P31      P32 
2.893815 2.008935 2.230155 2.672595 2.451375 2.008935 3.115034 2.230155 
     P33      P34      P35      P36      P37      P38      P39      P40 
2.008935 2.008935 2.451375 1.566496 3.336254 2.451375 2.451375 2.672595 
     P41      P42      P43      P44      P45      P46      P47      P48 
1.787716 2.451375 3.115034 2.451375 2.451375 2.451375 4.663573 4.663573 
     P49      P50      P51      P52      P53      P54      P55      P56 
4.221133 2.451375 2.672595 3.557474 3.557474 1.787716 2.008935 2.008935 
     P57      P58      P59      P60      P61      P62      P63      P64 
2.008935 3.999913 2.893815 2.451375 4.663573 2.230155 3.778694 4.221133 
     P65      P66      P67      P68      P69      P70      P71      P72 
1.787716 2.893815 1.566496 4.884792 5.327232 5.106012 3.115034 2.893815 
     P73      P74      P75      P76      P77      P78      P79      P80 
3.557474 3.115034 3.778694 2.893815 3.557474 3.557474 4.221133 4.221133 
     P81      P82      P83      P84      P85      P86      P87      P88 
3.999913 3.778694 2.451375 1.787716 2.008935 4.884792 3.115034 3.778694 
     P89      P90      P91      P92      P93      P94      P95      P96 
5.106012 4.221133 2.230155 2.230155 1.787716 3.778694 2.451375 3.557474 
     P97      P98      P99     P100 
4.221133 4.663573 3.115034 4.442353 

$p.scores
  P1   P2   P3   P4   P5   P6   P7   P8   P9  P10  P11  P12  P13  P14  P15  P16 
0.01 0.53 0.02 0.37 0.77 0.18 0.08 0.68 0.68 0.37 0.77 0.08 0.77 0.68 0.96 0.18 
 P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32 
0.18 0.18 0.47 0.53 0.68 0.18 0.27 0.47 0.53 0.18 0.27 0.47 0.37 0.18 0.59 0.27 
 P33  P34  P35  P36  P37  P38  P39  P40  P41  P42  P43  P44  P45  P46  P47  P48 
0.18 0.18 0.37 0.03 0.63 0.37 0.37 0.47 0.08 0.37 0.59 0.37 0.37 0.37 0.92 0.92 
 P49  P50  P51  P52  P53  P54  P55  P56  P57  P58  P59  P60  P61  P62  P63  P64 
0.86 0.37 0.47 0.68 0.68 0.08 0.18 0.18 0.18 0.82 0.53 0.37 0.92 0.27 0.77 0.86 
 P65  P66  P67  P68  P69  P70  P71  P72  P73  P74  P75  P76  P77  P78  P79  P80 
0.08 0.53 0.03 0.96 1.00 0.98 0.59 0.53 0.68 0.59 0.77 0.53 0.68 0.68 0.86 0.86 
 P81  P82  P83  P84  P85  P86  P87  P88  P89  P90  P91  P92  P93  P94  P95  P96 
0.82 0.77 0.37 0.08 0.18 0.96 0.59 0.77 0.98 0.86 0.27 0.27 0.08 0.77 0.37 0.68 
 P97  P98  P99 P100 
0.86 0.92 0.59 0.90 

> 
> # the score should be transformed by normalized precentile
> score.transform(scores,3,1,TRUE)
$new.scores
       P1        P2        P3        P4        P5        P6        P7        P8 
0.6736521 3.0752699 0.9462511 2.6681467 3.7388468 2.0846349 1.5949284 3.4676988 
       P9       P10       P11       P12       P13       P14       P15       P16 
3.4676988 2.6681467 3.7388468 1.5949284 3.7388468 3.4676988 4.7506861 2.0846349 
      P17       P18       P19       P20       P21       P22       P23       P24 
2.0846349 2.0846349 2.9247301 3.0752699 3.4676988 2.0846349 2.3871870 2.9247301 
      P25       P26       P27       P28       P29       P30       P31       P32 
3.0752699 2.0846349 2.3871870 2.9247301 2.6681467 2.0846349 3.2275450 2.3871870 
      P33       P34       P35       P36       P37       P38       P39       P40 
2.0846349 2.0846349 2.6681467 1.1192064 3.3318533 2.6681467 2.6681467 2.9247301 
      P41       P42       P43       P44       P45       P46       P47       P48 
1.5949284 2.6681467 3.2275450 2.6681467 2.6681467 2.6681467 4.4050716 4.4050716 
      P49       P50       P51       P52       P53       P54       P55       P56 
4.0803193 2.6681467 2.9247301 3.4676988 3.4676988 1.5949284 2.0846349 2.0846349 
      P57       P58       P59       P60       P61       P62       P63       P64 
2.0846349 3.9153651 3.0752699 2.6681467 4.4050716 2.3871870 3.7388468 4.0803193 
      P65       P66       P67       P68       P69       P70       P71       P72 
1.5949284 3.0752699 1.1192064 4.7506861       Inf 5.0537489 3.2275450 3.0752699 
      P73       P74       P75       P76       P77       P78       P79       P80 
3.4676988 3.2275450 3.7388468 3.0752699 3.4676988 3.4676988 4.0803193 4.0803193 
      P81       P82       P83       P84       P85       P86       P87       P88 
3.9153651 3.7388468 2.6681467 1.5949284 2.0846349 4.7506861 3.2275450 3.7388468 
      P89       P90       P91       P92       P93       P94       P95       P96 
5.0537489 4.0803193 2.3871870 2.3871870 1.5949284 3.7388468 2.6681467 3.4676988 
      P97       P98       P99      P100 
4.0803193 4.4050716 3.2275450 4.2815516 

$p.scores
  P1   P2   P3   P4   P5   P6   P7   P8   P9  P10  P11  P12  P13  P14  P15  P16 
0.01 0.53 0.02 0.37 0.77 0.18 0.08 0.68 0.68 0.37 0.77 0.08 0.77 0.68 0.96 0.18 
 P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32 
0.18 0.18 0.47 0.53 0.68 0.18 0.27 0.47 0.53 0.18 0.27 0.47 0.37 0.18 0.59 0.27 
 P33  P34  P35  P36  P37  P38  P39  P40  P41  P42  P43  P44  P45  P46  P47  P48 
0.18 0.18 0.37 0.03 0.63 0.37 0.37 0.47 0.08 0.37 0.59 0.37 0.37 0.37 0.92 0.92 
 P49  P50  P51  P52  P53  P54  P55  P56  P57  P58  P59  P60  P61  P62  P63  P64 
0.86 0.37 0.47 0.68 0.68 0.08 0.18 0.18 0.18 0.82 0.53 0.37 0.92 0.27 0.77 0.86 
 P65  P66  P67  P68  P69  P70  P71  P72  P73  P74  P75  P76  P77  P78  P79  P80 
0.08 0.53 0.03 0.96 1.00 0.98 0.59 0.53 0.68 0.59 0.77 0.53 0.68 0.68 0.86 0.86 
 P81  P82  P83  P84  P85  P86  P87  P88  P89  P90  P91  P92  P93  P94  P95  P96 
0.82 0.77 0.37 0.08 0.18 0.96 0.59 0.77 0.98 0.86 0.27 0.27 0.08 0.77 0.37 0.68 
 P97  P98  P99 P100 
0.86 0.92 0.59 0.90 

> 
> 
> 
> cleanEx()
> nameEx("spearman.brown")
> ### * spearman.brown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spearman.brown
> ### Title: Functions for Spearman-Brown "Prophecy" Formula
> ### Aliases: spearman.brown
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> # old relibility is 0.6, if the measure is lengthened 
> # by a factor of 2, the relibility of new test is:
> spearman.brown(0.6,2,"n")
$r.new
[1] 0.75

> 
> # old relibility is 0.5, if we want a new measure to 
> # be 0.8, the new test length is:
> spearman.brown(0.5, 0.8, "r")
$n.new
[1] 4

> 
> 
> 
> cleanEx()
> nameEx("subscales")
> ### * subscales
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subscales
> ### Title: Function to create subscales based on a design matrix
> ### Aliases: subscales
> ### Keywords: misc
> 
> ### ** Examples
> 
> # Example data included with package
> data(CTTdata)
> data(CTTkey)
> 
> # design matrix
> q <- matrix(c(1,0,
+               1,0,
+               1,0,
+               1,0,
+               1,0,
+               1,0,
+               1,0,
+               1,0,
+               1,0,
+               1,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1,
+               0,1), ncol=2, byrow=TRUE)
> subscales(CTTdata,q,c("T1","T2"),TRUE,TRUE,CTTkey)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
: 
 --- if/while statement is in package --- 
CTT
 --- call (currently evaluated) --- 
withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
 --- R stacktrace ---
where 1: withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
where 2 at /var/scratch2/tomas/tmp/Rtmp1cRjog/R.INSTALLf7b837d20921/CTT/R/subscales.R#12: suppressWarnings(if (!is.na(scale.names)) names(sets) <- scale.names else names(sets) <- paste("Q.", 
    c(seq(1:n.scales)), sep = ""))
where 3: subscales(CTTdata, q, c("T1", "T2"), TRUE, TRUE, CTTkey)

 --- value of length: 2 type: logical ---
[1] TRUE TRUE
 --- function (currently evaluated)--- 
function (expr, ...) 
{
    handlers <- list(...)
    classes <- names(handlers)
    parentenv <- parent.frame()
    if (length(classes) != length(handlers)) 
        stop("bad handler specification")
    .Internal(.addCondHands(classes, handlers, parentenv, NULL, 
        TRUE))
    expr
}
<bytecode: 0xe7bb00>
<environment: namespace:base>
 --- function (body) search ---
Function withCallingHandlers in namespace base has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
