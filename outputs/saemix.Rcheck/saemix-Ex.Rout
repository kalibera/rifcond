
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "saemix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('saemix')
     Loading library saemix, version 2.1, August 2017
         please direct bugs, questions and feedback to emmanuelle.comets@inserm.fr

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PD1.saemix")
> ### * PD1.saemix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PD1.saemix
> ### Title: Data simulated according to an Emax response model, in SAEM
> ###   format
> ### Aliases: PD1.saemix PD2.saemix
> ### Keywords: datasets
> 
> ### ** Examples
>  
> 
> data(PD1.saemix)
> saemix.data<-saemixData(name.data=PD1.saemix,header=TRUE,name.group=c("subject"),
+   name.predictors=c("dose"),name.response=c("response"),
+   name.covariates=c("gender"), units=list(x="mg",y="-",covariates=c("-")))
Using the object called PD1.saemix in this R session as the data.
[1] "gender"
NULL


The following SaemixData object was successfully created:

Object of class SaemixData
    longitudinal data for use with the SAEM algorithm
Dataset PD1.saemix 
    Structured data: response ~ dose | subject 
    Predictor: dose (mg) 
    covariates: gender (-) 
      reference class for covariate gender :  0 
> 
> modelemax<-function(psi,id,xidep) {
+ # input:
+ #   psi : matrix of parameters (3 columns, E0, Emax, EC50)
+ #   id : vector of indices 
+ #   xidep : dependent variables (same nb of rows as length of id)
+ # returns:
+ #   a vector of predictions of length equal to length of id
+   dose<-xidep[,1]
+   e0<-psi[id,1]
+   emax<-psi[id,2]
+   e50<-psi[id,3]
+   f<-e0+emax*dose/(e50+dose)
+   return(f)
+ }
> 
> # Plotting the data
> plot(saemix.data,main="Simulated data PD1")
> 
> # Not run (strict time constraints for CRAN)
> 
> # Compare models with and without covariates with LL by Importance Sampling
> # SE not computed
> model1<-saemixModel(model=modelemax,description="Emax growth model", 
+   psi0=matrix(c(20,300,20,0,0,0),ncol=3,byrow=TRUE,dimnames=list(NULL,
+   c("E0","Emax","EC50"))), transform.par=c(1,1,1),
+   covariate.model=matrix(c(0,0,0), ncol=3,byrow=TRUE),fixed.estim=c(1,1,1))


The following SaemixModel object was successfully created:

Nonlinear mixed-effects model
  Model function:  Emax growth model
function (psi, id, xidep) 
{
    dose <- xidep[, 1]
    e0 <- psi[id, 1]
    emax <- psi[id, 2]
    e50 <- psi[id, 3]
    f <- e0 + emax * dose/(e50 + dose)
    return(f)
}
  Nb of parameters: 3 
      parameter names:  E0 Emax EC50 
      distribution:
     Parameter Distribution Estimated
[1,] E0        log-normal   Estimated
[2,] Emax      log-normal   Estimated
[3,] EC50      log-normal   Estimated
  Variance-covariance matrix:
     E0 Emax EC50
E0    1    0    0
Emax  0    1    0
EC50  0    0    1
  Error model: constant , initial values: a=1 
    No covariate in the model.
    Initial values
             E0 Emax EC50
Pop.CondInit 20  300   20
Cov.CondInit  0    0    0
> 
> model2<-saemixModel(model=modelemax,description="Emax growth model", 
+   psi0=matrix(c(20,300,20,0,0,0),ncol=3,byrow=TRUE,dimnames=list(NULL, 
+   c("E0","Emax","EC50"))), transform.par=c(1,1,1),
+   covariate.model=matrix(c(0,0,1), ncol=3,byrow=TRUE),fixed.estim=c(1,1,1))


The following SaemixModel object was successfully created:

Nonlinear mixed-effects model
  Model function:  Emax growth model
function (psi, id, xidep) 
{
    dose <- xidep[, 1]
    e0 <- psi[id, 1]
    emax <- psi[id, 2]
    e50 <- psi[id, 3]
    f <- e0 + emax * dose/(e50 + dose)
    return(f)
}
  Nb of parameters: 3 
      parameter names:  E0 Emax EC50 
      distribution:
     Parameter Distribution Estimated
[1,] E0        log-normal   Estimated
[2,] Emax      log-normal   Estimated
[3,] EC50      log-normal   Estimated
  Variance-covariance matrix:
     E0 Emax EC50
E0    1    0    0
Emax  0    1    0
EC50  0    0    1
  Error model: constant , initial values: a=1 
  Covariate model:
     E0 Emax EC50
[1,]  0    0    1
    Initial values
             E0 Emax EC50
Pop.CondInit 20  300   20
Cov.CondInit  0    0    0
> 
> saemix.options<-list(algorithms=c(0,1,1),nb.chains=3,seed=765754, 
+   nbiter.saemix=c(500,300),save=FALSE,save.graphs=FALSE)
> 
> # Not run (strict time constraints for CRAN)
> # fit1<-saemix(model1,saemix.data,saemix.options)
> # fit2<-saemix(model2,saemix.data,saemix.options)
> # wstat<-(-2)*(fit1["results"]["ll.is"]-fit2["results"]["ll.is"])
> 
> # cat("LRT test for covariate effect on EC50: p-value=",1-pchisq(wstat,1),"\n")
> 
> 
> 
> cleanEx()
> nameEx("SaemixData-class")
> ### * SaemixData-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SaemixData-class
> ### Title: Class "SaemixData"
> ### Aliases: SaemixData SaemixData-class SaemixRepData-class
> ###   SaemixSimData-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SaemixData")
Class "SaemixData" [package "saemix"]

Slots:
                                                                      
Name:        name.data          header             sep              na
Class:       character         logical       character       character
                                                                      
Name:       name.group name.predictors   name.response name.covariates
Class:       character       character       character       character
                                                                      
Name:           name.X        name.mdv       name.cens        name.occ
Class:       character       character       character       character
                                                                      
Name:       name.ytype       trans.cov           units            data
Class:       character            list            list      data.frame
                                                                      
Name:             ocov               N           yorig         ind.gen
Class:      data.frame         numeric         numeric         logical
                                      
Name:         ntot.obs        nind.obs
Class:         numeric         numeric
> 
> # Specifying column names
> data(theo.saemix)
> saemix.data<-saemixData(name.data=theo.saemix,header=TRUE,sep=" ",na=NA,
+   name.group=c("Id"),name.predictors=c("Dose","Time"),
+   name.response=c("Concentration"),name.covariates=c("Weight","Sex"),
+   units=list(x="hr",y="mg/L",covariates=c("kg","-")), name.X="Time")
Using the object called theo.saemix in this R session as the data.
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpjdedTW/R.INSTALLc8656333c7d/saemix/R/SaemixData.R#539: 
 --- if/while statement is in package --- 
saemix
 --- call (currently evaluated) --- 
read(x)
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/RtmpjdedTW/R.INSTALLc8656333c7d/saemix/R/aaa_generics.R#16: read(x)
where 2: read(x)
where 3: saemixData(name.data = theo.saemix, header = TRUE, sep = " ", 
    na = NA, name.group = c("Id"), name.predictors = c("Dose", 
        "Time"), name.response = c("Concentration"), name.covariates = c("Weight", 
        "Sex"), units = list(x = "hr", y = "mg/L", covariates = c("kg", 
        "-")), name.X = "Time")

 --- value of length: 2 type: logical ---
[1] FALSE FALSE
 --- function (currently evaluated)--- 
Method Definition:

function (object) 
{
    ow <- options("warn")
    options(warn = -1)
    if (class(object@name.data) != "character") {
        cat("Please provide the name of the data (data.frame or path to file on disk) as a character string.\n")
        return("Creation of SaemixData object failed")
    }
    if (exists(object@name.data)) {
        cat("Using the object called", object@name.data, "in this R session as the data.\n")
        dat <- get(object@name.data)
    }
    else {
        cat("Reading data from file", object@name.data, "\n")
        header <- object@header
        if (is.null(header)) 
            header <- TRUE
        sep <- object@sep
        if (is.null(sep)) 
            sep <- ""
        na.strings <- object@na
        if (is.null(na.strings)) 
            na.strings <- "NA"
        dat <- try(read.table(object@name.data, header = header, 
            sep = sep, na.strings = na.strings))
        if (class(dat) == "try-error") 
            stop("The file ", object@name.data, " does not exist. Please check the name and path.\n")
        cat("These are the first lines of the dataset as read into R. Please check the format of the data is appropriate, if not, modify the na and/or sep items and retry:\n")
        print(head(dat))
    }
    if (dim(dat)[2] < 3) {
        cat("The dataset does not contain enough data. The non-linear mixed effect model requires at least 3 columns, with subject ID, predictor (at least one) and response. \nPlease check the field separator, currently given as:", 
            paste("sep=\"", object@sep, "\"", sep = ""), "\n")
        return("Creation of SaemixData object failed")
    }
    if (!is.na(as.integer(object@name.group))) {
        object@name.group <- colnames(dat)[as.integer(object@name.group)]
    }
    if (is.na(object@name.group)) 
        object@name.group <- ""
    if (object@name.group == "") {
        i1 <- match("id", tolower(colnames(dat)))
        if (length(i1) == 0 | is.na(i1)) {
            i1 <- c(grep("subject", tolower(colnames(dat)), fixed = T), 
                grep("sujet", tolower(colnames(dat)), fixed = T))
        }
        if (length(i1) > 0) {
            object@name.group <- colnames(dat)[i1[1]]
            cat("    no name for the group variable (ID) given, will use column --", 
                object@name.group, "-- in the dataset.\n")
        }
    }
    if (is.na(match(object@name.group, colnames(dat)))) {
        cat("Can't find a column named", object@name.group, "in the data.\n")
        return("Creation of SaemixData object failed")
    }
    if (object@name.group == "") {
        cat("Please provide a name for the ID column.\n")
        return("Creation of SaemixData object failed")
    }
    i1 <- as.integer(object@name.predictors[!is.na(as.integer(object@name.predictors))])
    if (length(i1) > 0) {
        object@name.predictors[!is.na(as.integer(object@name.predictors))] <- colnames(dat)[i1]
    }
    if (is.na(object@name.predictors)) 
        object@name.predictors <- ""
    if (length(object@name.predictors) == 0 | (length(object@name.predictors) == 
        1 & object@name.predictors[1] == "")) {
        i1 <- c(match(c("time", "temps", "tps", "tim", "x", "dose"), 
            tolower(colnames(dat))))
        i1 <- i1[!is.na(i1)]
        if (length(i1) > 0) {
            object@name.predictors <- colnames(dat)[i1]
            cat("    no name for the predictor variable given, will use column(s) --", 
                object@name.predictors, "-- in the dataset.\n")
        }
    }
    id1 <- match(object@name.predictors, colnames(dat), nomatch = 0)
    if (length(id1[id1 == 0]) > 0) {
        cat("    cannot find column(s) --", object@name.predictors[id1 == 
            0], "-- dropping them from the data.\n")
    }
    xnam <- object@name.predictors[id1 > 0]
    if (length(xnam) == 0) 
        object@name.predictors <- ""
    else object@name.predictors <- xnam
    if (length(xnam) == 0) {
        cat("Please provide at least one predictor.\n")
        return("Creation of SaemixData object failed")
    }
    if (!is.na(as.integer(object@name.response))) {
        object@name.response <- colnames(dat)[as.integer(object@name.response)]
    }
    if (object@name.response == "") {
        i1 <- match("y", tolower(colnames(dat)))
        if (length(i1) == 0 | is.na(i1)) {
            i1 <- c(grep("response", tolower(colnames(dat)), 
                fixed = TRUE), match(c("resp", "conc"), tolower(colnames(dat))), 
                grep("concentration", tolower(colnames(dat)), 
                  fixed = TRUE))
            i1 <- i1[!is.na(i1)]
        }
        if (length(i1) > 0) {
            object@name.response <- colnames(dat)[i1[1]]
            cat("    no name for the response variable given, will use column --", 
                object@name.response, "-- in the dataset.\n")
        }
    }
    if (is.na(object@name.response)) 
        object@name.response <- ""
    if (is.na(match(object@name.response, colnames(dat)))) {
        cat("Can't find a column named", object@name.response, 
            "for the response column.\n")
        return("Creation of SaemixData object failed")
    }
    if (object@name.response == "") {
        cat("Please provide a name for the response column.\n")
        return("Creation of SaemixData object failed")
    }
    if (length(object@name.covariates) > 0) {
        if (object@name.covariates[1] != "") {
            i1 <- as.integer(object@name.covariates[!is.na(as.integer(object@name.covariates))])
            object@name.covariates[!is.na(as.integer(object@name.covariates))] <- colnames(dat)[i1]
        }
        idx <- object@name.covariates[!(object@name.covariates %in% 
            colnames(dat))]
        if (length(idx) > 0) {
            cat("Covariates", object@name.covariates[idx], "not found.\n")
            object@units$covariates <- object@units$covariates[object@name.covariates %in% 
                colnames(dat)]
            object@name.covariates <- object@name.covariates[object@name.covariates %in% 
                colnames(dat)]
        }
        print(object@name.covariates)
    }
    if (nchar(object@name.group) * length(object@name.predictors) * 
        nchar(object@name.response) <= 0) {
        stop("Please check the structure of the data file and provide information concerning which columns specify the group structure (ID), the predictors (eg dose, time) and the response (eg Y, conc). See documentation for automatic recognition of column names for these elements.\n")
    }
    if (nchar(object@name.X) == 0) 
        object@name.X <- object@name.predictors[1]
    if (!is.na(as.integer(object@name.X))) {
        if (dim(dat)[2] < as.integer(object@name.X)) {
            cat("Attribute name.X", object@name.X, "does not correspond to a valid column in the dataset, setting the X axis for graphs to", 
                object@name.predictors[1], ".\n")
            object@name.X <- object@name.predictors[1]
        }
        else object@name.X <- colnames(dat)[as.integer(object@name.X)]
    }
    if (match(object@name.X, object@name.predictors, nomatch = 0) == 
        0) {
        cat("Attribute name.X", object@name.X, "does not correspond to a valid column in the dataset, setting the X axis for graphs to", 
            object@name.predictors[1], ".\n")
        object@name.X <- object@name.predictors[1]
    }
    if (nchar(object@name.mdv) == 0) 
        mdv <- rep(0, dim(dat)[1])
    else {
        mdv <- dat[, object@name.mdv]
    }
    mdv[is.na(dat[, object@name.response])] <- 1
    if (sum(mdv) > 0) 
        object@name.mdv <- "mdv"
    if (nchar(object@name.cens) == 0) 
        cens <- rep(0, dim(dat)[1])
    else {
        cens <- dat[, object@name.cens]
        object@name.cens <- "cens"
    }
    if (nchar(object@name.occ) == 0) 
        occ <- rep(1, dim(dat)[1])
    else {
        occ <- dat[, object@name.occ]
        object@name.occ <- "occ"
    }
    if (nchar(object@name.ytype) == 0) 
        ytype <- rep(1, dim(dat)[1])
    else {
        ytype <- dat[, object@name.ytype]
        object@name.ytype <- "ytype"
    }
    all.names <- c(object@name.group, object@name.predictors, 
        object@name.response, object@name.covariates)
    dat <- dat[, all.names, drop = FALSE]
    dat <- cbind(dat, mdv = mdv, cens = cens, occ = occ, ytype = ytype)
    if (class(dat) != "data.frame") 
        dat <- as.data.frame(dat)
    object@ocov <- dat[, object@name.covariates, drop = FALSE]
    for (icov in object@name.covariates) {
        if (length(unique(dat[, icov])) == 2) 
            dat[, icov] <- as.integer(factor(dat[, icov])) - 
                1
    }
    for (i in object@name.predictors) {
        if (sum(is.na(dat[, i])) > 0) 
            cat("Removing missing values for predictor", i, "\n")
        dat <- dat[!is.na(dat[, i]), ]
    }
    idx <- c()
    inull <- c()
    for (isuj in unique(dat[, object@name.group])) {
        if (sum(1 - dat$mdv[dat[, object@name.group] == isuj]) == 
            0) {
            inull <- c(inull, isuj)
            idx <- c(idx, which(dat[, object@name.group] == isuj))
        }
    }
    print(idx)
    if (length(inull) > 0) {
        cat("Some subjects have no observations, removing them:", 
            inull, "\n")
        dat <- dat[-idx, ]
        object@ocov <- object@ocov[-idx, , drop = FALSE]
    }
    object@ntot.obs <- dim(dat)[1]
    id <- dat[, object@name.group]
    object@N <- length(unique(id))
    nind.obs <- tapply(id, id, length)
    nind.obs <- nind.obs[match(unique(id), names(nind.obs))]
    object@nind.obs <- c(nind.obs)
    dat <- cbind(index = rep(1:object@N, times = nind.obs), dat)
    object@data <- dat
    options(ow)
    validObject(object)
    return(object)
}
<bytecode: 0xc156758>
<environment: namespace:saemix>

Signatures:
        object      
target  "SaemixData"
defined "SaemixData"
 --- function (body) search ---
S4 Method read:saemix defined in namespace saemix with signature SaemixData has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
