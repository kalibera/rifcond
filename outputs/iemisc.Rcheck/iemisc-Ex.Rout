
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "iemisc"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('iemisc')
Loading required package: data.table
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AgivenF")
> ### * AgivenF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AgivenF
> ### Title: Annual value given Future value (Engineering Economics)
> ### Aliases: AF AgivenF
> 
> ### ** Examples
> 
> library(iemisc)
> # Example for equation 4-12 from the Reference text (page 135-136)
> AgivenF(309*10^6, 60, 0.5, "annual")
[1] 4428836
> # the interest rate is 0.5% per month and n is 60 months
> 
> AF(309*10^6, 60, 0.5, "annual")
   n (periods) Annual Worth ($US)
1            0                 NA
2            1          309000000
3            2          154114713
4            3          102486712
5            4           76673033
6            5           61185082
7            6           50859996
8            7           43485117
9            8           37954119
10           9           33652374
11          10           30211107
12          11           27395641
13          12           25049527
14          13           23064452
15          14           21363051
16          15           19888588
17          16           18598514
18          17           17460289
19          18           16448605
20          19           15543481
21          20           14728934
22          21           13992023
23          22           13322163
24          23           12710608
25          24           12150069
26          25           11634424
27          26           11158493
28          27           10717864
29          28           10308755
30          29            9927904
31          30            9572486
32          31            9240039
33          32            8928411
34          33            8635707
35          34            8360260
36          35            8100588
37          36            7855379
38          37            7623458
39          38            7403778
40          39            7195396
41          40            6997465
42          41            6809221
43          42            6629971
44          43            6459088
45          44            6296001
46          45            6140191
47          46            5991184
48          47            5848544
49          48            5711874
50          49            5580809
51          50            5455011
52          51            5334172
53          52            5218005
54          53            5106246
55          54            4998650
56          55            4894989
57          56            4795054
58          57            4698647
59          58            4605587
60          59            4515703
61          60            4428836
> # the interest rate is 0.5% per month and n is 60 months
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AgivenFcont")
> ### * AgivenFcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AgivenFcont
> ### Title: Annual value given Future value [continuous] (Engineering
> ###   Economics)
> ### Aliases: AgivenFcont
> 
> ### ** Examples
> 
> library(iemisc)
> AgivenFcont(300, 2, 11) # 11% interest
[1] 141.76
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AgivenG")
> ### * AgivenG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AgivenG
> ### Title: Annual value given Gradient value (Engineering Economics)
> ### Aliases: AgivenG
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-20 from the Reference text (pages 153-154)
>   AgivenG(1000, 4, 15, "annual") # the interest rate is 15%
[1] 1326.26
> 
> 
> # Example 4-31 from the Reference text (pages 166-167)
>   AgivenG(1000, 4, 20, "semiannual") # the nominal interest rate is 20% compounded semiannually
[1] 3004.48
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AgivenP")
> ### * AgivenP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AgivenP
> ### Title: Annual value given Present value (Engineering Economics)
> ### Aliases: AP AgivenP
> 
> ### ** Examples
> 
> library(iemisc)
> # Example for equation 4-14 from the Reference text (page 136)
> AgivenP(17000, 4, 1, "annual")
[1] 4356.78
> # the interest rate is 1% per month and n is 4 months
> 
> AP(17000, 4, 1, "annual")
  n (periods) Annual Worth ($US)
1           0                 NA
2           1           17170.00
3           2            8627.71
4           3            5780.38
5           4            4356.78
> # the interest rate is 1% per month and n is 4 months
> 
> 
> # Example 4-30 from the Reference text (page 166)
> AgivenP(10000, 5, 12, "month")
[1] 222.44
> # the interest rate is 12% compounded monthly for 5 years
> 
> AP(10000, 5, 12, "month")
   n (periods) Annual Worth ($US)
1            0                 NA
2            1           10100.00
3            2            5075.12
4            3            3400.22
5            4            2562.81
6            5            2060.40
7            6            1725.48
8            7            1486.28
9            8            1306.90
10           9            1167.40
11          10            1055.82
12          11             964.54
13          12             888.49
14          13             824.15
15          14             769.01
16          15             721.24
17          16             679.45
18          17             642.58
19          18             609.82
20          19             580.52
21          20             554.15
22          21             530.31
23          22             508.64
24          23             488.86
25          24             470.73
26          25             454.07
27          26             438.69
28          27             424.46
29          28             411.24
30          29             398.95
31          30             387.48
32          31             376.76
33          32             366.71
34          33             357.27
35          34             348.40
36          35             340.04
37          36             332.14
38          37             324.68
39          38             317.61
40          39             310.92
41          40             304.56
42          41             298.51
43          42             292.76
44          43             287.27
45          44             282.04
46          45             277.05
47          46             272.28
48          47             267.71
49          48             263.34
50          49             259.15
51          50             255.13
52          51             251.27
53          52             247.56
54          53             244.00
55          54             240.57
56          55             237.26
57          56             234.08
58          57             231.02
59          58             228.06
60          59             225.20
61          60             222.44
> # the interest rate is 12% compounded monthly for 5 years
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AgivenPcont")
> ### * AgivenPcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AgivenPcont
> ### Title: Annual value given Present value [continuous] (Engineering
> ###   Economics)
> ### Aliases: AgivenPcont
> 
> ### ** Examples
> 
> library(iemisc)
> # Example for equation 4-34 from the Reference text (page 170)
> AgivenPcont(1000, 10, 20) # 20% interest
[1] 256.06
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("CompIntPaid")
> ### * CompIntPaid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CompIntPaid
> ### Title: Compound Interest Paid (Engineering Economics)
> ### Aliases: CompIntPaid
> 
> ### ** Examples
> 
> library(iemisc)
> # Compound Interest example from SFPE Reference text
> CompIntPaid(100, 5, 10, frequency = "annual") # the interest rate is 10%
[1] 161.05
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("EffInt")
> ### * EffInt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EffInt
> ### Title: Effective Interest rate (Engineering Economics)
> ### Aliases: EffInt
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-28 from Sullivan Reference text (page 165)
> EffInt(1.375, frequency = "month")
[1] 17.81
> # the nominal interest rate per period (month) is 1.375%
> 
> 
> # Example from SFPE Reference text
> EffInt(18 / 12, frequency = "month")
[1] 19.56
> # the nominal interest rate is 18% per year or 18% / 12 months
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("FgivenA")
> ### * FgivenA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FgivenA
> ### Title: Future value given Annual value (Engineering Economics)
> ### Aliases: FA FgivenA
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-7 from the Reference text (page 131-132)
> FgivenA(23000, 40, 6, "annual") # the interest rate is 6%
[1] 3559525
> 
> FA(23000, 40, 6, "annual") # the interest rate is 6%
   n (periods) Future Worth ($US)
1            0                 NA
2            1            23000.0
3            2            47380.0
4            3            73222.8
5            4           100616.2
6            5           129653.1
7            6           160432.3
8            7           193058.3
9            8           227641.8
10           9           264300.3
11          10           303158.3
12          11           344347.8
13          12           388008.7
14          13           434289.2
15          14           483346.5
16          15           535347.3
17          16           590468.2
18          17           648896.2
19          18           710830.0
20          19           776479.8
21          20           846068.6
22          21           919832.7
23          22           998022.7
24          23          1080904.0
25          24          1168758.3
26          25          1261883.8
27          26          1360596.8
28          27          1465232.6
29          28          1576146.6
30          29          1693715.4
31          30          1818338.3
32          31          1950438.6
33          32          2090464.9
34          33          2238892.8
35          34          2396226.4
36          35          2562999.9
37          36          2739779.9
38          37          2927166.7
39          38          3125796.7
40          39          3336344.5
41          40          3559525.2
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("FgivenAcont")
> ### * FgivenAcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FgivenAcont
> ### Title: Future value given Annual value [continuous] (Engineering
> ###   Economics)
> ### Aliases: FgivenAcont
> 
> ### ** Examples
> 
> library(iemisc)
> FgivenAcont(2100, 13, 7) # the interest rate is 7%
[1] 42989.32
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("FgivenP")
> ### * FgivenP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FgivenP
> ### Title: Future value given Present value (Engineering Economics)
> ### Aliases: FP FgivenP
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-3 from the Reference text (page 124)
> FgivenP(8000, 4, 10, frequency = "annual") # the interest rate is 10%
[1] 11712.8
> 
> FP(8000, 4, 10, frequency = "annual") # the interest rate is 10%
  n (periods) Future Worth ($US)
1           0             8000.0
2           1             8800.0
3           2             9680.0
4           3            10648.0
5           4            11712.8
> 
> 
> FgivenP(P = c(1000, 340, 23), n = c(12, 1.3, 3), i = c(10, 2, 0.3),
+ "annual")
[1] 3138.43  348.87   23.21
> # is is 10%, 2%, and 0.3%
> # Can't use FP for this example
> 
> 
> # Example 4-29 from the Reference text (page 165-166)
> FgivenP(100, 10, 6, "quarter") # the interest rate is 6% per quarter
[1] 181.4
> 
> FP(100, 10, 6, "quarter") # the interest rate is 6% per quarter
   n (periods) Future Worth ($US)
1            0             100.00
2            1             101.50
3            2             103.02
4            3             104.57
5            4             106.14
6            5             107.73
7            6             109.34
8            7             110.98
9            8             112.65
10           9             114.34
11          10             116.05
12          11             117.79
13          12             119.56
14          13             121.36
15          14             123.18
16          15             125.02
17          16             126.90
18          17             128.80
19          18             130.73
20          19             132.70
21          20             134.69
22          21             136.71
23          22             138.76
24          23             140.84
25          24             142.95
26          25             145.09
27          26             147.27
28          27             149.48
29          28             151.72
30          29             154.00
31          30             156.31
32          31             158.65
33          32             161.03
34          33             163.45
35          34             165.90
36          35             168.39
37          36             170.91
38          37             173.48
39          38             176.08
40          39             178.72
41          40             181.40
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("FgivenPcont")
> ### * FgivenPcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FgivenPcont
> ### Title: Future value given Present value [continuous] (Engineering
> ###   Economics)
> ### Aliases: FgivenPcont
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-33 from the Reference text (page 170)
> FgivenPcont(10000, 2, 5) # the interest rate is 5%
[1] 11051.71
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Manningcirc")
> ### * Manningcirc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Manningcirc
> ### Title: Circular cross-section using the Gauckler-Manning-Strickler
> ###   equation
> ### Aliases: Manningcirc Manningcircy
> 
> ### ** Examples
> 
> library(iemisc)
> library(iemiscdata)
> 
> # Practice Problem 14.12 from Mott (page 392)
> y <- Manningcircy(y_d = 0.5, d = 6, units = "Eng")
> 
> # See npartfull in iemiscdata for the Manning's n table that the
> # following example uses
> # Use the normal Manning's n value for 1) Corrugated Metal, 2) Stormdrain.
> 
> data(npartfull)
> 
> # We are using the culvert as a stormdrain in this problem
> nlocation <- grep("Stormdrain",
+ npartfull$"Type of Conduit and Description")
> 
> n <- npartfull[nlocation, 3] # 3 for column 3 - Normal n
> 
> Manningcirc(d = 6, Sf = 1 / 500, n = n, y = y$y, units = "Eng")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is subcritical flow.

$Q
[1] 51.29267

$V
[1] 3.628214

$A
[1] 14.13717

$P
[1] 9.424778

$R
[1] 1.5

$Re
[1] 484270.7

$Fr
[1] 0.416711

> # d = 6 ft, Sf = 1 / 500 ft/ft, n = 0.024, y = 3 ft, units = "Eng"
> # This will solve for Q since it is missing and Q will be in ft^3/s
> 
> 
> 
> # Example Problem 14.2 from Mott (page 377-378)
> y <- Manningcircy(y_d = 0.5, d = 200/1000, units = "SI")
> 
> # See npartfull in iemiscdata for the Manning's n table that the
> # following example uses
> # Use the normal Manning's n value for 1) Clay, 2) Common drainage tile.
> 
> data(npartfull)
> 
> nlocation <- grep("Common drainage tile",
+ npartfull$"Type of Conduit and Description")
> 
> n <- npartfull[nlocation, 3] # 3 for column 3 - Normal n
> 
> Manningcirc(Sf = 1/1000, n = n, y = y$y, d = 200/1000, units = "SI")

Flow is NOT in the rough turbulent zone so the Gauckler-Manning-Strickler equation is not acceptable to use.


This is subcritical flow.

$Q
[1] 0.005185889

$V
[1] 0.3301439

$A
[1] 0.01570796

$P
[1] 0.3141593

$R
[1] 0.05

$Re
[1] 16.44466

$Fr
[1] 0.376182

> # Sf = 1/1000 m/m, n = 0.013, y = 0.1 m, d = 200/1000 m, units = SI units
> # This will solve for Q since it is missing and Q will be in m^3/s
> 
> 
> 
> # Example 4.1 from Sturm (page 124-125)
> Manningcircy(y_d = 0.8, d = 2, units = "Eng")
$theta
[1] 4.428595

$y
[1] 1.6

$A
[1] 2.694297

$P
[1] 4.428595

$B
[1] 1.6

$R
[1] 0.6083865

> 
> y <- Manningcircy(y_d = 0.8, d = 2, units = "Eng")
> # defines all list values within the object named y
> 
> y$y # gives the value of y
[1] 1.6
> 
> 
> 
> # Modified Exercise 4.1 from Sturm (page 153)
> # Note: The Q in Exercise 4.1 is actually found using the Chezy equation,
> # this is a modification of that problem
> # See nchannel in iemiscdata for the Manning's n table that the
> # following example uses
> # Use the normal Manning's n value for 1) Natural streams - minor streams
> # (top width at floodstage < 100 ft), 2) Mountain streams, no vegetation
> # in channel, banks usually steep, trees and brush along banks submerged at
> # high stages and 3) bottom: gravels, cobbles, and few boulders.
> 
> data(nchannel)
> 
> nlocation <- grep("bottom: gravels, cobbles, and few boulders",
+ nchannel$"Type of Channel and Description")
> 
> n <- nchannel[nlocation, 3] # 3 for column 3 - Normal n
> 
> Manningcirc(Sf = 0.002, n = n, y = y$y, d = 2, units = "Eng")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is subcritical flow.

$Q
[1] 3.213774

$V
[1] 1.192806

$A
[1] 2.694297

$P
[1] 4.428595

$R
[1] 0.6083865

$Re
[1] 64573.35

$Fr
[1] 0.1620521

> # Sf = 0.002 ft/ft, n = 0.04, y = 1.6 ft, d = 2 ft, units = English units
> # This will solve for Q since it is missing and Q will be in ft^3/s
> 
> 
> 
> # Modified Exercise 4.5 from Sturm (page 154)
> library(NISTunits)
> 
> ysi <- NISTftTOmeter(y$y)
> 
> dsi <- NISTftTOmeter(2)
> 
> Manningcirc(Sf = 0.022, n = 0.023, y = ysi, d = dsi, units = "SI")

Flow is NOT in the rough turbulent zone so the Gauckler-Manning-Strickler equation is not acceptable to use.


This is subcritical flow.

$Q
[1] 0.5249146

$V
[1] 2.097071

$A
[1] 0.2503084

$P
[1] 1.349836

$R
[1] 0.1854362

$Re
[1] 387.3998

$Fr
[1] 0.9347223

> # Sf = 0.022 m/m, n = 0.023, y = 0.48768 m, d = 0.6096 m, units = SI units
> # This will solve for Q since it is missing and Q will be in m^3/s
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:NISTunits’, ‘package:iemiscdata’

> nameEx("Manningpara")
> ### * Manningpara
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Manningpara
> ### Title: Parabolic cross-section for the Gauckler-Manning-Strickler
> ###   equation
> ### Aliases: Manningpara
> 
> ### ** Examples
> 
> library(iemisc)
> # Exercise 4.3 from Sturm (page 153)
> y <- Manningpara(Q = 12.0, B1 = 10, y1 = 2.0, Sf = 0.005, n = 0.05, units = "SI")

Flow is NOT in the rough turbulent zone so the Gauckler-Manning-Strickler equation is not acceptable to use.


This is subcritical flow.

> # defines all list values within the object named y
> # Q = 12.0 m^3/s, B1 = 10 m, y1 = 2.0 m, Sf = 0.005 m/m, n = 0.05, units = SI units
> # This will solve for y since it is missing and y will be in m
> 
> y$y # gives the value of y
[1] 1.254427
> 
> 
> # Modified Exercise 4.3 from Sturm (page 153)
> Manningpara(y = y$y, B1 = 10, y1 = 2.0, Sf = 0.005, n = 0.05, units = "SI")

Flow is NOT in the rough turbulent zone so the Gauckler-Manning-Strickler equation is not acceptable to use.


This is subcritical flow.

$Q
[1] 11.99949

$V
[1] 1.811761

$A
[1] 6.623108

$P
[1] 8.421472

$R
[1] 0.7864549

$Re
[1] 1419.471

$Fr
[1] 0.63265

> # y = 1.254427 m, B1 = 10 m, y1 = 2.0 m, Sf = 0.005 m/m, n = 0.05, units = SI units
> # This will solve for Q since it is missing and Q will be in m^3/s
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Manningrect")
> ### * Manningrect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Manningrect
> ### Title: Rectangular cross-section for the Gauckler-Manning-Strickler
> ###   equation
> ### Aliases: Manningrect
> 
> ### ** Examples
> 
> library(iemisc)
> library(iemiscdata)
> # Example Problem 14.4 from Mott (page 379)
> # See nchannel in iemiscdata for the Manning's n table that the following
> # example uses
> # Use the normal Manning's n value for 1) Natural streams - minor streams
> # (top width at floodstage < 100 ft), 2) Lined or Constructed Channels,
> # 3) Concrete, and 4) unfinished.
> 
> data(nchannel)
> 
> nlocation <- grep("unfinished", nchannel$"Type of Channel and Description")
> 
> n <- nchannel[nlocation, 3] # 3 for column 3 - Normal n
> 
> Manningrect(Q = 5.75, b = (4.50) ^ (3 / 8), Sf = 1.2/100, n = n, units =
+ "SI")

Flow is NOT in the rough turbulent zone so the Gauckler-Manning-Strickler equation is not acceptable to use.


This is supercritical flow.

$y
[1] 0.8784136

$V
[1] 3.724038

$A
[1] 1.544023

$P
[1] 3.514567

$R
[1] 0.4393209

$Re
[1] 1629.85

$Fr
[1] 1.268832

> # Q = 5.75 m^3/s, b = (4.50) ^ (3 / 8) m, Sf = 1.2 percent m/m, n = 0.017,
> # units = SI units
> # This will solve for y since it is missing and y will be in m
> 
> 
> 
> # Example Problem 14.5 from Mott (page 379-380)
> # See nchannel in iemiscdata for the Manning's n table that the following
> # example uses
> # Use the normal Manning's n value for 1) Natural streams - minor streams
> # (top width at floodstage < 100 ft), 2) Lined or Constructed Channels,
> # 3) Concrete, and 4) unfinished.
> 
> data(nchannel)
> 
> nlocation <- grep("unfinished", nchannel$"Type of Channel and Description")
> 
> n <- nchannel[nlocation, 3] # 3 for column 3 - Normal n
> 
> Manningrect(Q = 12, b = 2, Sf = 1.2/100, n = n, units = "SI")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is supercritical flow.

$y
[1] 1.347974

$V
[1] 4.451124

$A
[1] 2.695948

$P
[1] 4.695948

$R
[1] 0.5741009

$Re
[1] 2545.714

$Fr
[1] 1.224246

> # Q = 12 m^3/s, b = 2 m, Sf = 1.2 percent m/m, n = 0.017, units = SI
> # units
> # This will solve for y since it is missing and y will be in m
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:iemiscdata’

> nameEx("Manningtrap")
> ### * Manningtrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Manningtrap
> ### Title: Trapezoidal cross-section for the Gauckler-Manning-Strickler
> ###   equation
> ### Aliases: Manningtrap
> 
> ### ** Examples
> 
> library(iemisc)
> library(iemiscdata)
> # Exercise 4.1 from Sturm (page 153)
> 
> Manningtrap(Q = 3000, b = 40, m = 3, Sf = 0.002, n = 0.025, units = "Eng")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is subcritical flow.

$y
[1] 6.603559

$V
[1] 7.595642

$A
[1] 394.9633

$P
[1] 81.76457

$R
[1] 4.830495

$Re
[1] 3264826

$Fr
[1] 0.6012408

> # Q = 3000 cfs, b = 40 ft, m = 3, Sf = 0.002 ft/ft, n = 0.025,
> # units = English units
> # This will solve for y since it is missing and y will be in ft
> 
> 
> 
> # Practice Problem 14.19 from Mott (page 392)
> # See nchannel in iemiscdata for the Manning's n table that the following
> # example uses
> # Use the minimum Manning's n value for 1) Natural streams - minor streams
> # (top width at floodstage < 100 ft), 2) Lined or Constructed Channels,
> # 3) Concrete and 4) float finish.
> 
> data(nchannel)
> 
> nlocation <- grep("float finish",
+ nchannel$"Type of Channel and Description")
> 
> n <- nchannel[nlocation, 3][1] # 3 for column 3 - Normal n
> 
> Manningtrap(y = 1.5, b = 3, m = 3/2, Sf = 0.1/100, n = n, units = "SI")

Flow is NOT in the rough turbulent zone so the Gauckler-Manning-Strickler equation is not acceptable to use.


This is subcritical flow.

$Q
[1] 15.8923

$V
[1] 2.018069

$A
[1] 7.875

$P
[1] 8.408327

$R
[1] 0.9365716

$Re
[1] 1882.906

$Fr
[1] 0.6288992

> # y = 1.5 m, b = 3 m, m = 3/2, Sf = 0.1/100 m/m, n = 0.023, units = SI
> # units
> # This will solve for Q since it is missing and Q will be in m^3/s
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:iemiscdata’

> nameEx("Manningtri")
> ### * Manningtri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Manningtri
> ### Title: Triangular cross-section for the Gauckler-Manning-Strickler
> ###   equation
> ### Aliases: Manningtri
> 
> ### ** Examples
> 
> library(iemisc)
> library(iemiscdata)
> # Practice Problem 14.41 from Mott (page 393)
> # See nchannel in iemiscdata for the Manning's n table that the
> # following example uses
> # Use the normal Manning's n value for 1) Natural streams - minor streams
> # (top width at floodstage < 100 ft), 2) Excavated or Dredged Channels, 3)
> # Earth, straight, and uniform, 4) clean, recently completed.
> 
> data(nchannel)
> 
> nlocation <- grep("clean, recently completed",
+ nchannel$"Type of Channel and Description")
> 
> n <- nchannel[nlocation, 3] # 3 for column 3 - Normal n
> 
> Manningtri(Q = 0.68, m = 1.5, Sf = 0.0023, n = n, units = "Eng")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is subcritical flow.

$y
[1] 0.5524423

$V
[1] 1.485401

$A
[1] 0.4577888

$P
[1] 1.991859

$R
[1] 0.2298299

$Re
[1] 30377.66

$Fr
[1] 0.4982678

> # Q = 0.68 cfs, m = 1.5, Sf = 0.002 ft/ft, n = 0.05, units = English units
> # This will solve for y since it is missing and y will be in ft
> 
> 
> 
> # Modified Exercise 4.1 from Sturm (page 153)
> Manningtri(Q = 3000, m = 3, Sf = 0.002, n = 0.025, units = "Eng")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is subcritical flow.

$y
[1] 11.13688

$V
[1] 8.062556

$A
[1] 372.0905

$P
[1] 70.43583

$R
[1] 5.282687

$Re
[1] 3789934

$Fr
[1] 0.6023563

> # Q = 3000 cfs, m = 3, Sf = 0.002 ft/ft, n = 0.025, units = English units
> # This will solve for y since it is missing and y will be in ft
> 
> 
> 
> # Modified Exercise 4.5 from Sturm (page 154)
> Manningtri(Q = 950, m = 2, Sf = 0.022, n = 0.023, units = "SI")

Flow IS in the rough turbulent zone so the Gauckler-Manning-Strickler equation is acceptable to use.


This is supercritical flow.

$y
[1] 6.131617

$V
[1] 12.63408

$A
[1] 75.19345

$P
[1] 27.42142

$R
[1] 2.742142

$Re
[1] 34513.2

$Fr
[1] 2.30415

> # Q = 950 m^3/s, m = 2, Sf = 0.022 m/m, n = 0.023, units = SI units
> # This will solve for y since it is missing and y will be in m
> 
> 
> 
> 
> cleanEx()

detaching ‘package:iemiscdata’

> nameEx("PgivenA")
> ### * PgivenA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenA
> ### Title: Present value given Annual value (Engineering Economics)
> ### Aliases: PA PgivenA
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-9 from the Reference text (page 133-134)
> PgivenA(20000, 5, 15, "annual") # the interest rate is 15%
[1] 67043.1
> 
> PA(20000, 5, 15, "annual") # the interest rate is 15%
  n (periods) Present Worth ($US)
1           0                  NA
2           1            17391.30
3           2            32514.18
4           3            45664.50
5           4            57099.57
6           5            67043.10
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PgivenA1")
> ### * PgivenA1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenA1
> ### Title: Present value for geometric gradient series (Engineering
> ###   Economics)
> ### Aliases: PgivenA1
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-23 from the Reference text (page 158-159)
> PgivenA1(1000, 25, 20, 4) # i is 25% and f is 20%
[1] 3013.07
> 
> 
> # Example 4-24 from the Reference text (page 159)
> PgivenA1(1000, 25, -20, 4) # i is 25% and f is -20%
[1] 1849.4
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PgivenAcont")
> ### * PgivenAcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenAcont
> ### Title: Present value given Annual value [continuous] (Engineering
> ###   Economics)
> ### Aliases: PgivenAcont
> 
> ### ** Examples
> 
> library(iemisc)
>   PgivenAcont(2000, 3, 12) # the interest rate is 12%
[1] 4742.45
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PgivenF")
> ### * PgivenF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenF
> ### Title: Present value given Future value (Engineering Economics)
> ### Aliases: PF PgivenF
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-4 from the Reference text (page 128)
> PgivenF(10000, 6, 8, "annual") # the interest rate is 8%
[1] 6301.7
> 
> PF(10000, 6, 8, "annual") # the interest rate is 8%
  n (periods) Present Worth ($US)
1           0            10000.00
2           1             9259.26
3           2             8573.39
4           3             7938.32
5           4             7350.30
6           5             6805.83
7           6             6301.70
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PgivenFcont")
> ### * PgivenFcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenFcont
> ### Title: Present value given Future value [continuous] (Engineering
> ###   Economics)
> ### Aliases: PgivenFcont
> 
> ### ** Examples
> 
> library(iemisc)
> PgivenFcont(1000, 9, 7) # the interest rate is 7%
[1] 532.59
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PgivenFivary")
> ### * PgivenFivary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenFivary
> ### Title: "Present equivalent of a series of future cash flows subject to
> ###   varying interest rates" (Engineering Economics)
> ### Aliases: PgivenFivary
> 
> ### ** Examples
> 
> library(iemisc)
> # Example for equation 4-31 from the Reference text (page 162)
> PgivenFivary(Fn = 1000, ik = c(10, 12, 13, 10), k = 1)
[1] 653.01
> # i1 is 10%, i2 is 12%, i3 is 14%, and i4 is 10% & k = 1 year
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PgivenG")
> ### * PgivenG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PgivenG
> ### Title: Present value given Gradient value (Engineering Economics)
> ### Aliases: PgivenG
> 
> ### ** Examples
> 
> library(iemisc)
> # Example 4-20 from the Reference text (pages 153-154)
> PgivenG(1000, 4, 15) # the interest rate is 15%
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpNyseDh/R.INSTALL34e7673ff8c1/iemisc/R/PgivenG.R#46: 
 --- if/while statement is in package --- 
iemisc
 --- call (currently evaluated) --- 
PgivenG(1000, 4, 15)
 --- R stacktrace ---
where 1: PgivenG(1000, 4, 15)

 --- value of length: 6 type: logical ---
[1]  TRUE FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function (G, n, i, frequency = c("annual", "semiannual", "quarter", "bimonth", "month", "daily")) {

i <- i / 100

fr <- frequency

if (fr == "annual") {
fr <- 1
n <- n * fr

i <- i / fr

PgivenG <- G * (1 / i) * (((((1 + i) ^ n) - 1) / (i * ((1 + i) ^ n))) - (n / (1 + i) ^ n))

return(round(PgivenG, digits = 2))

} else if (fr == "semiannual") {

fr <- 2
n <- n * fr

i <- i / fr

PgivenG <- G * (1 / i) * (((((1 + i) ^ n) - 1) / (i * ((1 + i) ^ n))) - (n / (1 + i) ^ n))

return(round(PgivenG, digits = 2))

} else if (fr == "quarter") {

fr <- 4
n <- n * fr

i <- i / fr

PgivenG <- G * (1 / i) * (((((1 + i) ^ n) - 1) / (i * ((1 + i) ^ n))) - (n / (1 + i) ^ n))

return(round(PgivenG, digits = 2))

} else if (fr == "bimonth") {

fr <- 6
n <- n * fr

i <- i / fr

PgivenG <- G * (1 / i) * (((((1 + i) ^ n) - 1) / (i * ((1 + i) ^ n))) - (n / (1 + i) ^ n))

return(round(PgivenG, digits = 2))

} else if (fr == "month") {

fr <- 12
n <- n * fr

i <- i / fr

PgivenG <- G * (1 / i) * (((((1 + i) ^ n) - 1) / (i * ((1 + i) ^ n))) - (n / (1 + i) ^ n))

return(round(PgivenG, digits = 2))

} else if (fr == "daily") {

fr <- 365
n <- n * fr

i <- i / fr

PgivenG <- G * (1 / i) * (((((1 + i) ^ n) - 1) / (i * ((1 + i) ^ n))) - (n / (1 + i) ^ n))

return(round(PgivenG, digits = 2))

}
}
<environment: namespace:iemisc>
 --- function (body) search ---
Function PgivenG in namespace iemisc has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
