 --- srcref --- 
 at /tmp/RtmpFxI8Zp/R.INSTALLc2291960602a/RObsDat/R/sv.R#9: 
 --- call (function) --- 
sv(getDataResult@DerivedFromIDs@data[selectMeta])
 --- stacktrace ---
where 1: sv(getDataResult@DerivedFromIDs@data[selectMeta])
where 2 at /tmp/RtmpFxI8Zp/R.INSTALLc2291960602a/RObsDat/R/odm1_1.R#570: paste("UPDATE DataValues SET DataValue = \"", value, "\", ValueAccuracy = ", 
    valueAccuracy, ", LocalDateTime = \"", localDateTime, "\", UTCOffset = \"", 
    tz2offset(TZ), "\", DateTimeUTC = \"", strftime(localDateTime, 
        tz = TZ), "\", SiteID = ", SiteID, ", VariableID = ", 
    VariableID, ", OffsetValue = ", Offset, ", OffsetTypeID = ", 
    OffsetTypeID, ", CensorCode = \"", CensorCode, "\", QualifierID = ", 
    QualifierID, ", MethodID = ", MethodID, ", SourceID = ", 
    SourceID, ", SampleID = ", SampleID, ", DerivedFromID = ", 
    DerivedFromID, ", QualityControlLevelID = ", QualityControlLevelID, 
    " WHERE ValueID = ", ValueID, sep = "")
where 3: .local(object, ValueID, localDateTime, value, TZ, SiteID, VariableID, 
    Offset, OffsetTypeID, CensorCode, QualifierID, MethodID, 
    SourceID, SampleID, DerivedFromID, QualityControlLevelID, 
    ...)
where 4 at /tmp/RtmpFxI8Zp/R.INSTALLc2291960602a/RObsDat/R/odm1_1.R#50: IupdateDataValues(obj, ValueID = rec.id, localDateTime = index(getDataResult@time[the.row, 
    ]), value = sv(coredata(getDataResult@data[the.row, ])), 
    valueAccuracy = sv(getDataResult@Metadata$Valueaccuracy[selectMeta]), 
    TZ = the.tz, SiteID = getID("Site", getDataResult@Metadata$site[selectMeta]), 
    VariableID = getID("Variable", getDataResult@Metadata$variable[selectMeta]), 
    Offset = sv(getDataResult@Metadata$offsetvalue[selectMeta]), 
    OffsetTypeID = getID("OffsetType", getDataResult@Metadata$offsettype[selectMeta]), 
    CensorCode = sv(getDataResult@Metadata$censorcode[selectMeta]), 
    QualifierID = getID("Qualifier", getDataResult@Metadata$qualifier[selectMeta]), 
    MethodID = getID("Method", getDataResult@Metadata$method[selectMeta]), 
    SourceID = getID("Source", getDataResult@Metadata$source[selectMeta]), 
    SampleID = getID("Sample", getDataResult@Metadata$sample[selectMeta]), 
    DerivedFromID = sv(getDataResult@DerivedFromIDs@data[selectMeta]), 
    QualityControlLevelID = getID("QualityControlLevel", getDataResult@Metadata$qualitycontrollevel[selectMeta]))
where 5 at /tmp/RtmpFxI8Zp/R.INSTALLc2291960602a/RObsDat/R/updateDataValues.R#33: IupdateDataValues(obj, ValueID = rec.id, localDateTime = index(getDataResult@time[the.row, 
    ]), value = sv(coredata(getDataResult@data[the.row, ])), 
    valueAccuracy = sv(getDataResult@Metadata$Valueaccuracy[selectMeta]), 
    TZ = the.tz, SiteID = getID("Site", getDataResult@Metadata$site[selectMeta]), 
    VariableID = getID("Variable", getDataResult@Metadata$variable[selectMeta]), 
    Offset = sv(getDataResult@Metadata$offsetvalue[selectMeta]), 
    OffsetTypeID = getID("OffsetType", getDataResult@Metadata$offsettype[selectMeta]), 
    CensorCode = sv(getDataResult@Metadata$censorcode[selectMeta]), 
    QualifierID = getID("Qualifier", getDataResult@Metadata$qualifier[selectMeta]), 
    MethodID = getID("Method", getDataResult@Metadata$method[selectMeta]), 
    SourceID = getID("Source", getDataResult@Metadata$source[selectMeta]), 
    SampleID = getID("Sample", getDataResult@Metadata$sample[selectMeta]), 
    DerivedFromID = sv(getDataResult@DerivedFromIDs@data[selectMeta]), 
    QualityControlLevelID = getID("QualityControlLevel", getDataResult@Metadata$qualitycontrollevel[selectMeta]))
where 6 at /tmp/RtmpfKYBL5/Rex2807747a5c987#75: updateDataValues(inDB, "Correction of wrong value")
where 7: eval(ei, envir)
where 8: eval(ei, envir)
where 9: withVisible(eval(ei, envir))
where 10: source(tf, local, echo = echo, prompt.echo = paste0(prompt.prefix, 
    getOption("prompt")), continue.echo = paste0(prompt.prefix, 
    getOption("continue")), verbose = verbose, max.deparse.length = Inf, 
    encoding = "UTF-8", skip.echo = skips, keep.source = TRUE)
where 11: example(addDataValues)

 --- value of length: 40 type: logical ---
   Distance
1      TRUE
2      TRUE
3      TRUE
4      TRUE
5      TRUE
6      TRUE
7      TRUE
8      TRUE
9      TRUE
10     TRUE
11     TRUE
12     TRUE
13     TRUE
14     TRUE
15     TRUE
16     TRUE
17     TRUE
18     TRUE
19     TRUE
20     TRUE
21     TRUE
22     TRUE
23     TRUE
24     TRUE
25     TRUE
26     TRUE
27     TRUE
28     TRUE
29     TRUE
30     TRUE
31     TRUE
32     TRUE
33     TRUE
34     TRUE
35     TRUE
36     TRUE
37     TRUE
38     TRUE
39     TRUE
40     TRUE
 --- function --- 
function(the.vect, rownum=1){ #select variable
	#avoid going beyond the vector.
	#If we have only one entry, we may
	# assume that this is valid for all
	if(length(the.vect)==1) rownum=1

	stopifnot(is.null(the.vect) || rownum <= length(the.vect))

	if(is.null(the.vect)){
		to.ret <- "NULL" 
	} else if(is.na(the.vect[rownum])){
		to.ret <- "NULL" 
	} else {
		to.ret <- the.vect[rownum]
	}
	return(to.ret)
}
<environment: namespace:RObsDat>
 --- function (body) search ---
Function sv in namespace RObsDat has this body.
