
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(stepR)
Successfully loaded stepR package version 2.0-1.
Several new functions are added in version 2.0-0. Some older functions are deprecated (still working) and may be defunct in a later version. Please read the documentation for more details.
> 
> test_check("stepR")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpwH7Aot/R.INSTALL28281711dff8/stepR/R/monteCarloSimulation.R#53: 
 --- if/while statement is in package --- 
stepR
 --- call (currently evaluated) --- 
.monteCarloSimulation(r = r, output = "vector", data = data, 
    intervalSystem = intervalSystem, penalty = "none", ...)
 --- R stacktrace ---
where 1: .monteCarloSimulation(r = r, output = "vector", data = data, 
    intervalSystem = intervalSystem, penalty = "none", ...)
where 2: .loadVector(data = data, intervalSystem = intervalSystem, penalty = penalty, 
    r = r, options = options, ...)
where 3: .getVectorStat(stat = stat, data = data, intervalSystem = intervalSystem, 
    penalty = penalty, r = r, options = options, ...)
where 4: .critVal(q = q, alpha = alpha, data = data, output = output, 
    intervalSystem = intervalSystem, ...)
where 5: .RemoveAdditionalArgsCV(q = q, alpha = alpha, data = data, output = "vector", 
    intervalSystem = intervalSystem, ...)
where 6: computeBounds(testy, alpha = 0.1, r = 100L, seed = c(1, 2), options = list(load = list()))
where 7 at /var/scratch2/tomas/tmp/RtmpBSpEFw/R.INSTALLd6806e63e92c/rlang/R/eval.R#66: .Call(rlang_eval, expr, env)
where 8: eval_bare(get_expr(quo), get_env(quo))
where 9 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/capture-condition.R#78: withCallingHandlers(code, warning = function(condition) {
    out$push(condition)
    invokeRestart("muffleWarning")
})
where 10 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/expectation.R#99: capture(act$val <- eval_bare(get_expr(quo), get_env(quo)))
where 11 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/expect-output.R#161: quasi_capture(enquo(object), capture_warnings, label = label)
where 12 at testthat/test-computeBounds.R#663: expect_warning(computeBounds(testy, alpha = 0.1, r = 100L, seed = c(1, 
    2), options = list(load = list())))
where 13: eval(code, test_env)
where 14: eval(code, test_env)
where 15: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 16: doTryCatch(return(expr), name, parentenv, handler)
where 17: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 18: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 19: doTryCatch(return(expr), name, parentenv, handler)
where 20: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 21: tryCatchList(expr, classes, parentenv, handlers)
where 22: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 23 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#31: test_code(desc, code, env = parent.frame())
where 24 at testthat/test-computeBounds.R#203: test_that("argument q is computed correctly", {
    testn <- 36L
    testy <- c(rnorm(12, 1, 0.23), rnorm(12, -1, 0.23), rnorm(12, 
        1, 0.23))
    teststat <- monteCarloSimulation(36L, r = 100L)
    ret <- computeBounds(testy, alpha = 0.1, stat = teststat)
    expect_identical(ret, computeBounds(testy, alpha = 0.1, stat = teststat, 
        nq = testn, family = "gauss", intervalSystem = "all", 
        lengths = 1:testn, penalty = "sqrt"))
    expect_identical(ret, computeBounds(testy, q = critVal(alpha = 0.1, 
        stat = teststat, n = testn)))
    expect_error(computeBounds(testy, alpha = "s", stat = teststat))
    expect_error(computeBounds(testy, alpha = 0, stat = teststat))
    expect_identical(computeBounds(testy, alpha = 0.075, stat = teststat), 
        computeBounds(testy, q = critVal(alpha = 0.075, stat = teststat, 
            n = testn)))
    expect_error(computeBounds(testy, alpha = 0.1, stat = teststat, 
        n = testn))
    expect_error(computeBounds(testy, alpha = 0.1, nq = "s", 
        stat = teststat))
    expect_error(computeBounds(testy, q = 1, nq = "s", stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, nq = Inf, 
        stat = teststat))
    expect_error(computeBounds(testy, q = 1, nq = Inf, stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, nq = 8L, stat = teststat))
    expect_error(computeBounds(testy, q = 1, nq = 8L, stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, penalty = "", 
        stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, penalty = "ads", 
        stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, penalty = "weights", 
        weights = rep(1/8, 8), stat = teststat))
    expect_identical(computeBounds(testy, alpha = 0.1, penalty = "weights", 
        stat = teststat), computeBounds(testy, q = critVal(alpha = 0.1, 
        penalty = "weights", weights = rep(1/36, 36), stat = teststat, 
        n = testn)))
    expect_identical(computeBounds(testy, alpha = 0.1, penalty = "weights", 
        weights = rep(1, 36), stat = teststat), computeBounds(testy, 
        q = critVal(alpha = 0.1, penalty = "weights", weights = rep(1/36, 
            36), stat = teststat, n = testn)))
    teststat <- monteCarloSimulation(n = 36L, r = 100L)
    expect_identical(computeBounds(testy, alpha = 0.14, penalty = "log", 
        stat = teststat, intervalSystem = "all", lengths = c(1, 
            5, 8, 23)), computeBounds(testy, intervalSystem = "all", 
        lengths = c(1, 5, 8, 23), q = critVal(alpha = 0.14, intervalSystem = "all", 
            lengths = c(1, 5, 8, 23), penalty = "log", stat = teststat, 
            n = testn)))
    teststat <- monteCarloSimulation(n = 36L, r = 100L, intervalSystem = "dyaLen")
    expect_identical(computeBounds(testy, alpha = 0.034, penalty = "none", 
        stat = teststat, intervalSystem = "dyaLen", lengths = c(1, 
            4, 8, 32)), computeBounds(testy, intervalSystem = "dyaLen", 
        lengths = c(1, 4, 8, 32), q = critVal(alpha = 0.034, 
            intervalSystem = "dyaLen", lengths = c(1, 4, 8, 32), 
            penalty = "none", stat = teststat, n = testn)))
    teststat <- monteCarloSimulation(n = 36L, r = 100L, intervalSystem = "dyaPar")
    expect_identical(computeBounds(testy, alpha = 0.56, penalty = "weights", 
        weights = c(0.2, 0.3, 0.4, 0.1), stat = teststat, intervalSystem = "dyaPar", 
        lengths = c(2, 4, 8, 32)), computeBounds(testy, intervalSystem = "dyaPar", 
        lengths = c(2, 4, 8, 32), q = critVal(alpha = 0.56, intervalSystem = "dyaPar", 
            lengths = c(2, 4, 8, 32), penalty = "weights", weights = c(0.2, 
                0.3, 0.4, 0.1), stat = teststat, n = testn)))
    teststat <- matrix(abs(rnorm(10000 * testn)), testn, 10000)
    expect_error(computeBounds(testy, alpha = 0.1, stat = teststat))
    teststat <- monteCarloSimulation(n = 37L, r = 100L)
    expect_identical(computeBounds(testy, alpha = 0.05, stat = teststat, 
        nq = 37L), computeBounds(testy, q = critVal(alpha = 0.05, 
        stat = teststat, n = testn, nq = 37L)))
    teststat <- monteCarloSimulation(n = 36L, r = 100L, intervalSystem = "dyaPar")
    expect_identical(computeBounds(testy, alpha = 0.014, stat = teststat, 
        nq = 100L, intervalSystem = "dyaPar", lengths = 2^c(0:3, 
            5)), computeBounds(testy, intervalSystem = "dyaPar", 
        lengths = 2^c(0:3, 5), q = critVal(alpha = 0.014, intervalSystem = "dyaPar", 
            lengths = 2^c(0:3, 5), stat = teststat, n = testn, 
            nq = 100L)))
    teststat <- monteCarloSimulation(n = 36L, r = 100L, intervalSystem = "all")
    expect_identical(computeBounds(testy, alpha = 0.014, stat = teststat, 
        nq = 100L, intervalSystem = "all", lengths = 1L), computeBounds(testy, 
        intervalSystem = "all", lengths = 1L, q = critVal(alpha = 0.014, 
            intervalSystem = "all", lengths = 1, stat = teststat, 
            n = testn, nq = 100L)))
    expect_error(computeBounds(testy, alpha = 0.1, output = "vector", 
        stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, data = 1, 
        stat = teststat))
    teststat <- monteCarloSimulation(n = 36L, r = 100L, output = "maximum")
    expect_error(computeBounds(testy, alpha = 0.1, penalty = "weights", 
        stat = teststat))
    teststatmatrix <- monteCarloSimulation(n = 36L, r = 100L)
    teststatvector <- monteCarloSimulation(n = 36L, r = 100L, 
        output = "maximum", penalty = "sqrt")
    expect_identical(computeBounds(testy, alpha = 0.05, stat = teststatvector), 
        computeBounds(testy, q = critVal(alpha = 0.05, stat = teststatmatrix, 
            n = testn)))
    teststatvector <- monteCarloSimulation(n = 36L, r = 100L, 
        output = "maximum", penalty = "log", lengths = c(1, 3, 
            5, 8, 9, 12))
    expect_identical(computeBounds(testy, alpha = 0.15, stat = teststatvector, 
        nq = 100L, lengths = c(1, 3, 5, 8, 9, 12), penalty = "log"), 
        computeBounds(testy, lengths = c(1, 3, 5, 8, 9, 12), 
            q = critVal(alpha = 0.15, stat = teststatmatrix, 
                n = testn, nq = 100L, lengths = c(1, 3, 5, 8, 
                  9, 12), penalty = "log")))
    teststatmatrix <- monteCarloSimulation(n = 36L, r = 100L, 
        intervalSystem = "dyaLen")
    teststatvector <- monteCarloSimulation(n = 36L, r = 100L, 
        output = "maximum", intervalSystem = "dyaLen", penalty = "sqrt", 
        lengths = c(1, 2, 8, 16))
    expect_identical(computeBounds(testy, alpha = 0.05, stat = teststatvector, 
        nq = 2^7L, intervalSystem = "dyaLen", lengths = c(1, 
            2, 8, 16), penalty = "sqrt"), computeBounds(testy, 
        intervalSystem = "dyaLen", lengths = c(1, 2, 8, 16), 
        q = critVal(alpha = 0.05, stat = teststatmatrix, n = testn, 
            nq = 2^7L, intervalSystem = "dyaLen", lengths = c(1, 
                2, 8, 16), penalty = "sqrt")))
    teststatmatrix <- monteCarloSimulation(n = 36L, r = 100L, 
        intervalSystem = "dyaPar")
    teststatvector <- monteCarloSimulation(n = 36L, r = 100L, 
        output = "maximum", intervalSystem = "dyaPar", penalty = "sqrt", 
        lengths = c(1, 2, 8, 16, 32))
    expect_identical(computeBounds(testy, alpha = 0.122, stat = teststatvector, 
        nq = 2^9L, intervalSystem = "dyaPar", lengths = c(1, 
            2, 8, 16, 32), penalty = "sqrt"), computeBounds(testy, 
        intervalSystem = "dyaPar", lengths = c(1, 2, 8, 16, 32), 
        q = critVal(alpha = 0.122, stat = teststatmatrix, n = testn, 
            nq = 2^9L, intervalSystem = "dyaPar", lengths = c(1, 
                2, 8, 16, 32), penalty = "sqrt")))
    expect_identical(computeBounds(testy, alpha = 0.122, stat = teststatvector, 
        nq = 2^9L, intervalSystem = "dyaPar", lengths = c(1, 
            2, 8, 16, 32), penalty = "sqrt"), computeBounds(testy, 
        intervalSystem = "dyaPar", lengths = c(1, 2, 8, 16, 32), 
        q = critVal(alpha = 0.122, stat = teststatvector, n = testn, 
            nq = 2^9L, intervalSystem = "dyaPar", lengths = c(1, 
                2, 8, 16, 32), penalty = "sqrt", output = "vector")))
    expect_identical(computeBounds(testy, alpha = 0.122, stat = teststatvector, 
        nq = 2^9L, intervalSystem = "dyaPar", lengths = c(1, 
            2, 8, 16, 32), penalty = "sqrt"), computeBounds(testy, 
        intervalSystem = "dyaPar", lengths = c(1, 2, 8, 16, 32), 
        q = critVal(alpha = 0.122, stat = teststatmatrix, n = testn, 
            nq = 2^9L, intervalSystem = "dyaPar", lengths = c(1, 
                2, 8, 16, 32), penalty = "sqrt", output = "vector")))
    expect_error(computeBounds(testy, alpha = 0.1, r = "s", options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 0, options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = c(100, 
        200), options = list(load = list())))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100.5, 
        options = list(load = list())), computeBounds(testy, 
        alpha = 0.1, r = 100L, options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulat = "vector", save = list(), load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = "vector"))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vecto", save = list(), load = list())))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        intervalSystem = "dyaPar", lengths = c(2, 4, 8), penalty = "log", 
        options = list(simulation = "vector", save = list(), 
            load = list())), computeBounds(testy, intervalSystem = "dyaPar", 
        lengths = c(2, 4, 8), q = critVal(n = length(testy), 
            alpha = 0.1, r = 100L, intervalSystem = "dyaPar", 
            lengths = c(2, 4, 8), penalty = "log", options = list(simulation = "vector", 
                save = list(), load = list()))))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        lengths = 3:17, penalty = "log", options = list(simulation = "vectorIncreased", 
            save = list(), load = list())), computeBounds(testy, 
        lengths = 3:17, q = critVal(n = length(testy), alpha = 0.1, 
            r = 100L, lengths = 3:17, penalty = "log", options = list(simulation = "vectorIncreased", 
                save = list(), load = list()))))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        lengths = 3:17, penalty = "log", nq = 100, options = list(simulation = "vectorIncreased", 
            save = list(), load = list())), computeBounds(testy, 
        lengths = 3:17, q = critVal(n = 100, alpha = 0.1, r = 100L, 
            lengths = 3:17, penalty = "log", options = list(simulation = "vector", 
                save = list(), load = list()))))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        lengths = 10:13, penalty = "weights", weights = rep(1/4, 
            4), options = list(simulation = "matrix", save = list(), 
            load = list())), computeBounds(testy, lengths = 10:13, 
        q = critVal(n = length(testy), alpha = 0.1, r = 100L, 
            lengths = 10:13, penalty = "weights", weights = rep(1/4, 
                4), options = list(simulation = "matrix", save = list(), 
                load = list()))))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrixIncreased", save = list(), 
            load = list())), computeBounds(testy, q = critVal(n = length(testy), 
        alpha = 0.1, r = 100L, options = list(simulation = "matrixIncreased", 
            save = list(), load = list()))))
    testfile <- c(tempfile(pattern = "file", tmpdir = tempdir(), 
        fileext = ".RDS"), tempfile(pattern = "file", tmpdir = tempdir(), 
        fileext = ".RDS"))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(RDSfile = testfile, 
            test = 1), load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(RDSfile = testfile), 
            load = list(test = "test"))))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(RDSfile = c(testfile, 
            testfile)), load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(RDSfile = 10), 
            load = list())))
    teststat <- monteCarloSimulation(36L, r = 100L)
    teststatvec <- monteCarloSimulation(36L, r = 100L, output = "maximum")
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(RDSfile = testfile), 
            load = list())), computeBounds(testy, alpha = 0.1, 
        stat = teststat))
    expect_identical(readRDS(testfile[1]), teststatvec)
    expect_identical(readRDS(testfile[2]), teststat)
    expect_error(critVal(100L, alpha = 0.1, r = 100L, options = list(simulation = "vector", 
        load = list(RDSfile = 10), save = list())))
    expect_error(critVal(100L, alpha = 0.1, r = 100L, options = list(simulation = "vector", 
        load = list(RDSfile = testfile), save = list())))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 50L, 
        options = list(simulation = "matrix", load = list(RDSfile = testfile[1]), 
            save = list())), computeBounds(testy, alpha = 0.1, 
        stat = teststat))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 50L, 
        options = list(simulation = "matrix", load = list(RDSfile = testfile[1]), 
            save = list())), computeBounds(testy, alpha = 0.1, 
        stat = teststat))
    unlink(testfile)
    testvariable <- c("testsavevector", "testsavematrix")
    testStepR <- new.env()
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(variable = c(testvariable, 
            testvariable)), load = list(), envir = testStepR)))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(variable = 10), 
            load = list(), envir = testStepR)))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(variable = testvariable), 
            load = list(), envir = "testStepR")))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(variable = testvariable), 
            load = list(), envir = c(testStepR, testStepR))))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(variable = testvariable), 
            load = list(), envir = c(testStepR, 10))))
    teststat <- monteCarloSimulation(36L, r = 100L, output = "maximum")
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "vector", save = list(variable = testvariable), 
            load = list(), envir = testStepR)), computeBounds(testy, 
        alpha = 0.1, stat = teststat))
    expect_identical(get("testsavevector", envir = testStepR), 
        teststat)
    expect_false(exists("testsavematrix", envir = testStepR))
    remove(testsavevector, envir = testStepR)
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(workspace = "matri"), 
            load = list(), envir = testStepR)))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(workspace = c("vector", 
            "matri")), load = list(), envir = testStepR)))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", load = list(workspace = "matri"), 
            save = list(), envir = testStepR)))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", load = list(workspace = c("vector", 
            "matri")), save = list(), envir = testStepR)))
    teststat <- monteCarloSimulation(36L, r = 100L)
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(workspace = "matrix"), 
            load = list(), envir = testStepR)), computeBounds(testy, 
        alpha = 0.1, stat = teststat, options = list()))
    expect_identical(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat[[1]], teststat)
    expect_identical(length(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat), 1L)
    expect_identical(computeBounds(testy, alpha = 0.1, r = 50L, 
        options = list(simulation = "matrix", save = list(), 
            load = list(workspace = "matrix"), envir = testStepR)), 
        computeBounds(testy, alpha = 0.1, stat = teststat, options = list()))
    remove(critValStepRTab, envir = testStepR)
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(fileSystem = "matri"), 
            load = list(), dirs = "testStepR")))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(fileSystem = c("vector", 
            "matri")), load = list(), dirs = "testStepR")))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", load = list(fileSystem = "matri"), 
            save = list(), dirs = "testStepR")))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", load = list(fileSystem = c("vector", 
            "matri")), save = list(), dirs = "testStepR")))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(fileSystem = "matrix"), 
            load = list(), dirs = c("testStepR", "test"))))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(fileSystem = "matrix"), 
            load = list(), dirs = 10)))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        options = list(simulation = "matrix", save = list(fileSystem = "matrix"), 
            load = list(), dirs = "testStepR")), computeBounds(testy, 
        alpha = 0.1, stat = teststat, options = list()))
    expect_identical(R.cache::loadCache(attr(teststat, "keyList"), 
        dirs = "testStepR"), teststat)
    expect_identical(length(list.files(file.path(R.cache::getCacheRootPath(), 
        "testStepR"))), 1L)
    expect_identical(critVal(36L, alpha = 0.1, r = 50L, options = list(simulation = "matrix", 
        save = list(), load = list(fileSystem = "matrix"), dirs = "testStepR")), 
        critVal(36L, alpha = 0.1, stat = teststat, options = list()))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 50L, 
        options = list(simulation = "matrix", save = list(), 
            load = list(fileSystem = "matrix"), dirs = "testStepR")), 
        computeBounds(testy, alpha = 0.1, stat = teststat, options = list()))
    unlink(file.path(R.cache::getCacheRootPath(), "testStepR"), 
        recursive = TRUE)
    teststat1 <- monteCarloSimulation(36L, r = 100L, output = "maximum", 
        lengths = c(23:34))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        lengths = c(23:34), options = list(simulation = "vector", 
            save = list(workspace = c("matrixIncreased", "vector", 
                "matrix"), fileSystem = c("matrixIncreased", 
                "vector", "matrix"), RDSfile = testfile, variable = testvariable), 
            load = list(), envir = testStepR, dirs = "testStepR")), 
        computeBounds(testy, alpha = 0.1, stat = teststat1, lengths = c(23:34), 
            options = list()))
    expect_identical(readRDS(testfile[1]), teststat1)
    expect_false(file.exists(testfile[2]))
    expect_identical(get("testsavevector", envir = testStepR), 
        teststat1)
    expect_false(exists("testsavematrix", envir = testStepR))
    teststat2 <- monteCarloSimulation(36L, r = 100L, intervalSystem = "dyaPar")
    teststat3 <- monteCarloSimulation(36L, r = 100L, output = "maximum", 
        intervalSystem = "dyaPar", lengths = 2^(1:3))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        intervalSystem = "dyaPar", lengths = 2^(1:3), options = list(simulation = "matrix", 
            save = list(workspace = c("vectorIncreased", "vector"), 
                fileSystem = c("matrixIncreased", "matrix"), 
                RDSfile = testfile, variable = testvariable), 
            load = list(), envir = testStepR, dirs = "testStepR")), 
        computeBounds(testy, alpha = 0.1, stat = teststat2, intervalSystem = "dyaPar", 
            lengths = 2^(1:3), options = list()))
    expect_identical(readRDS(testfile[1]), teststat3)
    expect_identical(readRDS(testfile[2]), teststat2)
    expect_identical(get("testsavevector", envir = testStepR), 
        teststat3)
    expect_identical(get("testsavematrix", envir = testStepR), 
        teststat2)
    unlink(testfile)
    remove(testsavevector, envir = testStepR)
    remove(testsavematrix, envir = testStepR)
    teststat <- monteCarloSimulation(63L, r = 100L)
    teststat4 <- monteCarloSimulation(63L, r = 100L, output = "maximum", 
        lengths = 1:36, penalty = "log")
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        stat = teststat, penalty = "log", options = list(simulation = "matrixIncreased", 
            save = list(workspace = c("matrix", "vectorIncreased"), 
                fileSystem = c("vector", "matrix")), load = list(workspace = c("vectorIncreased", 
                "matrix")), envir = testStepR, dirs = "testStepR")), 
        computeBounds(testy, alpha = 0.1, stat = teststat, penalty = "log", 
            options = list()))
    teststat1new <- monteCarloSimulation(36L, r = 200L, output = "maximum", 
        lengths = c(23:34))
    expect_identical(critVal(36L, alpha = 0.1, r = 200L, output = "value", 
        lengths = c(23:34), options = list(simulation = "vector", 
            save = list(workspace = c("matrixIncreased", "vector", 
                "matrix")), load = list(workspace = c("vector", 
                "matrix")), envir = testStepR, dirs = "testStepR")), 
        critVal(36L, alpha = 0.1, stat = teststat1new, output = "value", 
            lengths = c(23:34), options = list()))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 50L, 
        penalty = "log", options = list(simulation = "matrix", 
            save = list(fileSystem = c("matrix", "vectorIncreased")), 
            load = list(workspace = c("vectorIncreased", "matrix")), 
            envir = testStepR, dirs = "testStepR")), computeBounds(testy, 
        alpha = 0.1, stat = teststat4, penalty = "log", options = list()))
    teststat5 <- monteCarloSimulation(36L, r = 100L, output = "maximum", 
        intervalSystem = "dyaLen", lengths = 16L, penalty = "log")
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        intervalSystem = "dyaLen", lengths = 16L, penalty = "log", 
        stat = teststat5, options = list(simulation = "vector", 
            save = list(fileSystem = c("matrix", "vector"), workspace = c("matrix", 
                "matrixIncreased")), load = list(workspace = c("vectorIncreased", 
                "matrix")), envir = testStepR, dirs = "testStepR")), 
        computeBounds(testy, alpha = 0.1, stat = teststat5, intervalSystem = "dyaLen", 
            lengths = 16L, penalty = "log", options = list()))
    teststat6 <- monteCarloSimulation(125L, r = 100L, intervalSystem = "dyaLen")
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        penalty = "weights", nq = 125L, weights = 1:6/sum(1:6), 
        intervalSystem = "dyaLen", options = list(simulation = "matrixIncreased", 
            save = list(workspace = c("matrixIncreased", "vector"), 
                fileSystem = c("matrix", "vectorIncreased")), 
            load = list(workspace = c("vectorIncreased", "matrix")), 
            envir = testStepR, dirs = "testStepR")), computeBounds(testy, 
        alpha = 0.1, stat = teststat6, penalty = "weights", weights = 1:6/sum(1:6), 
        intervalSystem = "dyaLen", options = list()))
    teststat6b <- monteCarloSimulation(125L, r = 100L, output = "maximum", 
        penalty = "log", intervalSystem = "dyaLen", lengths = 2^(2:4))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        penalty = "log", intervalSystem = "dyaLen", lengths = 2^(2:4), 
        nq = 125L, options = list(simulation = "matrix", save = list(workspace = c("matrixIncreased", 
            "vector"), fileSystem = c("matrix", "vectorIncreased")), 
            load = list(workspace = c("matrixIncreased", "matrix")), 
            envir = testStepR, dirs = "testStepR")), computeBounds(testy, 
        alpha = 0.1, stat = teststat6, penalty = "log", intervalSystem = "dyaLen", 
        lengths = 2^(2:4), options = list()))
    teststat <- monteCarloSimulation(36L, r = 200L, output = "maximum", 
        rand.gen = function(data) {
            rnorm(36)
        })
    expect_identical(computeBounds(testy, alpha = 0.1, r = 200L, 
        rand.gen = function(data) {
            rnorm(36)
        }, options = list(simulation = "vector", save = list(workspace = c("matrix", 
            "vector")), load = list(fileSystem = c("vectorIncreased", 
            "matrix")), envir = testStepR, dirs = "testStepR")), 
        computeBounds(testy, alpha = 0.1, stat = teststat, options = list()))
    teststat7 <- monteCarloSimulation(125L, r = 100L, output = "maximum", 
        intervalSystem = "dyaLen", lengths = 2^(3:5), penalty = "log")
    expect_identical(critVal(120L, alpha = 0.1, r = 100L, output = "value", 
        intervalSystem = "dyaLen", lengths = 2^(3:5), penalty = "log", 
        nq = 125L, options = list(simulation = "vectorIncreased", 
            save = list(workspace = c("matrixIncreased", "vectorIncreased")), 
            load = list(workspace = c("matrix", "vector"), fileSystem = c("vectorIncreased", 
                "matrixIncreased")), envir = testStepR, dirs = "testStepR")), 
        critVal(120L, alpha = 0.1, stat = teststat7, output = "value", 
            options = list(), intervalSystem = "dyaLen", lengths = 2^(3:5), 
            penalty = "log"))
    expect_identical(length(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat), 5L)
    expect_identical(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat[[1]], teststat1new)
    expect_identical(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat[[2]], teststat3)
    expect_identical(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat[[3]], teststat4)
    expect_identical(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat[[4]], teststat6)
    expect_identical(get("critValStepRTab", envir = testStepR, 
        inherits = FALSE)$stat[[5]], teststat7)
    remove(critValStepRTab, envir = testStepR)
    expect_identical(length(list.files(file.path(R.cache::getCacheRootPath(), 
        "testStepR"))), 5L)
    expect_identical(R.cache::loadCache(attr(teststat1, "keyList"), 
        dirs = "testStepR"), teststat1)
    expect_identical(R.cache::loadCache(attr(teststat2, "keyList"), 
        dirs = "testStepR"), teststat2)
    expect_identical(R.cache::loadCache(attr(teststat4, "keyList"), 
        dirs = "testStepR"), teststat4)
    expect_identical(R.cache::loadCache(attr(teststat5, "keyList"), 
        dirs = "testStepR"), teststat5)
    expect_identical(R.cache::loadCache(attr(teststat6b, "keyList"), 
        dirs = "testStepR"), teststat6b)
    unlink(file.path(R.cache::getCacheRootPath(), "testStepR"), 
        recursive = TRUE)
    if ("stepRdata" %in% rownames(installed.packages())) {
        teststat <- monteCarloSimulation(63L, intervalSystem = "dyaLen")
        expect_equal(computeBounds(testy, alpha = 0.1, r = 100L, 
            intervalSystem = "dyaLen", options = list(simulation = "vector", 
                save = list(), load = list(package = TRUE), envir = testStepR, 
                dirs = "testStepR")), computeBounds(testy, alpha = 0.1, 
            stat = teststat, intervalSystem = "dyaLen", options = list()))
    }
    expect_error(computeBounds(testy, alpha = 0.1, test = 1, 
        options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, sd = "s", 
        options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, sd = 0, options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, sd = c(1, 
        2), options = list(load = list())))
    expect_error(supressWarning(computeBounds(testy, alpha = 0.1, 
        r = 100L, seed = "s", options = list(load = list()))))
    expect_warning(computeBounds(testy, alpha = 0.1, r = 100L, 
        seed = c(1, 2), options = list(load = list())))
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        seed = 100.5, options = list(load = list())), computeBounds(testy, 
        alpha = 0.1, r = 100L, seed = 100L, options = list(load = list())))
    teststat <- monteCarloSimulation(n = 63L, r = 100L)
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        seed = 63L, options = list(load = list())), computeBounds(testy, 
        alpha = 0.1, r = 100L, stat = teststat))
    teststat <- monteCarloSimulation(n = 36L, r = 100L)
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        seed = 36L, options = list(load = list(), simulation = "matrix")), 
        computeBounds(testy, alpha = 0.1, r = 100L, stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        rand.gen = 10, options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        rand.gen = function(data, n) {
            rnorm(10)
        }, options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        rand.gen = function(data) {
            rnorm(10)
        }, options = list(load = list())))
    teststat <- monteCarloSimulation(n = 63L, r = 100L)
    expect_identical(computeBounds(testy, alpha = 0.1, r = 100L, 
        rand.gen = function(data) {
            rnorm(63)
        }, options = list(load = list())), computeBounds(testy, 
        alpha = 0.1, r = 100L, stat = teststat))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        messages = "s", options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        messages = c(10, 20), options = list(load = list())))
    expect_error(computeBounds(testy, alpha = 0.1, r = 100L, 
        messages = 0, options = list(load = list())))
    expect_identical(suppressMessages(computeBounds(testy, alpha = 0.1, 
        r = 100L, messages = 10.5, options = list(load = list()))), 
        suppressMessages(computeBounds(testy, alpha = 0.1, r = 100L, 
            messages = 10L, options = list(load = list()))))
})
where 25: eval(code, test_env)
where 26 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#152: eval(code, test_env)
where 27: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 28: doTryCatch(return(expr), name, parentenv, handler)
where 29: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 30: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 31: doTryCatch(return(expr), name, parentenv, handler)
where 32: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 33: tryCatchList(expr, classes, parentenv, handlers)
where 34 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#149: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 35 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/source.R#42: test_code(NULL, exprs, env)
where 36 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#131: source_file(path, new.env(parent = env), chdir = TRUE, wrap = wrap)
where 37 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/reporter-zzz.R#53: force(code)
where 38 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#125: with_reporter(reporter = reporter, start_end_reporter = start_end_reporter, 
    {
        lister$start_file(basename(path))
        source_file(path, new.env(parent = env), chdir = TRUE, 
            wrap = wrap)
        end_context()
    })
where 39: FUN(X[[i]], ...)
where 40: lapply(paths, test_file, env = env, reporter = current_reporter, 
    start_end_reporter = FALSE, load_helpers = FALSE, wrap = wrap)
where 41 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/reporter-zzz.R#53: force(code)
where 42 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#25: with_reporter(reporter = current_reporter, results <- lapply(paths, 
    test_file, env = env, reporter = current_reporter, start_end_reporter = FALSE, 
    load_helpers = FALSE, wrap = wrap))
where 43 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#86: test_files(paths, reporter = reporter, env = env, stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 44 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#190: test_dir(path = test_path, reporter = reporter, env = env, filter = filter, 
    ..., stop_on_failure = stop_on_failure, stop_on_warning = stop_on_warning, 
    wrap = wrap)
where 45 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#171: test_package_dir(package = package, test_path = test_path, filter = filter, 
    reporter = reporter, ..., stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 46: test_check("stepR")

 --- value of length: 2 type: logical ---
[1] FALSE FALSE
 --- function (currently evaluated)--- 
function(data, intervalSystem, penalty, r = NULL, seed = data$n,
                                  rand.gen = NULL, messages = NULL, output) {
  if (!is.numeric(r) || length(r) != 1 || !is.finite(r)) {
    stop("r must be a single positive integer")
  }
  
  if (!is.integer(r)) {
    r <- as.integer(r + 1e-6)
  }
  
  if (r < 1L) {
    stop("r must be a single positive integer")
  }
  
  if (seed == "no") {
    # set no seed
  } else {
    set.seed(seed)
  }
  
  if (!is.null(messages)) {
    if (!is.function(messages)) {
      if (!is.numeric(messages) || length(messages) != 1 || !is.finite(messages)) {
        stop("messages must be a single positive integer")
      }
      
      if (!is.integer(messages)) {
        messages <- as.integer(messages + 1e-6)
      }
      
      if (messages < 1L) {
        stop("messages must be a single positive integer")
      }
      
      each <- messages
      messages <- function(i, r, each) {
        if (i %% each == 0) {
          message(paste(i, " of ", r, " simulations are completed.", sep = ""))
        }
        FALSE
      }
    }
  } else {
    each <- 0
    messages <- function(i, r, each) {FALSE}
  }
  
  if (output == "vector") {
    stat <- matrix(0, length(intervalSystem$lengths), r)
    keyList <- list(data$n, data$key, intervalSystem$intervalSystem)
    class(stat) <- c("MCSimulationVector", class(stat))
  } else {
    stat <- numeric(r)
    keyList <- list(data$n, data$key, intervalSystem$intervalSystem, intervalSystem$lengths, penalty)
    class(stat) <- c("MCSimulationMaximum", class(stat))
  }  
  
  if (is.null(rand.gen)) {
    rand.gen <- data$rand.gen
    save <- TRUE
  } else {
    save <- FALSE
    if (!is.function(rand.gen) || !identical(names(formals(rand.gen)), "data")) {
      stop(data$errorMessageGeneratedData)
    }
  }
  
  for (i in 1:r) {
    if (messages(i, r, each)) {
      stop("User interrupt!")
    }
    
    data$y <- rand.gen(data = data)
    if (data$testGeneratedData(data)) {
      stop(data$errorMessageGeneratedData)
    }

    if (output == "vector") {
      stat[, i] <- .computeStat(signal = 0, data = data, intervalSystem = intervalSystem, penalty = penalty,
                                output = output)
    } else {
      stat[i] <- .computeStat(signal = 0, data = data, intervalSystem = intervalSystem, penalty = penalty,
                              output = output)
    }
  }
  
  attr(stat, "keyList") <- keyList
  attr(stat, "key") <- digest::digest(keyList)
  attr(stat, "n") <- data$n
  attr(stat, "lengths") <- intervalSystem$lengths
  attr(stat, "save") <- save
  
  stat
}
<bytecode: 0xa1f7d00>
<environment: namespace:stepR>
 --- function (body) search ---
Function .monteCarloSimulation in namespace stepR has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
