Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpPJ8FIH/R.INSTALLba613654bed/twilight/R/plot.twilight.R#156: 
 --- package (from environment) --- 
twilight
 --- call from context --- 
funk5(x, legend, ...)
 --- call from argument --- 
if (is.nan(yin$effect[[1]])) {
    stop("The input object must contain effect size frequencies.\n Choose 'scores' or 'qvalues' instead or run twilight.\n")
}
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/RtmpPJ8FIH/R.INSTALLba613654bed/twilight/R/plot.twilight.R#218: funk5(x, legend, ...)
where 2 at ../../../../R/src/library/graphics/R/plot.R#21: plot.twilight(exfdr, which = "effectsize", legend = T)
where 3: plot(exfdr, which = "effectsize", legend = T)
where 4: eval(expr, .GlobalEnv)
where 5 at ../../../../R/src/library/utils/R/SweaveDrivers.R#645: eval(expr, .GlobalEnv)
where 6 at ../../../../R/src/library/utils/R/SweaveDrivers.R#645: withVisible(eval(expr, .GlobalEnv))
where 7: doTryCatch(return(expr), name, parentenv, handler)
where 8: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 9: tryCatchList(expr, classes, parentenv, handlers)
where 10: tryCatch(expr, error = function(e) {
    call <- conditionCall(e)
    if (!is.null(call)) {
        if (identical(call[[1L]], quote(doTryCatch))) 
            call <- sys.call(-4L)
        dcall <- deparse(call)[1L]
        prefix <- paste("Error in", dcall, ": ")
        LONG <- 75L
        sm <- strsplit(conditionMessage(e), "\n")[[1L]]
        w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
        if (is.na(w)) 
            w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], 
                type = "b")
        if (w > LONG) 
            prefix <- paste0(prefix, "\n  ")
    }
    else prefix <- "Error : "
    msg <- paste0(prefix, conditionMessage(e), "\n")
    .Internal(seterrmessage(msg[1L]))
    if (!silent && isTRUE(getOption("show.error.messages"))) {
        cat(msg, file = outFile)
        .Internal(printDeferredWarnings())
    }
    invisible(structure(msg, class = "try-error", condition = e))
})
where 11 at ../../../../R/src/library/utils/R/SweaveDrivers.R#645: try(withVisible(eval(expr, .GlobalEnv)), silent = TRUE)
where 12 at ../../../../R/src/library/utils/R/SweaveDrivers.R#319: evalFunc(ce, options)
where 13: tryCatchList(expr, classes, parentenv, handlers)
where 14 at ../../../../R/src/library/utils/R/SweaveDrivers.R#319: tryCatch(evalFunc(ce, options), finally = {
    cat("\n")
    sink()
})
where 15 at ../../../../R/src/library/utils/R/Sweave.R#114: driver$runcode(drobj, chunk, chunkopts)
where 16 at ../../../../R/src/library/tools/R/Vignettes.R#1133: utils::Sweave(...)
where 17 at ../../../../R/src/library/tools/R/Vignettes.R#520: engine$weave(file, quiet = quiet, encoding = enc)
where 18: doTryCatch(return(expr), name, parentenv, handler)
where 19: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 20: tryCatchList(expr, classes, parentenv, handlers)
where 21 at ../../../../R/src/library/tools/R/Vignettes.R#518: tryCatch({
    engine$weave(file, quiet = quiet, encoding = enc)
    setwd(startdir)
    find_vignette_product(name, by = "weave", engine = engine)
}, error = function(e) {
    stop(gettextf("processing vignette '%s' failed with diagnostics:\n%s", 
        file, conditionMessage(e)), domain = NA, call. = FALSE)
})
where 22: buildVignettes(dir = "/var/scratch2/tomas/test/mine/R-75396/check/twilight.Rcheck/vign_test/twilight")

 --- value of length: 73 type: logical ---
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[45] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[56] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[67] FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 --- function from context --- 
function(yin,leg,...){
    if (is.nan(yin$effect[[1]])){
      stop("The input object must contain effect size frequencies.\n Choose 'scores' or 'qvalues' instead or run twilight.\n")
    }

    check <- unlist(strsplit(yin$call," "))
    if (check[2]!="fc."){
      stop("Effect size distributions can only be estimated with twilight.pval(.,method='fc').\n")
    }

    all <- hist(yin$result$observed,br=yin$effect$breaks,plot=FALSE)

    x.fc   <- yin$result$observed

    mini   <- ceiling(min(x.fc))
    maxi   <- floor(max(x.fc))
    x.tick <- seq(mini,maxi,length=abs(mini)+abs(maxi)+1)

    x.lab  <- (exp(abs(x.tick))-1)*100
    x.lab  <- paste(sign(x.tick)*round(x.lab),"%",sep="")

    plot(all,col=gray(0.7),xaxt="n",main="",xlab="Fold change equivalent score")
    plot(yin$effect,col="black",add=TRUE)

    if (leg==TRUE){
      legend(mean(x.tick[5:6]),max(all$counts),legend=c("Mixture","Alternative"),lty=c(1,1),bty="n",col=c(gray(0.7),"black"),lwd=c(2,2),y.intersp=2)
    }
      
    axis(1,at=x.tick,labels=x.lab)

  }
<bytecode: 0x6fe2be8>
<environment: 0x792a930>
 --- function search by body ---
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1
