
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "KoulMde"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('KoulMde')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Koul2StageMde")
> ### * Koul2StageMde
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Koul2StageMde
> ### Title: Two-stage minimum distance estimation in linear regression model
> ###   with autoregressive error.
> ### Aliases: Koul2StageMde
> 
> ### ** Examples
> 
> ####################
> n <- 10
> p <- 3
> X <- matrix(runif(n*p, 0,50), nrow=n, ncol=p)  #### Generate n-by-p design matrix X
> beta <- c(-2, 0.3, 1.5)                        #### Generate true beta = (-2, 0.3, 1.5)'
> rho  <- 0.4                                    #### True rho = 0.4
> eps <- vector(length=n)
> xi <- rnorm(n, 0,1)                            #### Generate innovation from N(0,1)
>                                               #### Generate autoregressive process of order 1
> for(i in 1:n){
+  if(i==1){eps[i] <- xi[i]}
+  else{eps[i] <- rho*eps[i-1] + xi[i]}
+ }
> Y <- X%*%beta + eps
> #####################
> D <- "default"                                  #### Use the default weight matrix
> b0 <- solve(t(X)%*%X)%*%(t(X)%*%Y)              #### Set initial value for beta
> 
> Lx <- "Lebesgue"                                ##### Define Lebesgue measure
> MDEResult <- Koul2StageMde(Y,X, "default", b0, Lx, 1, Lx)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp9yGcb6/R.INSTALLa6b36509656f/KoulMde/R/RevisedMdeFunc.R#283: 
 --- if/while statement is in package --- 
KoulMde
 --- call (currently evaluated) --- 
NULL
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/Rtmp9yGcb6/R.INSTALLa6b36509656f/KoulMde/R/RevisedMdeFunc.R#370: FindIndex((LenE + 1), EPlus, EMinus, PointVec, gVec, hVec)
where 2 at /var/scratch2/tomas/tmp/Rtmp9yGcb6/R.INSTALLa6b36509656f/KoulMde/R/RevisedMdeFunc.R#416: GetbVec(Y, X, DYM, XpmM, bVec, l)
where 3 at /var/scratch2/tomas/tmp/Rtmp9yGcb6/R.INSTALLa6b36509656f/KoulMde/R/RevisedMdeFunc.R#128: EstimateBetaMDESimple(Y, X, D, b0, iter, critVal)
where 4 at /var/scratch2/tomas/tmp/Rtmp9yGcb6/R.INSTALLa6b36509656f/KoulMde/R/RevisedMdeFunc.R#803: KoulLrMde(Y, X, D, b0, RegIntMeasure)
where 5: Koul2StageMde(Y, X, "default", b0, Lx, 1, Lx)

 --- value of length: 90 type: logical ---
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[85] FALSE FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
