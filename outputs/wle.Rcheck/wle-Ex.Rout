
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "wle"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('wle')
Loading required package: circular

Attaching package: ‘circular’

The following objects are masked from ‘package:stats’:

    sd, var

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("anova.wle.glm.root")
> ### * anova.wle.glm.root
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova.wle.glm.root
> ### Title: Robust Analysis of Deviance for Generalized Linear Model Fits
> ### Aliases: anova.wle.glm.root anova.wleglmlist
> ### Keywords: robust models regression
> 
> ### ** Examples
> 
> ## --- Continuing the Example from  '?wle.glm':
> ## Don't show: 
> require(utils)
> example("wle.glm", echo = FALSE)
  treatment outcome counts
1         1       1     18
2         1       2     17
3         1       3     15
4         2       1     20
5         2       2     10
6         2       3     20
7         3       1     25
8         3       2     13
9         3       3     12
Warning in predict.lm(object, newdata, se.fit, scale = 1, type = ifelse(type ==  :
  calling predict.lm(<fake-lm-object>) ...
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpjbvreN/R.INSTALLc2ed63a55d0b/wle/R/anova.wle.glm.R#16: 
 --- if/while statement is in package --- 
wle
 --- call (currently evaluated) --- 
anova.wle.glm.root(extractRoot(wle.glm.D93))
 --- R stacktrace ---
where 1: anova.wle.glm.root(extractRoot(wle.glm.D93))
where 2 at /var/scratch2/tomas/tmp/RtmpBj7gUF/Rex42d25c6d1ae4#16: anova(extractRoot(wle.glm.D93))
where 3: eval(ei, envir)
where 4: eval(ei, envir)
where 5: withVisible(eval(ei, envir))
where 6: source(tf, local, echo = echo, prompt.echo = paste0(prompt.prefix, 
    getOption("prompt")), continue.echo = paste0(prompt.prefix, 
    getOption("continue")), verbose = verbose, max.deparse.length = Inf, 
    encoding = "UTF-8", skip.echo = skips, keep.source = TRUE)
where 7: example("wle.glm", echo = FALSE)

 --- value of length: 3 type: logical ---
[1] FALSE  TRUE  TRUE
 --- function (currently evaluated)--- 
function(object, ..., dispersion=NULL, test=NULL) {
    warnings('Hey Claudio: remember to finish this function before to release the package!')
    if (class(object)!='wle.glm.root')
      stop("Use 'extractRoot(object)' to extract a single root from a wle.glm object")
    ## check for multiple objects
    dotargs <- list(...)
    named <- if (is.null(names(dotargs)))
	rep(FALSE, length(dotargs)) else (names(dotargs) != "")
    if(any(named))
	warning("the following arguments to 'anova.wle.glm.root' are invalid and dropped: ", paste(deparse(dotargs[named]), collapse=", "))
    dotargs <- dotargs[!named]
    is.glm <- unlist(lapply(dotargs,function(x) inherits(x,"wle.glm.root")))
    dotargs <- dotargs[is.glm]
    nargs <- length(dotargs)
    if (nargs) 
      return(anova.wleglmlist(c(list(object), dotargs), dispersion = dispersion, test = test))
    
    ## extract variables from model
    varlist <- attr(object$terms, "variables")
    ## must avoid partial matching here.
    x <- if (n <- match("x", names(object), 0L))
	   object[[n]]
	 else model.matrix(object)
    varseq <- attr(x, "assign")
    nvars <- max(0, varseq)
    resdev <- resdf <- NULL

    ## if there is more than one explanatory variable then
    ## recall glm.fit to fit variables sequentially

    if(nvars > 1) {
	method <- object$method
	if(!is.function(method))
	    method <- get(method, mode = "function", envir=parent.frame())
        ## allow for 'y = FALSE' in the call (PR#13098)
        y <- object$y
        if(is.null(y)) { ## code from residuals.glm
            mu.eta <- object$family$mu.eta
            eta <- object$linear.predictors
            y <-   object$fitted.values + object$residuals * mu.eta(eta)
        }
        nobs <- NROW(y)
	for(i in 1L:(nvars-1)) {
	    ## explanatory variables up to i are kept in the model
	    ## use method from glm to find residual deviance
	    ## and df for each sequential fit
	    fit <- method(x=x[, varseq <= i, drop = FALSE],
			  y=y,
			  weights=object$prior.weights*object$wle.weights,
			  start	 =object$start,
			  offset =object$offset,
			  family =object$family,
			  control=object$control)
	    resdev <- c(resdev, fit$deviance)
	    resdf <- c(resdf, fit$df.residual + sum(object$wle.weights) - nobs)
	}
    }

    ## add values from null and full model

    resdf <- c(object$df.null, resdf, object$df.residual)
    resdev <- c(object$null.deviance, resdev, object$deviance)

    ## construct table and title

    table <- data.frame(c(NA, -diff(resdf)),
			c(NA, pmax(0, -diff(resdev))), resdf, resdev)
    tl <- attr(object$terms, "term.labels")
    if (length(tl) == 0L) table <- table[1,,drop=FALSE] # kludge for null model
    dimnames(table) <- list(c("NULL", tl),
			    c("Df", "Deviance", "Resid. Df", "Resid. Dev"))
    title <- paste("Robust Analysis of Deviance Table", "\n\nModel: ",
		   object$family$family, ", link: ", object$family$link,
		   "\n\nResponse: ", as.character(varlist[-1L])[1L],
		   "\n\nTerms added sequentially (first to last)\n\n", sep="")

    ## calculate test statistics if needed

    df.dispersion <- Inf
    if(is.null(dispersion)) {
	dispersion <- summary(object, dispersion=dispersion)$dispersion
	df.dispersion <- if (dispersion == 1) Inf else object$df.residual
    }
    if(!is.null(test)) {
        if(test == "F" && df.dispersion == Inf) {
            fam <- object$family$family
            if(fam == "binomial" || fam == "poisson")
                warning(gettextf("using F test with a %s family is inappropriate",
                                 fam),
                        domain = NA)
            else
                warning("using F test with a fixed dispersion is inappropriate")
        }
	table <- stat.anova(table=table, test=test, scale=dispersion,
			    df.scale=df.dispersion, n=sum(object$wle.weights))
    }
    structure(table, heading = title, class= c("anova", "data.frame"))
}
<environment: namespace:wle>
 --- function (body) search ---
Function anova.wle.glm.root in namespace wle has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
