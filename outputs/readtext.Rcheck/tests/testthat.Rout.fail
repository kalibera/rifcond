
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> Sys.setenv("R_TESTS" = "")
> 
> library(testthat)
> library(quanteda)
quanteda version 0.99.22
Using 63 of 64 threads for parallel computing

Attaching package: 'quanteda'

The following object is masked from 'package:utils':

    View

> 
> ### the following two functions are in the GitHub quanteda but not the 
> ### CRAN version, so they are defined here for the test purposes as well
> ### will be removed once quanteda is refreshed on CRAN
> ### -- KB 2016-11-19
> texts.readtext <- function(x, groups = NULL, ...) {
+     if (!is.null(groups))
+         stop("groups argument not supported for texts() on a readtext object")
+     as.character(x)
+     # result <- x[["text"]]
+     # names(result) <- row.names(x)
+     # result
+ }
> docvars.readtext <- function(x, field = NULL) {
+     if (!is.null(field))
+         warning("field argument not used for docvars on a readtext object", noBreaks. = TRUE)
+     as.data.frame(x[, -which(names(x) %in% c("doc_id", "text")), drop = FALSE])
+ }
> 
> docnames.readtext <- function(x) {
+     x[["doc_id"]]
+ }
> 
> ndoc.readtext <- function(x) {
+     nrow(x)
+ }
> 
> 
> test_check("readtext")
Loading required package: readtext
readtext object consisting of 1 document and 0 docvars.
# data.frame [1 Ã— 2]
  doc_id               text               
  <chr>                <chr>              
1 file4b6215019003.txt "\"This is UT\"..."
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp5JlXvO/R.INSTALLf4b25e9f9a7a/readtext/R/get-functions.R#59: 
 --- if/while statement is in package --- 
readtext
 --- call (currently evaluated) --- 
value[[3L]](cond)
 --- R stacktrace ---
where 1: value[[3L]](cond)
where 2: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 3: tryCatchList(expr, classes, parentenv, handlers)
where 4 at /var/scratch2/tomas/tmp/Rtmp5JlXvO/R.INSTALLf4b25e9f9a7a/readtext/R/get-functions.R#54: tryCatch({
    if (getOption("readtext_verbosity") >= 1) 
        warning("Doesn't look like Tweets json file, trying general JSON")
    return(get_json_object(path, text_field, ...))
}, error = function(e) {
    if (e == paste("There is no field called", text_field, "in file", 
        path)) {
        stop(e)
    }
    if (getOption("readtext_verbosity") >= 1) 
        warning("File doesn't contain a single valid JSON object, trying line-delimited json")
    return(get_json_lines(path, text_field, ...))
})
where 5: value[[3L]](cond)
where 6: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 7: tryCatchList(expr, classes, parentenv, handlers)
where 8 at /var/scratch2/tomas/tmp/Rtmp5JlXvO/R.INSTALLf4b25e9f9a7a/readtext/R/get-functions.R#50: tryCatch({
    return(get_json_tweets(path, ...))
}, error = function(e) {
    tryCatch({
        if (getOption("readtext_verbosity") >= 1) 
            warning("Doesn't look like Tweets json file, trying general JSON")
        return(get_json_object(path, text_field, ...))
    }, error = function(e) {
        if (e == paste("There is no field called", text_field, 
            "in file", path)) {
            stop(e)
        }
        if (getOption("readtext_verbosity") >= 1) 
            warning("File doesn't contain a single valid JSON object, trying line-delimited json")
        return(get_json_lines(path, text_field, ...))
    })
})
where 9: get_json(f, text_field, ...)
where 10: getSource(x, text_field = text_field, encoding = encoding, ...)
where 11: FUN(X[[i]], ...)
where 12: lapply(files, function(x) getSource(x, text_field = text_field, 
    encoding = encoding, ...))
where 13 at /var/scratch2/tomas/tmp/Rtmps5WZJP/R.INSTALL740d60ea8091/quanteda/R/docvars.R#21: readtext("../data/docvars/two/*json", text_field = "nonesuch", 
    docvarsfrom = "filenames")
where 14: docvars(readtext("../data/docvars/two/*json", text_field = "nonesuch", 
    docvarsfrom = "filenames"))
where 15 at /var/scratch2/tomas/tmp/RtmpBSpEFw/R.INSTALLd6806e63e92c/rlang/R/eval.R#66: .Call(rlang_eval, expr, env)
where 16 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/capture-condition.R#36: eval_bare(get_expr(quo), get_env(quo))
where 17: doTryCatch(return(expr), name, parentenv, handler)
where 18: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 19: tryCatchList(expr, classes, parentenv, handlers)
where 20 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/capture-condition.R#36: tryCatch({
    code
    NULL
}, error = function(e) e)
where 21 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/expectation.R#99: capture(act$val <- eval_bare(get_expr(quo), get_env(quo)))
where 22 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/expect-output.R#120: quasi_capture(enquo(object), capture_error, label = label)
where 23 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/old-school.R#107: expect_error(x, regexp, ...)
where 24 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/expect-that.R#22: condition(object)
where 25 at testthat/test-readtext.R#296: expect_that(docvars(readtext("../data/docvars/two/*json", text_field = "nonesuch", 
    docvarsfrom = "filenames")), throws_error("There is no field called"))
where 26: eval(code, test_env)
where 27: eval(code, test_env)
where 28: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 29: doTryCatch(return(expr), name, parentenv, handler)
where 30: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 31: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 32: doTryCatch(return(expr), name, parentenv, handler)
where 33: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 34: tryCatchList(expr, classes, parentenv, handlers)
where 35: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 36 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#31: test_code(desc, code, env = parent.frame())
where 37 at testthat/test-readtext.R#275: test_that("test readtext() with docvarsfrom=filenames", {
    expect_that(docvars(readtext("../data/docvars/one/*", docvarsfrom = "filenames")), 
        equals(data.frame(list(docvar1 = c(1L, 2L), docvar2 = c("apple", 
            "orange")), stringsAsFactors = FALSE)))
    expect_that(docvars(readtext("../data/docvars/dash/*", docvarsfrom = "filenames", 
        dvsep = "-")), equals(data.frame(list(docvar1 = c(1, 
        2), docvar2 = c("apple", "orange")), stringsAsFactors = FALSE)))
    expect_that(docvars(readtext("../data/docvars/two/*txt", 
        docvarsfrom = "filenames")), equals(data.frame(list(docvar1 = c(1, 
        2), docvar2 = c("apple", "orange")), docvar3 = c("red", 
        "orange"), stringsAsFactors = FALSE)))
    expect_that(docvars(readtext("../data/docvars/two/*json", 
        text_field = "nonesuch", docvarsfrom = "filenames")), 
        throws_error("There is no field called"))
    expect_that(docvars(readtext("../data/docvars/unequal/*", 
        docvarsfrom = "filenames")), throws_error("Filename elements are not equal in length."))
    expect_that(docvars(readtext("../data/docvars/two/*txt", 
        docvarsfrom = "filenames", docvarnames = c("id", "fruit", 
            "colour"))), equals(data.frame(list(id = c(1, 2), 
        fruit = c("apple", "orange")), colour = c("red", "orange"), 
        stringsAsFactors = F)))
    expect_that(docvars(readtext("../data/docvars/two/*txt", 
        docvarsfrom = "filenames", docvarnames = c("id", "fruit"))), 
        gives_warning("Fewer docnames supplied than existing docvars - last 1 docvar given generic names."))
    expect_that(docvars(readtext("../data/docvars/two/*txt", 
        docvarsfrom = "filenames", docvarnames = c("id", "fruit"))), 
        equals(data.frame(list(id = c(1, 2), fruit = c("apple", 
            "orange")), docvar3 = c("red", "orange"), stringsAsFactors = FALSE)))
    expect_that(docvars(readtext("../data/docvars/two/*txt", 
        docvarsfrom = "filenames", docvarnames = c("id"))), gives_warning("Fewer docnames supplied than existing docvars - last 2 docvars given generic names."))
    expect_error(docvars(readtext("../data/docvars/two/*txt", 
        docvarsfrom = "nonesuch")))
    expect_equal(docvars(readtext("../data/docvars/csv/*", docvarsfrom = c("filenames"), 
        docvarnames = c("id", "fruit"), text_field = "text")), 
        data.frame(list(shape = c("round", NA), texture = c(NA, 
            "rough"), id = c(1, 2), fruit = c("apple", "orange")), 
            stringsAsFactors = FALSE))
})
where 38: eval(code, test_env)
where 39: eval(code, test_env)
where 40: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 41: doTryCatch(return(expr), name, parentenv, handler)
where 42: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 43: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 44: doTryCatch(return(expr), name, parentenv, handler)
where 45: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 46: tryCatchList(expr, classes, parentenv, handlers)
where 47: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 48: test_code(NULL, exprs, env)
where 49: source_file(path, new.env(parent = env), chdir = TRUE, wrap = wrap)
where 50 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/reporter-zzz.R#53: force(code)
where 51: with_reporter(reporter = reporter, start_end_reporter = start_end_reporter, 
    {
        lister$start_file(basename(path))
        source_file(path, new.env(parent = env), chdir = TRUE, 
            wrap = wrap)
        end_context()
    })
where 52: FUN(X[[i]], ...)
where 53: lapply(paths, test_file, env = env, reporter = current_reporter, 
    start_end_reporter = FALSE, load_helpers = FALSE, wrap = wrap)
where 54 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/reporter-zzz.R#53: force(code)
where 55 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#25: with_reporter(reporter = current_reporter, results <- lapply(paths, 
    test_file, env = env, reporter = current_reporter, start_end_reporter = FALSE, 
    load_helpers = FALSE, wrap = wrap))
where 56 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#86: test_files(paths, reporter = reporter, env = env, stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 57 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#190: test_dir(path = test_path, reporter = reporter, env = env, filter = filter, 
    ..., stop_on_failure = stop_on_failure, stop_on_warning = stop_on_warning, 
    wrap = wrap)
where 58 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#171: test_package_dir(package = package, test_path = test_path, filter = filter, 
    reporter = reporter, ..., stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 59: test_check("readtext")

 --- value of length: 2 type: logical ---
message    call 
  FALSE   FALSE 
 --- function (currently evaluated)--- 
function(e) {
            if (e == paste("There is no field called", text_field, "in file", path)) {
                stop(e)
            }
            if (getOption("readtext_verbosity") >= 1) warning("File doesn't contain a single valid JSON object, trying line-delimited json")
            return(get_json_lines(path, text_field, ...))
        }
<environment: 0x151198a0>
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
