
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "vowels"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('vowels')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("compute.means")
> ### * compute.means
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute.means
> ### Title: Compute the Formant Means (or Medians or Standard Deviations) of
> ###   a Data Frame of Vowel Data
> ### Aliases: compute.means compute.medians compute.sds
> ### Keywords: methods
> 
> ### ** Examples
>  
> data(ohiovowels)
> means <- compute.means(ohiovowels)
> vowelplot(means, color="vowels", labels="vowels")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp9LiHkY/R.INSTALL5d351ecca08/vowels/R/vowels.R#797: 
 --- if/while statement is in package --- 
vowels
 --- call (currently evaluated) --- 
vowelplot(means, color = "vowels", labels = "vowels")
 --- R stacktrace ---
where 1: vowelplot(means, color = "vowels", labels = "vowels")

 --- value of length: 25 type: logical ---
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 --- function (currently evaluated)--- 
function(vowels, speaker = NA, color = NA, color.choice = NA, shape="speakers", shape.choice = NA, size = NA, labels = "none", leg="speakers", a.size = NA, l.size = NA, title = "", subtitle = NA, xlim = NA, ylim = NA) {
  
  ltext<-NA
  nmethod<-"non-"
  if (!is.null(attributes(vowels)$norm.method)) {
	nmethod<-paste(attributes(vowels)$norm.method, " ", sep="")
  }
  vtext<-"Individual"
  if (!is.null(attributes(vowels)$mean.values)) { 
  	vtext<-"Mean"
  } else if (!is.null(attributes(vowels)$median.values)) { 
  	vtext<-"Median"
  } else if (!is.null(attributes(vowels)$standard.devs)) { 
  	vtext<-"Standard deviation of"
  }
  mtext<-paste(vtext, " vowel formant values\n", nmethod, "normalized", sep="")
  
  if (!is.na(speaker)) {
  	vowels<-vowels[vowels[,1]==speaker,]
  	if (labels!="none") ltext<-vowels[,2]  	
  } else if (labels=="vowels") {
  	ltext<-vowels[,2]
  } else if (labels=="speakers") {
  	ltext<-vowels[,1]
  } else if (labels!="none") {
  	if (length(unique(vowels[,1]))==1) {
  		ltext<-vowels[,2]
  	} else {
	  	ltext<-paste(vowels[,1], vowels[,2], sep=":\n")
  	}
  }
  spkrs<-as.character(unique(vowels[,1]))
  
  stext<-""
  if (is.na(subtitle)) {
  	if (!is.null(attributes(vowels)$norm.variant)) {
  		stext<-paste("Variant:", attributes(vowels)$norm.variant)
  	} else if (!is.null(attributes(vowels)$unit.type)) {
  		if (attributes(vowels)$unit.type!="Hertz") {
  			stext<-paste("Units:", attributes(vowels)$unit.type)
  		}
  	}
  } else if (subtitle!="") {
  	stext<-subtitle
  }
  
  axes <- setup.axes(vowels)
  # override computation of axes limits if user specified both
  if (!is.na(xlim[1]) & !is.na(ylim[1])) {
  	axes <- c(xlim[1], xlim[2], ylim[1], ylim[2], (xlim[2]-xlim[1])/12, (ylim[2]-ylim[1])/12)
  }
  pl.c <- setup.point.color(vowels, color, color.choice)
  pl.p <- setup.point.shape(vowels, shape, shape.choice)
  szs <- setup.sizes(vowels, size, a.size, l.size)
  p.s <- szs[1]
  a.s <- szs[2]
  l.s <- szs[3]
  
  if (title != "") mtext <- title
  
  plot(vowels[,5], vowels[,4], xlim=c(axes[1],axes[2]), ylim=c(axes[3],axes[4]), xlab=names(vowels)[5], ylab=names(vowels)[4], pch=pl.p, cex=p.s, cex.main=(a.s + 0.5), cex.axis=(a.s + 0.25), cex.lab=(a.s+0.1), main=mtext, sub=stext, col=pl.c)
  pl.cs<-"black"
  pl.ps<-unique(pl.p)
  if (!(is.null(attributes(vowels)$mean.values) | is.null(attributes(vowels)$median.values))) pl.ps<-unique(pl.p)
  
  if (!is.na(color) & color=="speakers") pl.cs<-unique(pl.c)
  if (!is.na(leg)) {
  	if (leg == "vowels" & (shape == "vowels" | color == "vowels")) {
  	  if (shape=="speakers") pl.ps<-NA
  	  if (!is.na(color) & color=="speakers") {
  	  	pl.lc<-"black"
  	  } else {
  	  	pl.lc<-unique(pl.c)
  	  }
  	  legend("bottomleft", legend=unique(vowels[,2]), col=pl.lc, text.col=pl.lc, pch=pl.ps, inset=.02, cex=l.s, pt.cex=l.s)
  	} else {
  	  if (shape=="vowels") pl.ps<-NA
	  legend("bottomleft", legend=spkrs, col=pl.cs, text.col=pl.cs, pch=pl.ps, inset=.02, cex=l.s)
	}
  }
  f3.plus <- 0
  if (is.null(attributes(vowels)$no.f3s)) {
     f3.plus <- 1
  }
  options(warn=-1) # suppressing warnings here 
  # (arrows create a warning when they're too short to print)
  arrows(vowels[,5], vowels[,4], vowels[,7+f3.plus], vowels[,6+f3.plus], angle=15, length=0.1, lwd=(p.s+0.3), col=pl.c)
  if (!is.na(ltext)) {
	text(vowels[,5], vowels[,4], ltext, adj=c(0,1.5), cex=(2*p.s/3), col=pl.c)
  }
  options(warn=0)
}
<environment: namespace:vowels>
 --- function (body) search ---
Function vowelplot in namespace vowels has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
