
Attaching package: 'ExtDist'

The following object is masked from 'package:stats':

    BIC

 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpvHLm63/R.INSTALLf57d33033697/ExtDist/R/Laplace.R#159: 
 --- if/while statement is in package --- 
ExtDist
 --- call (currently evaluated) --- 
eLaplace(c(0.1703, 0.4307, 0.6085, 0.0503, 0.4625, 0.479, 0.2695, 
0.2744, 0.2713, 0.2177, 0.2865, 0.2009, 0.2359, 0.3877, 0.5799, 
0.3537, 0.2805, 0.2144, 0.2261, 0.4016), c(0.850850850850851, 
1.11111111111111, 0.880880880880881, 1.34134134134134, 1.01101101101101, 
0.960960960960961, 0.860860860860861, 1.34134134134134, 0.870870870870871, 
1.34134134134134, 0.840840840840841, 0.840840840840841, 0.830830830830831, 
1.09109109109109, 0.950950950950951, 0.770770770770771, 0.960960960960961, 
1.24124124124124, 0.780780780780781, 1.12112112112112))
 --- R stacktrace ---
where 1: eLaplace(c(0.1703, 0.4307, 0.6085, 0.0503, 0.4625, 0.479, 0.2695, 
0.2744, 0.2713, 0.2177, 0.2865, 0.2009, 0.2359, 0.3877, 0.5799, 
0.3537, 0.2805, 0.2144, 0.2261, 0.4016), c(0.850850850850851, 
1.11111111111111, 0.880880880880881, 1.34134134134134, 1.01101101101101, 
0.960960960960961, 0.860860860860861, 1.34134134134134, 0.870870870870871, 
1.34134134134134, 0.840840840840841, 0.840840840840841, 0.830830830830831, 
1.09109109109109, 0.950950950950951, 0.770770770770771, 0.960960960960961, 
1.24124124124124, 0.780780780780781, 1.12112112112112))
where 2: FUN(X[[i]], ...)
where 3: lapply(paste0("e", candDist), do.call, args = list(X, w))
where 4: bestDist(Y, w, candDist = c("Beta_ab", "Laplace", "Normal"), 
    criterion = "AIC")
where 5: eval(expr, envir, enclos)
where 6: eval(expr, envir, enclos)
where 7: withVisible(eval(expr, envir, enclos))
where 8: withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, 
    error = eHandler, message = mHandler)
where 9: handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, 
    enclos)), warning = wHandler, error = eHandler, message = mHandler))
where 10: timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, 
    envir, enclos)), warning = wHandler, error = eHandler, message = mHandler)))
where 11: evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, 
    debug = debug, last = i == length(out), use_try = stop_on_error != 
        2L, keep_warning = keep_warning, keep_message = keep_message, 
    output_handler = output_handler, include_timing = include_timing)
where 12 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/hooks.R#17: evaluate::evaluate(...)
where 13: evaluate(code, envir = env, new_device = FALSE, keep_warning = !isFALSE(options$warning), 
    keep_message = !isFALSE(options$message), stop_on_error = if (options$error && 
        options$include) 0L else 2L, output_handler = knit_handlers(options$render, 
        options))
where 14: in_dir(input_dir(), evaluate(code, envir = env, new_device = FALSE, 
    keep_warning = !isFALSE(options$warning), keep_message = !isFALSE(options$message), 
    stop_on_error = if (options$error && options$include) 0L else 2L, 
    output_handler = knit_handlers(options$render, options)))
where 15: block_exec(params)
where 16 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/block.R#6: call_block(x)
where 17 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/block.R#3: process_group.block(group)
where 18: process_group(group)
where 19: withCallingHandlers(if (tangle) process_tangle(group) else process_group(group), 
    error = function(e) {
        setwd(wd)
        cat(res, sep = "\n", file = output %n% "")
        message("Quitting from lines ", paste(current_lines(i), 
            collapse = "-"), " (", knit_concord$get("infile"), 
            ") ")
    })
where 20: process_file(text, output)
where 21: knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet, 
    encoding = encoding)
where 22 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/utils-vignettes.R#40: rmarkdown::render(file, encoding = encoding, quiet = quiet, envir = globalenv())
where 23 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/utils-vignettes.R#92: vweave_rmarkdown(...)
where 24: engine$weave(file, quiet = quiet, encoding = enc)
where 25: doTryCatch(return(expr), name, parentenv, handler)
where 26: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 27: tryCatchList(expr, classes, parentenv, handlers)
where 28: tryCatch({
    engine$weave(file, quiet = quiet, encoding = enc)
    setwd(startdir)
    find_vignette_product(name, by = "weave", engine = engine)
}, error = function(e) {
    stop(gettextf("processing vignette '%s' failed with diagnostics:\n%s", 
        file, conditionMessage(e)), domain = NA, call. = FALSE)
})
where 29: buildVignettes(dir = "/var/scratch2/tomas/test/mine/R-ifc4/check/ExtDist.Rcheck/vign_test/ExtDist")

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function (currently evaluated)--- 
function(X,w, method =c("analytic.MLE","numerical.MLE"),...){
    n<-length(X)
    if(missing(w)){
      w <- rep(1,n)
    } else {
      w <- n*w/sum(w)
    }
    
    if(method == "analytic.MLE") {
      
      mu <- median(X, na.rm=T)
      b <- mean(abs(X-mu))
      est.par <- list(mu=mu, b=b) 
      est.par.se <- rep(NA, length(est.par))
    } else{
      method == "numerical.MLE"  
      
      est.par <- wmle(X=X, w=w, distname="Laplace",
                      initial=list(mu=0, b=1),
                      lower=list(mu=-Inf, b=0),
                      upper=list(mu=Inf, b=Inf))
      
      est.par.se <- try(sqrt(diag(solve(attributes(est.par)$nll.hessian))),silent=TRUE)
      if(class(est.par.se) == "try-error") {
        est.par.se <- rep(NA, length(est.par))
      } 
    } 
    
    attributes(est.par)$ob <- X
    attributes(est.par)$weights <- w
    attributes(est.par)$distname <- "Laplace"
    
    attributes(est.par)$method <- method
    attributes(est.par)$par.name <- c("mu","b")
    attributes(est.par)$par.type <- c("location", "scale")
    attributes(est.par)$par.vals <- c(est.par$mu, est.par$b)
    attributes(est.par)$par.s.e <-  est.par.se  
    
    class(est.par) <- "eDist"
    
    return(est.par)
  }
<environment: namespace:ExtDist>
 --- function (body) search ---
Function eLaplace in namespace ExtDist has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
