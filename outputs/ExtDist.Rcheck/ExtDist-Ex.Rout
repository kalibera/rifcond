
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ExtDist"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ExtDist')

Attaching package: ‘ExtDist’

The following object is masked from ‘package:stats’:

    BIC

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Beta")
> ### * Beta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Beta
> ### Title: The Standard Beta Distribution.
> ### Aliases: Beta dBeta eBeta iBeta lBeta pBeta qBeta rBeta sBeta
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> x <- rBeta(n=500, params=list(shape1=2, shape2=2))
> est.par <- eBeta(x); est.par

Parameters for the Beta distribution. 
(found using the  MOM method.)

 Parameter  Type Estimate
    shape1 shape 2.072842
    shape2 shape 2.014862


> plot(est.par)
> 
> # Fitted density curve and histogram
> dens <- dBeta(x=seq(0,1,length=100), params=list(shape1=2, shape2=2))
> hist(x, breaks=10, probability=TRUE, ylim = c(0,1.2*max(dens)))
> lines(seq(0,1,length=100), dens, col="blue")
> lines(density(x), lty=2)
> 
> # Extracting shape parameters
> est.par[attributes(est.par)$par.type=="shape"]
$shape1
[1] 2.072842

$shape2
[1] 2.014862

> 
> # Parameter estimation for a distribution with unknown shape parameters
> # Example from; Bury(1999) pp.253-255, parameter estimates as given by Bury are
> # shape1 = 4.222 and shape2 = 6.317
> data <- c(0.461, 0.432, 0.237, 0.113, 0.526, 0.278, 0.275, 0.309, 0.67, 0.428, 0.556,
+ 0.402, 0.472, 0.226, 0.632, 0.533, 0.309, 0.417, 0.495, 0.241)
> est.par <- eBeta(X=data, method="numerical.MLE"); est.par

Parameters for the Beta distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type Estimate     S.E.
    shape1 shape 4.191737 1.283389
    shape2 shape 6.304651 1.969371


> plot(est.par)
> 
> # Log-likelihood, score function, and observed information matrix
> lBeta(data, param=est.par)
[1] 10.5777
> sBeta(data, param=est.par)
       shape1        shape2 
 3.857847e-07 -8.869954e-07 
> iBeta(data, param=est.par)
          shape1    shape2
shape1  3.386125 -1.999060
shape2 -1.999060  1.438018
> 
> # Evaluating the precision of parameter estimation by the Hessian matrix.
> H <- attributes(est.par)$nll.hessian;H
          shape1    shape2
shape1  3.386125 -1.999060
shape2 -1.999060  1.438018
> var <- solve(H)
> se <- sqrt(diag(var)); se
  shape1   shape2 
1.283389 1.969371 
> 
> 
> 
> cleanEx()
> nameEx("Beta_ab")
> ### * Beta_ab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Beta_ab
> ### Title: The four-parameter beta distribution.
> ### Aliases: Beta_ab dBeta_ab eBeta_ab lBeta_ab pBeta_ab qBeta_ab rBeta_ab
> ###   sBeta_ab
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rBeta_ab(n=500, shape1=2, shape2=5, a=1, b=2)
> est.par <- eBeta_ab(X); est.par

Parameters for the Beta_ab distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type  Estimate
    shape1    shape 2.1129455
    shape2    shape 5.0225197
         a boundary 0.9956297
         b boundary 1.9851254


> plot(est.par)
> 
> # Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dBeta_ab(den.x,params = est.par)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue")   # Original data
> lines(density(X), lty=2)          # Fitted density curve
> 
> # Extracting boundary and shape parameters
> est.par[attributes(est.par)$par.type=="boundary"]
$a
[1] 0.9956297

$b
[1] 1.985125

> est.par[attributes(est.par)$par.type=="shape"]
$shape1
[1] 2.112945

$shape2
[1] 5.02252

> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from: Bury(1999) pp.261-262, parameter estimates as given by Bury are
> # shape1 = 4.088, shape2 = 10.417, a = 1.279 and b = 2.407.
> # The log-likelihood for this data and Bury's parameter estimates is 8.598672.
> data <- c(1.73, 1.5, 1.56, 1.89, 1.54, 1.68, 1.39, 1.64, 1.49, 1.43, 1.68, 1.61, 1.62)
> est.par <- eBeta_ab(X=data, method="numerical.MLE");est.par
Error in eigen(nhatend) : infinite or missing values in 'x'

Parameters for the Beta_ab distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type Estimate
    shape1    shape 1.000000
    shape2    shape 1.554651
         a boundary 1.390000
         b boundary 1.922278


> plot(est.par)
> 
> # Estimates calculated by eBeta_ab differ from those given by Bury(1999).
> # However, eBeta_ab's parameter estimates appear to be an improvement, due to a larger
> # log-likelihood of 9.295922 (as given by lBeta_ab below).
> 
> # log-likelihood and score functions
> lBeta_ab(data,param = est.par)
[1] 9.295922
> sBeta_ab(data,param = est.par)
       shape1        shape2             a             b 
-1.867808e+01 -2.761777e-05  2.034795e+01  3.820333e-04 
> 
> 
> 
> cleanEx()
> nameEx("Burr")
> ### * Burr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Burr
> ### Title: The Burr Distribution.
> ### Aliases: Burr dBurr eBurr lBurr pBurr qBurr rBurr
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution of known shape parameters
> X <- rBurr(n=500, b = 1, g = 2, s = 2)
> est.par <- eBurr(X); est.par

Parameters for the Burr distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type Estimate      S.E.
         b scale 1.361473 0.2721668
         g shape 1.948237 0.1085970
         s shape 3.203453 0.8998694


> plot(est.par)
> 
> # Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dBurr(den.x, b=est.par$b, g=est.par$g, s=est.par$s)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty=2)
> 
> # Extracting shape or scale parameters
> est.par[attributes(est.par)$par.type=="scale"]
$b
[1] 1.361473

> est.par[attributes(est.par)$par.type=="shape"]
$g
[1] 1.948237

$s
[1] 3.203453

> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from: Matlab Statistical Toolbox package
> # (See: http://au.mathworks.com/help/stats/burr-type-xii-distribution.html)
> # Parameter estimates given are: b = 80.4515, g = 18.9251 and s = 0.4492.
> QRS.duration <- c(91,81,138,100,88,100,77,78,84,89,102,77,78,91,77,75,82,70,91,82,83,90,71,75,82,
+                  109,94,95,90,96,85,71,75,78,82,69,103,85,80,94,80,79,92,84,86,73,75,73,78,80,81,
+                  83,103,92,88,77,79,90,91,83,80,78,76,82,81,80,82,71,73,87,76,101,93,90,87,88,94,
+                  94,90,78,83,92,93,100,83,163,96,114,170,137,84,82,79,72,97,87,102,85,84,78,79,91,
+                  98,86,72,97,82,78,97,94,82,78,79,87,93,75,106,96,88,90,74,85,90,71,75,77,87,95,
+                  74,99,89,83,78,100,80,87,79,102,80,85,81,85,95,82,97,92,102,86,80,85,85,111,89,63,
+                  70,92,75,93,83,84,91,81,113,92,81,74,78,80,82,95,106,95,100,90,88,71,78,77,87,79,
+                  85,91,92,98,68,84,92,110,108,153,73,81,87,87,95,73,95,100,96,97,76,62,86,71,99,68,
+                  90,146,86,80,90,93,91,111,89,79,77,73,92,98,78,87,98,84,82,90,85,71,84,85,77,93,
+                  74,89,89,103,85,88,81,84,96,90,98,78,93,80,85,67,74,69,105,95,87,108,99,79,86,82,
+                  91,93,80,84,90,81,90,78,98,81,90,85,79,61,90,79,83,84,78,86,72,87,91,102,80,82,104,
+                  85,83,81,94,84,91,99,101,132,79,103,97,131,91,90,121,78,84,97,94,96,91,80,97,92,90,
+                  90,123,105,85,77,83,92,85,96,69,88,84,107,91,74,89,109,80,83,92,100,113,105,99,84,
+                  74,76,87,87,96,88,80,85,90,74,95,86,74,95,74,73,104,92,105,97,101,83,84,98,81,93,
+                  84,102,94,91,100,92,94,98,146,84,77,82,84,76,106,70,87,118,86,82,96,89,93,82,97,
+                  86,188,93,72,107,81,76,83,147,82,110,108,82,93,95,80,185,73,78,71,86,85,76,93,
+                  87,96,86,78,87,80,98,75,78,82,94,83,94,140,87,55,133,83,77,123,79,88,80,88,79,
+                  77,87,88,94,88,74,85,88,81,91,81,80,100,108,93,79)
> est.par <- eBurr(QRS.duration); est.par

Parameters for the Burr distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type   Estimate      S.E.
         b scale 80.4515050 0.9905980
         g shape 18.9250234 1.5944568
         s shape  0.4492412 0.0628466


> plot(est.par)
> 
> # log-likelihood function
> lBurr(QRS.duration,param = est.par)
[1] -1763.305
> 
> # Evaluation of the precision of the parameter estimates by the Hessian matrix
> H <- attributes(est.par)$nll.hessian
> var <- solve(H)
> se <- sqrt(diag(var)); se
        b         g         s 
0.9905980 1.5944568 0.0628466 
> 
> 
> 
> cleanEx()
> nameEx("DistSelCriteria")
> ### * DistSelCriteria
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DistSelCriteria
> ### Title: Distribution Selection Criteria.
> ### Aliases: DistSelCriteria
> 
> ### ** Examples
> 
> Ozone <- airquality$Ozone
> Ozone <- Ozone[!is.na(Ozone)] # Removing the NA's from Ozone data
> DistSelCriteria(Ozone, candDist = c("Gamma", "Weibull", "Normal", "Exp"),
+ criteria = c("logLik","AIC","AICc", "BIC"))
       Gamma     Weibull   Normal    Exp      
logLik -541.5947 -541.5376 -569.6492 -549.9263
AIC    1087.189  1087.075  1143.298  1101.853 
AICc   1087.296  1087.181  1143.404  1101.888 
BIC    1092.697  1092.582  1148.805  1104.606 
> 
> 
> 
> cleanEx()
> nameEx("Exponential")
> ### * Exponential
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Exponential
> ### Title: The Exponential Distribution.
> ### Aliases: Exponential dExp eExp iExp lExp pExp qExp rExp sExp
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> x <- rExp(n=500, scale=2)
> est.par <- eExp(x); est.par

Parameters for the Exp distribution. 
(found using the  analytical.MLE method.)

 Parameter  Type Estimate       S.E.
      rate scale 2.094003 0.09364666


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(x),max(x),length=100)
> den.y <- dExp(den.x,scale=est.par$scale)
> hist(x, breaks=10, probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(x), lty=2)
> 
> # Extracting the scale parameter
> est.par[attributes(est.par)$par.type=="scale"]
$scale
[1] 2.094003

> 
> # Parameter estimation for a distribution with unknown shape parameters
> # Example from Kapadia et.al(2005), pp.380-381.
> # Parameter estimate as given by Kapadia et.al is scale=0.00277
> cardio <- c(525, 719, 2880, 150, 30, 251, 45, 858, 15,
+            47, 90, 56, 68, 6, 139, 180, 60, 60, 294, 747)
> est.par <- eExp(cardio, method="analytical.MLE"); est.par

Parameters for the Exp distribution. 
(found using the  analytical.MLE method.)

 Parameter  Type    Estimate         S.E.
      rate scale 0.002770083 0.0006194094


> plot(est.par)
> 
> # log-likelihood, score function and Fisher's information
> lExp(cardio,param = est.par)
[1] -137.7776
> sExp(cardio,param = est.par)
[1] 0
> iExp(cardio,param = est.par)
[1] 2606420
> 
> 
> 
> cleanEx()
> nameEx("Gamma")
> ### * Gamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gamma
> ### Title: The Gamma Distribution.
> ### Aliases: Gamma dGamma eGamma lGamma pGamma qGamma rGamma
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rGamma(n=500, shape=1.5, scale=0.5)
> est.par <- eGamma(X); est.par

Parameters for the Gamma distribution. 
(found using the  moments method.)

 Parameter  Type  Estimate       S.E.
     shape shape 1.3963090 0.16853442
     scale scale 0.4812524 0.07995574


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dGamma(den.x,shape=est.par$shape,scale=est.par$scale)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty=2)
> 
> # Extracting shape or scale parameters
> est.par[attributes(est.par)$par.type=="shape"]
$shape
[1] 1.396309

> est.par[attributes(est.par)$par.type=="scale"]
$scale
[1] 0.4812524

> 
> # Parameter estimation for a distribution with unknown shape parameters
> # Example from:  Bury(1999) pp.225-226, parameter estimates as given by Bury are
> # shape = 6.40 and scale=2.54. The log-likelihood for this data given
> # Bury's parameter estimates is -656.7921.
> data <- c(16, 11.6, 19.9, 18.6, 18, 13.1, 29.1, 10.3, 12.2, 15.6, 12.7, 13.1,
+          19.2, 19.5, 23, 6.7, 7.1, 14.3, 20.6, 25.6, 8.2, 34.4, 16.1, 10.2, 12.3)
> est.par <- eGamma(data, method="numerical.MLE"); est.par

Parameters for the Gamma distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type Estimate      S.E.
     shape shape 6.404003 1.7661586
     scale scale 0.392980 0.1127422


> plot(est.par)
> 
> # Estimates calculated by eGamma differ from those given by Bury(1999).
> # However, eGamma's parameter estimates appear to be an improvement, due to a larger
> # log-likelihood of -80.68186 (as given by lGamma below).
> 
> # log-likelihood
> lGamma(data,param = est.par)
[1] -80.68186
> 
> # Evaluating the precision of the parameter estimates by the Hessian matrix
> H <- attributes(est.par)$nll.hessian
> var <- solve(H)
> se <- sqrt(diag(var));se
    shape     scale 
1.7661586 0.1127422 
> 
> 
> 
> cleanEx()
> nameEx("Gumbel")
> ### * Gumbel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gumbel
> ### Title: The Gumbel distribution
> ### Aliases: Gumbel dGumbel eGumbel lGumbel pGumbel qGumbel rGumbel
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rGumbel(n = 500, location = 1.5, scale = 0.5)
> est.par <- eGumbel(X, method="moments"); est.par

Parameters for the Gumbel distribution. 
(found using the  moments method.)

 Parameter     Type  Estimate       S.E.
  location location 1.5037055 0.02190632
     scale    scale 0.4888792 0.01422979


> plot(est.par)
> 
> # Extracting location and scale parameters
> est.par[attributes(est.par)$par.type=="location"]
$location
[1] 1.503705

> est.par[attributes(est.par)$par.type=="scale"]
$scale
[1] 0.4888792

> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dGumbel(den.x, location = est.par$location, scale= est.par$scale)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X))
> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from; Bury(1999) pp.283-284, parameter estimates as given by Bury are location = 33.5
> # and scale = 2.241
> data <- c(32.7, 30.4, 31.8, 33.2, 33.8, 35.3, 34.6, 33, 32, 35.7, 35.5, 36.8, 40.8, 38.7, 36.7)
> est.par <- eGumbel(X=data, method="numerical.MLE"); est.par

Parameters for the Gumbel distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type  Estimate      S.E.
  location location 33.466703 0.6106599
     scale    scale  2.240689 0.4495509


> plot(est.par)
> 
> # log-likelihood
> lGumbel(data, param = est.par)
[1] -35.58083
> 
> # Evaluating the precision of the parameter estimates by the Hessian matrix
> H <- attributes(est.par)$nll.hessian
> var <- solve(H)
> se <- sqrt(diag(var)); se
 location     scale 
0.6106599 0.4495509 
> 
> 
> 
> cleanEx()
> nameEx("JohnsonSB")
> ### * JohnsonSB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JohnsonSB
> ### Title: The Johnson SB distribution.
> ### Aliases: JohnsonSB dJohnsonSB dJohnsonSB_ab eJohnsonSB lJohnsonSB
> ###   pJohnsonSB qJohnsonSB rJohnsonSB
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rJohnsonSB(n=500, gamma=-0.5, delta=2, xi=-0.5, lambda=2)
> est.par <- eJohnsonSB(X); est.par

Parameters for the JohnsonSB distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type   Estimate      S.E.
     gamma    shape -0.6105151 0.5752255
     delta    shape  2.3732340 0.7697994
        xi location -0.6985782 0.7236202
    lambda    scale  2.3532859 0.2729656


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dJohnsonSB(den.x,params = est.par)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X))
> 
> # Extracting location, scale and shape parameters
> est.par[attributes(est.par)$par.type=="location"]
$xi
[1] -0.6985782

> est.par[attributes(est.par)$par.type=="scale"]
$lambda
[1] 2.353286

> est.par[attributes(est.par)$par.type=="shape"]
$gamma
[1] -0.6105151

$delta
[1] 2.373234

> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from Karian, Z.A and Dudewicz, E.J. (2011) p.647.
> # Original source of brain scan data Dudewich, E.J et.al (1989).
> # Parameter estimates as given by Karian & Dudewicz using moments are:
> # gamma =-0.2081, delta=0.9167, xi = 95.1280 and lambda = 21.4607 with log-likelihood = -67.03579
> brain <- c(108.7, 107.0, 110.3, 110.0, 113.6, 99.2, 109.8, 104.5, 108.1, 107.2, 112.0, 115.5, 108.4,
+            107.4, 113.4, 101.2, 98.4, 100.9, 100.0, 107.1, 108.7, 102.5, 103.3)
> est.par <- eJohnsonSB(brain); est.par

Parameters for the JohnsonSB distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type   Estimate
     gamma    shape  0.0491309
     delta    shape  0.6547437
        xi location 97.9208050
    lambda    scale 18.0843462


> 
> # Estimates calculated by eJohnsonSB differ from those given by Karian & Dudewicz (2011).
> # However, eJohnsonSB's parameter estimates appear to be an improvement, due to a larger
> # log-likelihood of -66.35496 (as given by lJohnsonSB below).
> 
> # log-likelihood function
> lJohnsonSB(brain, param = est.par)
[1] -66.35496
> 
> 
> 
> cleanEx()
> nameEx("JohnsonSU")
> ### * JohnsonSU
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JohnsonSU
> ### Title: The Johnson SU distribution.
> ### Aliases: JohnsonSU dJohnsonSU eJohnsonSU lJohnsonSU pJohnsonSU
> ###   qJohnsonSU rJohnsonSU
> 
> ### ** Examples
> 
> # Parameter estimation for a known distribution
> X <- rJohnsonSU(n=500, gamma=-0.5, delta=2, xi=-0.5, lambda=2)
> est.par <- eJohnsonSU(X); est.par

Parameters for the JohnsonSU distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type   Estimate      S.E.
     gamma    shape -0.4420852 0.1864215
     delta    shape  1.7076025 0.2566871
        xi boundary -0.4157089 0.1980351
    lambda boundary  1.6671348 0.3079859


> plot(est.par)
> 
> # Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dJohnsonSU(den.x,params = est.par)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty=2)
> 
> # Extracting shape and boundary parameters
> est.par[attributes(est.par)$par.type=="shape"]
$gamma
[1] -0.4420852

$delta
[1] 1.707602

> est.par[attributes(est.par)$par.type=="boundary"]
$xi
[1] -0.4157089

$lambda
[1] 1.667135

> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from Karian, Z.A and Dudewicz, E.J. (2011) p.657.
> # Parameter estimates as given by Karian & Dudewicz are:
> # gamma =-0.2823, delta=1.0592, xi = -1.4475 and lambda = 4.2592  with log-likelihood = -277.1543
> data <- c(1.99, -0.424, 5.61, -3.13, -2.24, -0.14, -3.32, -0.837, -1.98, -0.120,
+          7.81, -3.13, 1.20, 1.54, -0.594, 1.05, 0.192, -3.83, -0.522, 0.605,
+          0.427, 0.276, 0.784, -1.30, 0.542, -0.159, -1.66, -2.46, -1.81, -0.412,
+          -9.67, 6.61, -0.589, -3.42, 0.036, 0.851, -1.34, -1.22, -1.47, -0.592,
+          -0.311, 3.85, -4.92, -0.112, 4.22, 1.89, -0.382, 1.20, 3.21, -0.648,
+          -0.523, -0.882, 0.306, -0.882, -0.635, 13.2, 0.463, -2.60, 0.281, 1.00,
+          -0.336, -1.69, -0.484, -1.68, -0.131, -0.166, -0.266, 0.511, -0.198, 1.55,
+          -1.03, 2.15, 0.495, 6.37, -0.714, -1.35, -1.55, -4.79, 4.36, -1.53,
+          -1.51, -0.140, -1.10, -1.87, 0.095, 48.4, -0.998, -4.05, -37.9, -0.368,
+          5.25, 1.09, 0.274, 0.684, -0.105, 20.3, 0.311, 0.621, 3.28, 1.56)
> est.par <- eJohnsonSU(data); est.par

Parameters for the JohnsonSU distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type   Estimate      S.E.
     gamma    shape -0.2848688 0.1912544
     delta    shape  1.0000367 0.2298806
        xi boundary -0.6712065 0.3603736
    lambda boundary  1.6699007 0.6504748


> plot(est.par)
> 
> # Estimates calculated by eJohnsonSU differ from those given by Karian & Dudewicz (2011).
> # However, eJohnsonSU's parameter estimates appear to be an improvement, due to a larger
> # log-likelihood of -250.3208 (as given by lJohnsonSU below).
> 
> # log-likelihood function
> lJohnsonSU(data, param = est.par)
[1] -250.3208
> 
> # Evaluation of the precision using the Hessian matrix
> H <- attributes(est.par)$nll.hessian
> var <- solve(H)
> se <- sqrt(diag(var)); se
    gamma     delta        xi    lambda 
0.1912544 0.2298806 0.3603736 0.6504748 
> 
> 
> 
> cleanEx()
> nameEx("Laplace")
> ### * Laplace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Laplace
> ### Title: The Laplace Distribution.
> ### Aliases: Laplace dLaplace eLaplace lLaplace pLaplace qLaplace rLaplace
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rLaplace(n=500, mu=1, b=2)
> est.par <- eLaplace(X, method="analytic.MLE"); est.par

Parameters for the Laplace distribution. 
(found using the  analytic.MLE method.)

 Parameter     Type  Estimate
        mu location 0.9027521
         b    scale 1.8813018


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dLaplace(den.x, location = est.par$location, scale= est.par$scale)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty=2)
> 
> # Extracting location or scale parameters
> est.par[attributes(est.par)$par.type=="location"]
$mu
[1] 0.9027521

> est.par[attributes(est.par)$par.type=="scale"]
$b
[1] 1.881302

> 
> # Parameter estimation for a distribution with unknown shape parameters
> # Example from Best et.al (2008). Original source of flood data from Gumbel & Mustafi.
> # Parameter estimates as given by Best et.al mu=10.13 and  b=3.36
> flood <- c(1.96, 1.96, 3.60, 3.80, 4.79, 5.66, 5.76, 5.78, 6.27, 6.30, 6.76, 7.65, 7.84, 7.99,
+            8.51, 9.18, 10.13, 10.24, 10.25, 10.43, 11.45, 11.48, 11.75, 11.81, 12.34, 12.78, 13.06,
+            13.29, 13.98, 14.18, 14.40, 16.22, 17.06)
> est.par <- eLaplace(flood, method="numerical.MLE"); est.par

Parameters for the Laplace distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type Estimate      S.E.
        mu location 10.13000 0.4149289
         b    scale  3.36091 0.5850647


> plot(est.par)
> 
> #log-likelihood function
> lLaplace(flood,param=est.par)
[1] -95.87684
> 
> # Evaluating the precision by the Hessian matrix
> H <- attributes(est.par)$nll.hessian
> var <- solve(H)
> se <- sqrt(diag(var));se
       mu         b 
0.4149289 0.5850647 
> 
> 
> 
> cleanEx()
> nameEx("Logistic")
> ### * Logistic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Logistic
> ### Title: The Logistic Distribution.
> ### Aliases: Logistic dLogistic eLogistic lLogistic pLogistic qLogistic
> ###   rLogistic
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rLogistic(n=500, location=1.5, scale=0.5)
> est.par <- eLogistic(X); est.par

Parameters for the Logistic distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type  Estimate       S.E.
  location location 1.4860516 0.03703900
     scale    scale 0.4772498 0.01783152


> plot(est.par)
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dLogistic(den.x,location=est.par$location,scale=est.par$scale)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty=2)
> 
> # Extracting location or scale parameters
> est.par[attributes(est.par)$par.type=="location"]
$location
[1] 1.486052

> est.par[attributes(est.par)$par.type=="scale"]
$scale
[1] 0.4772498

> 
> # log-likelihood function
> lLogistic(X,param = est.par)
[1] -628.9356
> 
> # Evaluation of the precision of the parameter estimates by the Hessian matrix
> H <- attributes(est.par)$nll.hessian
> fisher_info <- solve(H)
> var <- sqrt(diag(fisher_info));var
  location      scale 
0.03703900 0.01783152 
> 
> # Example of parameter estimation for a distribution with
> # unknown parameters currently been sought after.
> 
> 
> 
> cleanEx()
> nameEx("Normal")
> ### * Normal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Normal
> ### Title: The Normal Distribution.
> ### Aliases: Normal dNormal eNormal iNormal lNormal pNormal qNormal rNormal
> ###   sNormal
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> x <- rNormal(n=500, params=list(mean=1, sd=2))
> est.par <- eNormal(X=x, method="unbiased.MLE"); est.par

Parameters for the Normal distribution. 
(found using the  unbiased.MLE method.)

 Parameter     Type Estimate       S.E.
      mean location 1.045288 0.09050962
        sd    scale 2.023857 0.06406406


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(x),max(x),length=100)
> den.y <- dNormal(den.x, mean = est.par$mean, sd = est.par$sd)
> hist(x, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(lines(den.x, den.y, col="blue")) # Original data
> lines(density(x), col="red")           # Fitted curve
> 
> # Extracting location and scale parameters
> est.par[attributes(est.par)$par.type=="location"]
$mean
[1] 1.045288

> est.par[attributes(est.par)$par.type=="scale"]
$sd
[1] 2.023857

> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from: Bury(1999) p.143, parameter estimates as given by Bury are
> # mu = 11.984 and sigma = 0.067
> data <- c(12.065, 11.992, 11.992, 11.921, 11.954, 11.945, 12.029, 11.948, 11.885, 11.997,
+          11.982, 12.109, 11.966, 12.081, 11.846, 12.007, 12.011)
> est.par <- eNormal(X=data, method="numerical.MLE"); est.par

Parameters for the Normal distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type   Estimate       S.E.
      mean location 11.9841176 0.01578771
        sd    scale  0.0650944 0.01116360


> plot(est.par)
> 
> # log-likelihood, score function and observed information matrix
> lNormal(data, param = est.par)
[1] 22.32063
> sNormal(data, param = est.par)
         mean            sd 
 4.051759e-06 -1.505957e-05 
> iNormal(data, param = est.par)
             mean           sd
mean 4.012007e+03 1.244887e-04
sd   1.244887e-04 8.024014e+03
> 
> # Evaluating the precision of the parameter estimates by the Hessian matrix
> H <- attributes(est.par)$nll.hessian; H
             mean           sd
mean 4.012007e+03 1.244887e-04
sd   1.244887e-04 8.024014e+03
> var <- solve(H)
> se <- sqrt(diag(var)); se
      mean         sd 
0.01578771 0.01116360 
> 
> 
> 
> cleanEx()
> nameEx("Normal_trunc_ab")
> ### * Normal_trunc_ab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Normal_trunc_ab
> ### Title: The truncated normal distribution.
> ### Aliases: Normal_trunc_ab dNormal_trunc_ab eNormal_trunc_ab
> ###   lNormal_trunc_ab pNormal_trunc_ab qNormal_trunc_ab rNormal_trunc_ab
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rNormal_trunc_ab(n= 500, mu= 2, sigma = 5, a = 1, b = 2)
> est.par <- eNormal_trunc_ab(X); est.par

Parameters for the Normal_trunc_ab distribution. 
(found using the  numerical.MLE method.)

 Parameter     Type Estimate
        mu    shape 1.476554
     sigma    shape 1.054714
         a boundary 1.001861
         b boundary 1.996103


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dNormal_trunc_ab(den.x,params = est.par)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty = 2)
> 
> # Extracting boundary and shape parameters
> est.par[attributes(est.par)$par.type=="boundary"]
$a
[1] 1.001861

$b
[1] 1.996103

> est.par[attributes(est.par)$par.type=="shape"]
$mu
[1] 1.476554

$sigma
[1] 1.054714

> 
> # log-likelihood function
> lNormal_trunc_ab(X,param = est.par)
[1] 3.165409
> 
> 
> 
> cleanEx()
> nameEx("SRTB_ab")
> ### * SRTB_ab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SRTB_ab
> ### Title: The symmetric-reflected truncated beta (SRTB) distribution.
> ### Aliases: SRTB_ab dSRTB_ab eSRTB_ab lSRTB_ab pSRTB_ab qSRTB_ab rSRTB_ab
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rSRTB_ab(n=500, shape1=2, shape2=10, a=1, b=2)
> est.par <- eSRTB_ab(X)
> plot(est.par)
> 
> # Extracting boundary and shape parameters
> est.par[attributes(est.par)$par.type=="boundary"]
$a
[1] 1.013784

$b
[1] 1.987725

> est.par[attributes(est.par)$par.type=="shape"]
$shape1
[1] 1.84937

$shape2
[1] 1.893756

> 
> # log-likelihood function
> lSRTB_ab(X,param = est.par)
[1] 63.70733
> 
> 
> 
> cleanEx()
> nameEx("SSRTB")
> ### * SSRTB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SSRTB
> ### Title: The standard symmetric-reflected truncated beta (SSRTB)
> ###   distribution.
> ### Aliases: SSRTB dSSRTB eSSRTB lSSRTB pSSRTB qSSRTB rSSRTB
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rSSRTB(n=500, shape1=2, shape2=10)
> est.par <- eSSRTB(X); est.par

Parameters for the SSRTB distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type     Estimate
    shape1 shape 2.212910e+00
    shape2 shape 1.931832e+09


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dSSRTB(den.x,shape1=est.par$shape1,shape2=est.par$shape2)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(den.x, den.y, col="blue")
> lines(density(X), lty=2)
> 
> # Extracting shape parameters
> est.par[attributes(est.par)$par.type=="shape"]
$shape1
[1] 2.21291

$shape2
[1] 1931831693

> 
> # log-likelihood function
> lSSRTB(X,param = est.par)
[1] 63.31944
> 
> 
> 
> cleanEx()
> nameEx("Uniform")
> ### * Uniform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Uniform
> ### Title: The Uniform Distribution.
> ### Aliases: Uniform dUniform eUniform lUniform pUniform qUniform rUniform
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rUniform(n=500, a=0, b=1)
> est.par <- eUniform(X, method="analytic.MLE"); est.par

Parameters for the Uniform distribution. 
(found using the  analytic.MLE method.)

 Parameter     Type    Estimate
         a boundary 0.001836858
         b boundary 0.996077372


> plot(est.par)
> 
> # Histogram and fitted density
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dUniform(den.x,a=est.par$a,b=est.par$b)
> hist(X, breaks=10, probability=TRUE, ylim = c(0,1.2*max(den.y)))
> lines(den.x, den.y, col="blue")  # Original data
> lines(density(X), lty=2)         # Fitted curve
> 
> # Extracting boundary parameters
> est.par[attributes(est.par)$par.type=="boundary"]
$a
[1] 0.001836858

$b
[1] 0.9960774

> 
> # log-likelihood
> lUniform(X,param = est.par)
[1] 2.888068
> 
> # Example of parameter estimation for a distribution with
> # unknown parameters currently been sought after.
> 
> 
> 
> cleanEx()
> nameEx("Weibull")
> ### * Weibull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Weibull
> ### Title: The Weibull Distribution.
> ### Aliases: Weibull dWeibull eWeibull lWeibull pWeibull qWeibull rWeibull
> 
> ### ** Examples
> 
> # Parameter estimation for a distribution with known shape parameters
> X <- rWeibull(n=1000, params=list(shape=1.5, scale=0.5))
> est.par <- eWeibull(X=X, method="numerical.MLE"); est.par

Parameters for the Weibull distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type  Estimate       S.E.
     shape shape 1.4484990 0.05881667
     scale scale 0.4922074 0.02380553


> plot(est.par)
> 
> #  Fitted density curve and histogram
> den.x <- seq(min(X),max(X),length=100)
> den.y <- dWeibull(den.x,shape=est.par$shape,scale=est.par$scale)
> hist(X, breaks=10, col="red", probability=TRUE, ylim = c(0,1.1*max(den.y)))
> lines(den.x, den.y, col="blue", lwd=2)   # Original data
> lines(density(X), lty=2)                 # Fitted curve
> 
> # Extracting shape and scale parameters
> est.par[attributes(est.par)$par.type=="shape"]
$shape
[1] 1.448499

> est.par[attributes(est.par)$par.type=="scale"]
$scale
[1] 0.4922074

> 
> # Parameter Estimation for a distribution with unknown shape parameters
> # Example from: Rinne (2009) Dataset p.338 and example pp.418-419
> # Parameter estimates are given as shape = 99.2079 and scale = 2.5957. The log-likelihood
> # for this data and Rinne's parameter estimates is -1163.278.
> data <- c(35,38,42,56,58,61,63,76,81,83,86,90,99,104,113,114,117,119,141,183)
> est.par <- eWeibull(X=data, method="numerical.MLE"); est.par

Parameters for the Weibull distribution. 
(found using the  numerical.MLE method.)

 Parameter  Type   Estimate       S.E.
     shape shape 5.82976007 1.79326460
     scale scale 0.06628166 0.02129258


> plot(est.par)
> 
> # Estimates calculated by eWeibull differ from those given by Rinne(2009).
> # However, eWeibull's parameter estimates appear to be an improvement, due to a larger
> # log-likelihood of -99.09037 (as given by lWeibull below).
> 
>  # log-likelihood function
> lWeibull(data, param = est.par)
[1] -99.09037
> 
> # evaluate the precision of estimation by Hessian matrix
> H <- attributes(est.par)$nll.hessian
> var <- solve(H)
> se <- sqrt(diag(var));se
     shape      scale 
1.79326460 0.02129258 
> 
> 
> 
> cleanEx()
> nameEx("bestDist")
> ### * bestDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bestDist
> ### Title: Finding the best distribution for a (weighted) sample.
> ### Aliases: bestDist
> 
> ### ** Examples
> 
> X <- rBeta_ab(30, a = 0, b = 1, shape1 = 2, shape2 = 10)
> 
> # Determining the best distribution from the list of candidate distributions for the data X
> Best.Dist <- bestDist(X, candDist = c("Laplace","Normal","Beta_ab"), criterion = "logLik")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpvHLm63/R.INSTALLf57d33033697/ExtDist/R/Laplace.R#159: 
 --- if/while statement is in package --- 
ExtDist
 --- call (currently evaluated) --- 
eLaplace(c(0.0981874006662456, 0.192470502598578, 0.080791234832357, 
0.215236023124703, 0.0819730366346613, 0.24239909348071, 0.291549819432398, 
0.129892486493783, 0.495251284596173, 0.225291873070169, 0.0986519759850062, 
0.0150824679556766, 0.383426481328028, 0.160799286869712, 0.164533232520633, 
0.337847383659928, 0.309543236063974, 0.262315444940739, 0.331943574039946, 
0.300946540030764, 0.176780985838737, 0.0210178267742363, 0.267370883721543, 
0.159363307917005, 0.147018777993215, 0.0411277558158178, 0.112029728358418, 
0.230108923380977, 0.448809362187509, 0.153487083730173), c(1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1))
 --- R stacktrace ---
where 1: eLaplace(c(0.0981874006662456, 0.192470502598578, 0.080791234832357, 
0.215236023124703, 0.0819730366346613, 0.24239909348071, 0.291549819432398, 
0.129892486493783, 0.495251284596173, 0.225291873070169, 0.0986519759850062, 
0.0150824679556766, 0.383426481328028, 0.160799286869712, 0.164533232520633, 
0.337847383659928, 0.309543236063974, 0.262315444940739, 0.331943574039946, 
0.300946540030764, 0.176780985838737, 0.0210178267742363, 0.267370883721543, 
0.159363307917005, 0.147018777993215, 0.0411277558158178, 0.112029728358418, 
0.230108923380977, 0.448809362187509, 0.153487083730173), c(1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1))
where 2: FUN(X[[i]], ...)
where 3 at /var/scratch2/tomas/tmp/RtmpvHLm63/R.INSTALLf57d33033697/ExtDist/R/bestDist.R#35: lapply(paste0("e", candDist), do.call, args = list(X, w))
where 4: bestDist(X, candDist = c("Laplace", "Normal", "Beta_ab"), criterion = "logLik")

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function (currently evaluated)--- 
function(X,w, method =c("analytic.MLE","numerical.MLE"),...){
    n<-length(X)
    if(missing(w)){
      w <- rep(1,n)
    } else {
      w <- n*w/sum(w)
    }
    
    if(method == "analytic.MLE") {
      
      mu <- median(X, na.rm=T)
      b <- mean(abs(X-mu))
      est.par <- list(mu=mu, b=b) 
      est.par.se <- rep(NA, length(est.par))
    } else{
      method == "numerical.MLE"  
      
      est.par <- wmle(X=X, w=w, distname="Laplace",
                      initial=list(mu=0, b=1),
                      lower=list(mu=-Inf, b=0),
                      upper=list(mu=Inf, b=Inf))
      
      est.par.se <- try(sqrt(diag(solve(attributes(est.par)$nll.hessian))),silent=TRUE)
      if(class(est.par.se) == "try-error") {
        est.par.se <- rep(NA, length(est.par))
      } 
    } 
    
    attributes(est.par)$ob <- X
    attributes(est.par)$weights <- w
    attributes(est.par)$distname <- "Laplace"
    
    attributes(est.par)$method <- method
    attributes(est.par)$par.name <- c("mu","b")
    attributes(est.par)$par.type <- c("location", "scale")
    attributes(est.par)$par.vals <- c(est.par$mu, est.par$b)
    attributes(est.par)$par.s.e <-  est.par.se  
    
    class(est.par) <- "eDist"
    
    return(est.par)
  }
<bytecode: 0x9b5dbb8>
<environment: namespace:ExtDist>
 --- function (body) search ---
Function eLaplace in namespace ExtDist has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
