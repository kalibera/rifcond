
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "seacarb"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('seacarb')
Loading required package: oce
Loading required package: gsw
Loading required package: testthat
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("K0")
> ### * K0
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K0
> ### Title: Henry's constant mol/(kg/atm)
> ### Aliases: K0
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K0(S=35,T=25,P=0)
[1] 0.02839188
attr(,"unit")
[1] "mol/kg"
> 
> 
> 
> cleanEx()
> nameEx("K1")
> ### * K1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K1
> ### Title: First dissociation constant of carbonic acid (mol/kg)
> ### Aliases: K1
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K1(S=35,T=25,P=0,k1k2="l",pHscale="T")
[1] 1.421828e-06
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
attr(,"method")
[1] "Luecker et al. (2000)"
> 
> 
> 
> cleanEx()
> nameEx("K1p")
> ### * K1p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K1p
> ### Title: First dissociation constant of phosphoric acid (mol/kg)
> ### Aliases: K1p
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K1p(35,25,0)
[1] 0.02408434
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("K2")
> ### * K2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K2
> ### Title: Second dissociation constant of carbonic acid (mol/kg)
> ### Aliases: K2
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K2(35,25,0)
[1] 1.081555e-09
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
attr(,"method")
[1] "Luecker et al. (2000)"
> 
> 
> 
> cleanEx()
> nameEx("K2p")
> ### * K2p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K2p
> ### Title: Second dissociation constant of phosphoric acid (mol/kg)
> ### Aliases: K2p
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K2p(35,25,0)
[1] 1.076024e-06
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("K2si")
> ### * K2si
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K2si
> ### Title: Second dissociation constant of Si(OH)4
> ### Aliases: K2si
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K2si(S=35, T=25, P=0, pHscale="T")
[1] 2.754382e-13
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("K3p")
> ### * K3p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: K3p
> ### Title: Third dissociation constant of phosphoric acid (mol/kg)
> ### Aliases: K3p
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   K3p(35,25,0)
[1] 1.600484e-09
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("Kb")
> ### * Kb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kb
> ### Title: Dissociation constant of boric acid (mol/kg)
> ### Aliases: Kb
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Kb(S=35,T=25,P=0,pHscale="T")
[1] 2.526573e-09
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("Kf")
> ### * Kf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kf
> ### Title: Equilibrium constant of hydrogen fluoride (mol/kg)
> ### Aliases: Kf
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Kf(S=35,T=25,P=0,kf="pf",pHscale="T")
[1] 0.002261098
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
attr(,"method")
[1] "Perez and Fraga (1987)"
> 
> 
> 
> cleanEx()
> nameEx("Khs")
> ### * Khs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Khs
> ### Title: Dissociation constant of hydrogen sulfide (mol/kg)
> ### Aliases: Khs
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Khs(S=35,T=25,P=0, pHscale="T")
[1] 3.087264e-07
attr(,"pH scale")
[1] "total scale"
attr(,"unit")
[1] "mol/kg-soln"
> 
> 
> 
> cleanEx()
> nameEx("Kn")
> ### * Kn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kn
> ### Title: Dissociation constant of ammonium (mol/kg)
> ### Aliases: Kn
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Kn(S=35,T=25,P=0, pHscale="T")
[1] 5.380823e-10
attr(,"pH scale")
[1] "total scale"
attr(,"unit")
[1] "mol/kg-soln"
> 
> 
> 
> cleanEx()
> nameEx("Ks")
> ### * Ks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ks
> ### Title: Stability constant of hydrogen sulfate (mol/kg)
> ### Aliases: Ks
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Ks(S=35,T=25,P=0, ks="d")
[1] 0.1003021
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "free scale"
attr(,"method")
[1] "Dickson (1990)"
> 
> 
> 
> cleanEx()
> nameEx("Ksi")
> ### * Ksi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ksi
> ### Title: Dissociation constant of Si(OH)4
> ### Aliases: Ksi
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Ksi(S=35, T=25, P=0, pHscale="T")
[1] 4.071935e-10
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("Kspa")
> ### * Kspa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kspa
> ### Title: Solubility product of aragonite (mol/kg)
> ### Aliases: Kspa
> ### Keywords: utilities
> 
> ### ** Examples
> 
> Kspa(S=35,T=25,P=0)
[1] 6.481759e-07
attr(,"pH scale")
[1] NA
attr(,"unit")
[1] "mol/kg"
> 
> 
> 
> cleanEx()
> nameEx("Kspc")
> ### * Kspc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kspc
> ### Title: Solubility product of calcite (mol/kg)
> ### Aliases: Kspc
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 	Kspc(S=35,T=25,P=0)
[1] 4.272351e-07
attr(,"pH scale")
[1] NA
attr(,"unit")
[1] "mol/kg"
> 
> 
> 
> cleanEx()
> nameEx("Kw")
> ### * Kw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kw
> ### Title: Ion product of water (mol2/kg2)
> ### Aliases: Kw
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   Kw(S=35,T=25,P=0,pHscale="T")
[1] 5.97496e-14
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "total scale"
> 
> 
> 
> cleanEx()
> nameEx("Om")
> ### * Om
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Om
> ### Title: Carbonate saturation state for magnesian calcites
> ### Aliases: Om
> ### Keywords: utilities
> 
> ### ** Examples
> 
> Om(x=seq(0.01, 0.252, 0.01), flag=8, var1=8.2, var2=0.00234, 
+   k1k2='x', kf='x', ks="d", pHscale="T", b="u74")
$OmegaMgCa_biogenic
 [1] 6.2453408 6.4463694 6.3874080 6.1013595 5.6423905 5.0731335 4.4535685
 [8] 3.8335465 3.2493476 2.7235572 2.2670641 1.8820022 1.5647594 1.3085435
[15] 1.1053097 0.9470592 0.8266270 0.7381142 0.6771127 0.6408612 0.6284557
[22] 0.6412612 0.6837339 0.7650205 0.9020590

$OmegaMgCa_biogenic_cleaned
 [1] 5.047183 5.356744 5.501165 5.518277 5.448038 5.325220 5.176420 5.019847
 [9] 4.866494 4.721766 4.587062 4.461169 4.341417 4.224651 4.108074 3.989965
[17] 3.870282 3.751140 3.637140 3.535635 3.457050 3.415552 3.430569 3.530049
[25] 3.757261

> 
> 
> 
> cleanEx()
> nameEx("Pcorrect")
> ### * Pcorrect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pcorrect
> ### Title: Pressure correction of equilibrium constants
> ### Aliases: Pcorrect
> ### Keywords: utilities
> 
> ### ** Examples
> 
> k10 <- K1(T=25, P=0, S=35)
> Pcorrect(Kvalue=k10, Ktype="K1", P=300, T=25, S=35, pHscale="T")
[1] 1.864187e-06
attr(,"unit")
[1] "mol/kg-soln"
attr(,"pH scale")
[1] "Total scale"
attr(,"method")
[1] "Luecker et al. (2000)"
> 
> 
> 
> cleanEx()
> nameEx("amp")
> ### * amp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: amp
> ### Title: pH value of the AMP buffer
> ### Aliases: amp
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 	##Example from Dickson et al. (2007)
> 	amp(S=35,T=25)
[1] 6.78658
attr(,"unit")
[1] "mol/kg"
> 
> 
> 
> cleanEx()
> nameEx("at")
> ### * at
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: at
> ### Title: Calculates total alkalinity from potentiometric titration data
> ### Aliases: at
> ### Keywords: utilities
> 
> ### ** Examples
> 
> data(alkalinity)
> data <- alkalinity
> AT <- at(S=data$S[1], T=data$temperature, C=data$normality[1], pHTris=data$pHTris[1],
+       ETris=data$ETris[1], E=data$E, weight=data$weight[1], volume=data$volume)
> 
> 
> 
> cleanEx()
> nameEx("bjerrum")
> ### * bjerrum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bjerrum
> ### Title: Bjerrum plot
> ### Aliases: bjerrum
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Plot the bjerrum plot for the carbonate system using the default values
> bjerrum(K1(),K2(),main="DIC speciation",lwd=2) 
> abline(v=-log10(K1()),col="grey")
> mtext(side=3,at=-log10(K1()),"pK1")
> abline(v=-log10(K2()),col="grey")
> mtext(side=3,at=-log10(K2()),"pK2")
> legend("left",lty=1:3,lwd=2,legend=c(expression(CO[2]),expression(HCO[3]^"-"),
+ 	expression(CO[3]^"2-")))
> 
> ## Plot the bjerrum plot for phosphate using the default values
> bjerrum(K1p(),K2p(),K3p(),main="phosphate speciation",lwd=2)
> legend("left",lty=1:4,lwd=2,legend=c(expression(H[3]~PO[4]),
+ 	expression(H[2]~PO[4]^"-"),
+ expression(HPO[4]^"2-"),expression(PO[4]^"3-")))
> 
> ## Plot the bjerrum plot for the carbonate system using the values other 
> ##	than the default ones, showing the effect of temperature
> bjerrum(K1(T=25,S=35),K2(T=25,S=35),conc=1.3,main="effect of temperature" )
> bjerrum(K1(T=0,S=35),K2(T=0,S=35),conc=1.3,add=TRUE,col="red")
> legend("left",lty=1,col=c("black","red"),legend=c("T=25 oC","T=0 oC"))
> legend("right",lty=1:3,legend=c(expression(CO[2]),expression(HCO[3]^"-"),
+ 	expression(CO[3]^"2-")))
> 
> ## Plot the bjerrum plot for the carbonate system using the values other 
> ##	than the default ones, showing the effect of salinity
> bjerrum(K1(T=25,S=35),K2(T=25,S=35),conc=1.3,main="effect of salinity" )
> bjerrum(K1(T=25,S=5),K2(T=25,S=5),conc=1.3,add=TRUE,col="blue")
> legend("left",lty=1,col=c("black","blue"),legend=c("S=35","S=5"))
> legend("right",lty=1:3,legend=c(expression(CO[2]),expression(HCO[3]^"-"),
+ 	expression(CO[3]^"2-")))
> 
> ## Plot the bjerrum plot for the carbonate system using the values other 
> ##	than the default ones, showing the effect of pressure
> bjerrum(K1(P=0),K2(P=0),conc=1.3,main="effect of pressure" )
> bjerrum(K1(P=300),K2(P=300),conc=1.3,add=TRUE,col="green")
> legend("left",lty=1,col=c("black","green"),legend=c("P=0","P=300"),title="atm")
> legend("right",lty=1:3,legend=c(expression(CO[2]),expression(HCO[3]^"-"),
+ 	expression(CO[3]^"2-")))
> 
> 
> 
> cleanEx()
> nameEx("bor")
> ### * bor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bor
> ### Title: Total boron concentration (mol/kg)
> ### Aliases: bor
> ### Keywords: utilities
> 
> ### ** Examples
> 
> bor(35, "l10")
[1] 0.000432522431
attr(,"unit")
[1] "mol/kg"
attr(,"method")
[1] "Lee et al. (2010)"
> 
> 
> 
> cleanEx()
> nameEx("buffer")
> ### * buffer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: buffer
> ### Title: Buffer parameters of the seawater carbonate system
> ### Aliases: buffer
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Computation with a couple of variables
> buffer(flag=8, var1=8.2, var2=0.00234, S=35, T=25, Patm=1, P=0, Pt=0, 
+ 	Sit=0, pHscale="T", kf="pf", k1k2="l", b="u74")
         PhiD      BetaD        PiD        PhiB     BetaB         PiB
1 -1437.87483 8.32249715 1.10643345 -178.795824 1.9105326 0.253995543
        PhiC       BetaC          PiC        PhiH         PiH
1 1080.28318 -4.50143194 -0.598442365 -1259.07901 0.852437908
> 
> ## Using vectors as arguments
> flag <- c(8, 2, 8)
> var1 <- c(8.2, 7.477544e-06, 8.2)
> var2 <- c(0.002343955, 0.001649802, 2400e-6)
> S <- c(35, 35, 30)
> T <- c(25, 25, 30)
> P <- c(0, 0, 0)
> Pt <- c(0, 0, 0)
> Sit <- c(0, 0, 0)
> kf <- c("pf", "pf", "pf")
> k1k2 <- c("l", "l", "l")
> pHscale <- c("T", "T", "T")
> b <- c("l10", "l10", "l10")
> buffer(flag=flag, var1=var1, var2=var2, S=S, T=T, P=P, Pt=Pt, 
+ 	Sit=Sit, kf=kf, k1k2=k1k2, pHscale=pHscale, b=b)
         PhiD      BetaD        PiD        PhiB      BetaB         PiB
1 -1424.08537 8.24945760 1.09672322 -177.081143 1.90145033 0.252788102
2 -1439.90019 8.30595500 1.13116454 -176.043468 1.89323251 0.257833986
3 -1397.73639 8.32559296 1.15345143 -182.221394 1.95502970 0.270855398
        PhiC       BetaC          PiC        PhiH         PiH
1 1069.92309 -4.44655693 -0.591147013 -1247.00423 0.843935115
2 1087.81325 -4.51948998 -0.615496571 -1263.85672 0.873330557
3 1033.29360 -4.41553357 -0.611740631 -1215.51499 0.882596029
> 
> 
> ## Test for all flags 
> 
> flag <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25)
> 
> var1 <- c(8.200000, 7.477544e-06, 7.477544e-06, 7.477544e-06, 7.477544e-06, 8.2, 
+ 	8.2, 8.2, 8.2, 0.001685024, 0.001685024, 0.001685024,  0.0002888382, 
+ 	0.0002888382, 0.002391252, 264.2008, 264.2008, 264.2008, 264.2008, 264.2008)
> 
> var2 <- c(7.477544e-06, 0.001685024, 0.0002888382, 0.002391252, 0.001981340, 
+ 	0.001685024, 0.0002888382, 0.002391252, 0.001981340, 0.0002888382, 0.002391252,
+ 	0.001981340,  0.002391252, 0.001981340, 0.001981340, 8.2, 0.001685024, 
+ 	0.0002888382, 0.002391252, 0.001981340)
> 
> buffer(flag=flag, var1=var1, var2=var2)
          PhiD      BetaD        PiD        PhiB      BetaB         PiB
1  -1414.17564 8.36793992 1.11247483 -175.848894 1.91618329 0.254746773
2  -1414.17560 8.36793991 1.11247481 -175.848892 1.91618330 0.254746768
3  -1414.17555 8.36793990 1.11247477 -175.848890 1.91618332 0.254746763
4  -1414.02704 8.36789823 1.11236867 -175.841527 1.91623600 0.254730739
5  -1414.17537 8.36793985 1.11247465 -175.848881 1.91618338 0.254746744
6  -1414.17561 8.36793996 1.11247484 -175.848891 1.91618329 0.254746773
7  -1414.17554 8.36794010 1.11247486 -175.848882 1.91618331 0.254746776
8  -1414.06945 8.36814354 1.11250190 -175.835689 1.91620861 0.254750139
9  -1414.17547 8.36794024 1.11247488 -175.848873 1.91618333 0.254746778
10 -1414.17555 8.36793978 1.11247473 -175.848894 1.91618332 0.254746757
11 -1413.88434 8.36707278 1.11192039 -175.861177 1.91632820 0.254665456
12 -1414.17479 8.36793750 1.11247326 -175.848926 1.91618371 0.254746542
13 -1414.14763 8.36859576 1.11274753 -175.824929 1.91615812 0.254785901
14 -1414.17552 8.36794046 1.11247501 -175.848869 1.91618330 0.254746797
15 -1413.71531 8.36609502 1.11138947 -175.884463 1.91643746 0.254588121
16 -1414.37605 8.36755563 1.11242375 -175.873815 1.91613550 0.254740420
17 -1414.01227 8.36745366 1.11216390 -175.855781 1.91626455 0.254701173
18 -1414.19408 8.36750462 1.11229377 -175.864794 1.91620005 0.254720788
19 -1413.94702 8.36743536 1.11211729 -175.852545 1.91628770 0.254694132
20 -1414.05728 8.36746627 1.11219605 -175.858012 1.91624858 0.254706028
         PhiC       BetaC          PiC        PhiH         PiH
1  1062.47785 -4.53557334 -0.602981290 -1238.32674 0.857728062
2  1062.47781 -4.53557330 -0.602981270 -1238.32670 0.857728038
3  1062.47777 -4.53557326 -0.602981246 -1238.32666 0.857728010
4  1062.34398 -4.53542623 -0.602907195 -1238.18551 0.857637934
5  1062.47761 -4.53557308 -0.602981158 -1238.32649 0.857727902
6  1062.47783 -4.53557337 -0.602981294 -1238.32672 0.857728067
7  1062.47778 -4.53557348 -0.602981308 -1238.32666 0.857728084
8  1062.39807 -4.53572632 -0.603001628 -1238.23376 0.857751766
9  1062.47772 -4.53557358 -0.602981322 -1238.32660 0.857728100
10 1062.47777 -4.53557314 -0.602981213 -1238.32666 0.857727970
11 1062.16198 -4.53441638 -0.602589480 -1238.02316 0.857254936
12 1062.47693 -4.53557009 -0.602980180 -1238.32586 0.857726722
13 1062.49777 -4.53627952 -0.603175728 -1238.32270 0.857961629
14 1062.47779 -4.53557386 -0.602981414 -1238.32666 0.857728211
15 1061.94638 -4.53322010 -0.602213225 -1237.83084 0.856801346
16 1062.62842 -4.53528463 -0.602942906 -1238.50223 0.857683326
17 1062.30071 -4.53492456 -0.602761559 -1238.15649 0.857462732
18 1062.46449 -4.53510453 -0.602852194 -1238.32929 0.857572982
19 1062.24193 -4.53485996 -0.602729028 -1238.09447 0.857423160
20 1062.34125 -4.53496911 -0.602783994 -1238.19927 0.857490022
> 
> 
> 
> 
> cleanEx()
> nameEx("buffergen")
> ### * buffergen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: buffergen
> ### Title: Buffer factors of the seawater carbonate system as defined by
> ###   Hagens and Middelburg (2016)
> ### Aliases: buffergen
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## With a couple of variables
> buffergen(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
+ 	pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", gas="potential", NH4t=0, HSt=0)
$Carbfull
  flag  S  T Patm P  pH            CO2      fCO2       pCO2    fCO2pot
1    8 35 25    1 0 8.2 7.30893975e-06 257.43062 258.254583 257.469615
     pCO2pot fCO2insitu pCO2insitu          HCO3            CO3           DIC
1 258.293642  257.43062 258.254584 0.00164702991 0.000282325427 0.00193666428
      ALK OmegaAragonite OmegaCalcite NH4 NH3           BOH3           BOH4
1 0.00234     4.48064722   6.79777392   0   0 0.000296827611 0.000118860115
  H3PO4 H2PO4 HPO4 PO4 H2S HS SiOH4 SiOOH3 SiO2OH2             HF
1     0     0    0   0   0  0     0      0       0 1.90658096e-10
               F           HSO4          SO4              H             OH NH4t
1 6.83242105e-05 1.77617005e-09 0.0282354324 6.30957344e-09 9.46967305e-06    0
             BOR Pt HSt Sit           FLUO           ST
1 0.000415687725  0   0   0 6.83244011e-05 0.0282354341

$dALK.dH
         CO2         HCO3          CO3          NH4          NH3         BOH3 
-454972.0168 -104444.2380  246083.5407           NA           NA  -60053.9350 
        BOH4        H3PO4        H2PO4         HPO4          PO4          H2S 
 -41215.8763           NA           NA           NA           NA           NA 
          HS        SiOH4       SiOOH3      SiO2OH2           HF            F 
          NA           NA           NA           NA  -54667.4847  -54667.5150 
        HSO4          SO4         NH4t          BOR          DIC           Pt 
 -54667.7360  -54668.0175           NA  -60053.9350 -454972.0168           NA 
         HSt          Sit         FLUO           ST 
          NA           NA  -54667.5150  -54668.0175 

$dtotX.dH
            CO2            HCO3             CO3             NH4             NH3 
-3.50527779e+05 -4.35871759e+04  2.63353427e+05              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-1.88380587e+04  4.70440059e+04              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA -1.08286576e+04  3.02172719e-02 -4.47501445e+06  2.81503981e-01 
           NH4t             BOR             DIC              Pt             HSt 
             NA -1.88380587e+04 -3.50527779e+05              NA              NA 
            Sit            FLUO              ST 
             NA  3.02172719e-02  2.81503981e-01 

$dALK.dX
            CO2            HCO3             CO3             NH4             NH3 
 3.02599398e+02  1.34282975e+00  7.83379941e+00              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 4.00434833e-01  1.00000000e+00              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA -1.00000000e+00 -2.79049103e-06 -1.00000000e+00 -6.29057145e-08 
           NH4t             BOR             DIC              Pt             HSt 
             NA  4.00434833e-01  3.02599398e+02              NA              NA 
            Sit            FLUO              ST 
             NA -2.79049103e-06 -6.29057145e-08 

$dtotX.dX
           CO2           HCO3            CO3            NH4            NH3 
2.64971986e+02 1.17585252e+00 6.85968776e+00             NA             NA 
          BOH3           BOH4          H3PO4          H2PO4           HPO4 
1.40043483e+00 3.49728524e+00             NA             NA             NA 
           PO4            H2S             HS          SiOH4         SiOOH3 
            NA             NA             NA             NA             NA 
       SiO2OH2             HF              F           HSO4            SO4 
            NA 3.58360869e+05 1.00000279e+00 1.58968080e+07 1.00000006e+00 
          NH4t            BOR            DIC             Pt            HSt 
            NA 1.40043483e+00 2.64971986e+02             NA             NA 
           Sit           FLUO             ST 
            NA 1.00000279e+00 1.00000006e+00 

$dALK.dpH
            CO2            HCO3             CO3             NH4             NH3 
 0.006609983491  0.001517400332 -0.003575182828              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 0.000872483371  0.000598797842              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA  0.000794227245  0.000794227684  0.000794230896  0.000794234986 
           NH4t             BOR             DIC              Pt             HSt 
             NA  0.000872483371  0.006609983491              NA              NA 
            Sit            FLUO              ST 
             NA  0.000794227684  0.000794234986 

$dtotX.dpH
            CO2            HCO3             CO3             NH4             NH3 
 5.09258316e-03  6.33248864e-04 -3.82608543e-03              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 2.73685528e-04 -6.83470832e-04              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA  1.57322309e-04 -4.39006490e-10  6.50144856e-02 -4.08978267e-09 
           NH4t             BOR             DIC              Pt             HSt 
             NA  2.73685528e-04  5.09258316e-03              NA              NA 
            Sit            FLUO              ST 
             NA -4.39006490e-10 -4.08978267e-09 

$dH.dALK
            CO2            HCO3             CO3             NH4             NH3 
-1.82924193e-05 -1.82924193e-05 -1.82924193e-05              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-1.82924193e-05 -1.82924193e-05              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA -1.82923991e-05 -1.82923991e-05 -1.82922309e-05 -1.82922309e-05 
           NH4t             BOR             DIC              Pt             HSt 
             NA -1.82924193e-05 -1.82924193e-05              NA              NA 
            Sit            FLUO              ST 
             NA -1.82923991e-05 -1.82922309e-05 

$dH.dtotX
            CO2            HCO3             CO3             NH4             NH3 
 2.08900388e-05  2.08900388e-05  2.08900388e-05              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 5.23046249e-06  5.23046249e-06              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA -5.10446330e-11 -5.10446330e-11 -1.15068578e-12 -1.15068578e-12 
           NH4t             BOR             DIC              Pt             HSt 
             NA  5.23046249e-06  2.08900388e-05              NA              NA 
            Sit            FLUO              ST 
             NA -5.10446330e-11 -1.15068578e-12 

$dX.dALK
            CO2            HCO3             CO3             NH4             NH3 
-2.41987888e-02 -6.78073892e-01  7.02272680e-01              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-2.46061909e-01  2.46061909e-01              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA -5.52744854e-07  5.52744854e-07 -5.14933551e-06  5.14933551e-06 
           NH4t             BOR             DIC              Pt             HSt 
             NA -2.46061909e-01 -2.41987888e-02              NA              NA 
            Sit            FLUO              ST 
             NA  5.52744854e-07  5.14933551e-06 

$dX.dtotX
            CO2            HCO3             CO3             NH4             NH3 
 3.14091276e-02  1.62481073e+00 -6.56219855e-01              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 7.84421905e-01  2.15578095e-01              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA  2.79048170e-06  9.99997210e-01  6.29053866e-08  9.99999937e-01 
           NH4t             BOR             DIC              Pt             HSt 
             NA  7.84421905e-01  3.14091276e-02              NA              NA 
            Sit            FLUO              ST 
             NA  9.99997210e-01  9.99999937e-01 

$dpH.dALK
       CO2       HCO3        CO3        NH4        NH3       BOH3       BOH4 
1259.08619 1259.08619 1259.08619         NA         NA 1259.08619 1259.08619 
     H3PO4      H2PO4       HPO4        PO4        H2S         HS      SiOH4 
        NA         NA         NA         NA         NA         NA         NA 
    SiOOH3    SiO2OH2         HF          F       HSO4        SO4       NH4t 
        NA         NA 1259.08479 1259.08479 1259.07322 1259.07322         NA 
       BOR        DIC         Pt        HSt        Sit       FLUO         ST 
1259.08619 1259.08619         NA         NA         NA 1259.08479 1259.07322 

$dpH.dtotX
            CO2            HCO3             CO3             NH4             NH3 
-1.43788303e+03 -1.43788303e+03 -1.43788303e+03              NA              NA 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-3.60018156e+02 -3.60018156e+02              NA              NA              NA 
            PO4             H2S              HS           SiOH4          SiOOH3 
             NA              NA              NA              NA              NA 
        SiO2OH2              HF               F            HSO4             SO4 
             NA  3.51345501e-03  3.51345501e-03  7.92028954e-05  7.92028954e-05 
           NH4t             BOR             DIC              Pt             HSt 
             NA -3.60018156e+02 -1.43788303e+03              NA              NA 
            Sit            FLUO              ST 
             NA  3.51345501e-03  7.92028954e-05 

$beta.H
[1] -54667.4545

$RF
[1] 8.3225389

> 
> ## With a couple of variables and non-zero nutrient concentrations
> buffergen(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=5e-6, Sit=2e-6,
+ 	pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", gas="potential", NH4t=10e-6, HSt=0.1e-6)
$Carbfull
  flag  S  T Patm P  pH            CO2      fCO2       pCO2    fCO2pot
1    8 35 25    1 0 8.2 7.28584408e-06 256.61716 257.438518 256.656032
     pCO2pot fCO2insitu pCO2insitu          HCO3            CO3           DIC
1 257.477454  256.61716 257.438519 0.00164182543 0.000281433301 0.00193054457
      ALK OmegaAragonite OmegaCalcite           NH4          NH3           BOH3
1 0.00234     4.46648873    6.7762935 9.2142095e-06 7.857905e-07 0.000296827611
            BOH4          H3PO4         H2PO4           HPO4            PO4
1 0.000118860115 6.09827489e-15 2.3277791e-08 3.96975529e-06 1.00696691e-06
             H2S             HS          SiOH4        SiOOH3        SiO2OH2
1 2.00281024e-09 9.79971898e-08 1.87874816e-06 1.2124655e-07 5.29289754e-12
              HF              F           HSO4          SO4              H
1 1.90658096e-10 6.83242105e-05 1.77617005e-09 0.0282354324 6.30957344e-09
              OH  NH4t            BOR    Pt   HSt   Sit           FLUO
1 9.46967305e-06 1e-05 0.000415687725 5e-06 1e-07 2e-06 6.83244011e-05
            ST
1 0.0282354341

$dALK.dH
         CO2         HCO3          CO3          NH4          NH3         BOH3 
-453847.3216 -104427.1825  244992.9566  -54817.4759  -54692.9365  -60194.1701 
        BOH4        H3PO4        H2PO4         HPO4          PO4          H2S 
 -41356.1115  -56890.9678  -55942.6170  -54994.2661  -54045.9153  -54822.9101 
          HS        SiOH4       SiOOH3      SiO2OH2           HF            F 
 -54807.3786  -54808.8548  -54789.6369  -54770.4189  -54807.7199  -54807.7501 
        HSO4          SO4         NH4t          BOR          DIC           Pt 
 -54807.9712  -54808.2527  -54817.4759  -60194.1701 -453847.3216  -55942.6170 
         HSt          Sit         FLUO           ST 
 -54822.9101  -54808.8548  -54807.7501  -54808.2527 

$dtotX.dH
            CO2            HCO3             CO3             NH4             NH3 
-3.49420139e+05 -4.34494439e+04  2.62521251e+05 -1.24539401e+02  1.46035379e+03 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-1.88380587e+04  4.70440059e+04 -1.74079741e+03 -9.48350813e+02 -1.55904217e+02 
            PO4             H2S              HS           SiOH4          SiOOH3 
 6.36542379e+02 -1.55315079e+01  3.17424031e-01 -1.92179609e+01  2.97760678e+02 
        SiO2OH2              HF               F            HSO4             SO4 
 6.14739316e+02 -1.08286576e+04  3.02172719e-02 -4.47501445e+06  2.81503981e-01 
           NH4t             BOR             DIC              Pt             HSt 
-1.24539401e+02 -1.88380587e+04 -3.49420139e+05 -9.48350813e+02 -1.55315079e+01 
            Sit            FLUO              ST 
-1.92179609e+01  3.02172719e-02  2.81503981e-01 

$dALK.dX
            CO2            HCO3             CO3             NH4             NH3 
 3.02599398e+02  1.34282975e+00  7.83379941e+00  8.52802945e-02  1.00000000e+00 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 4.00434833e-01  1.00000000e+00  9.81210132e+08  2.57055711e+02  1.50731938e+00 
            PO4             H2S              HS           SiOH4          SiOOH3 
 5.94228971e+00  4.89298426e+01  1.00000000e+00  6.45414531e-02  1.00008731e+00 
        SiO2OH2              HF               F            HSO4             SO4 
 2.29094055e+04 -1.00000000e+00 -2.79049103e-06 -1.00000000e+00 -6.29057145e-08 
           NH4t             BOR             DIC              Pt             HSt 
 8.52802945e-02  4.00434833e-01  3.02599398e+02  2.57055711e+02  4.89298426e+01 
            Sit            FLUO              ST 
 6.45414531e-02 -2.79049103e-06 -6.29057145e-08 

$dtotX.dX
           CO2           HCO3            CO3            NH4            NH3 
2.64971986e+02 1.17585252e+00 6.85968776e+00 1.08528029e+00 1.27260383e+01 
          BOH3           BOH4          H3PO4          H2PO4           HPO4 
1.40043483e+00 3.49728524e+00 8.19904005e+08 2.14797014e+02 1.25952348e+00 
           PO4            H2S             HS          SiOH4         SiOOH3 
4.96540646e+00 4.99298426e+01 1.02043743e+00 1.06453864e+00 1.64953147e+01 
       SiO2OH2             HF              F           HSO4            SO4 
3.77864862e+05 3.58360869e+05 1.00000279e+00 1.58968080e+07 1.00000006e+00 
          NH4t            BOR            DIC             Pt            HSt 
1.08528029e+00 1.40043483e+00 2.64971986e+02 2.14797014e+02 4.99298426e+01 
           Sit           FLUO             ST 
1.06453864e+00 1.00000279e+00 1.00000006e+00 

$dALK.dpH
            CO2            HCO3             CO3             NH4             NH3 
 0.006593643548  0.001517152544 -0.003559338461  0.000796406366  0.000794597016 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 0.000874520753  0.000600835225  0.000826530740  0.000812752787  0.000798974833 
            PO4             H2S              HS           SiOH4          SiOOH3 
 0.000785196880  0.000796485316  0.000796259669  0.000796281116  0.000796001912 
        SiO2OH2              HF               F            HSO4             SO4 
 0.000795722707  0.000796264628  0.000796265067  0.000796268278  0.000796272368 
           NH4t             BOR             DIC              Pt             HSt 
 0.000796406366  0.000874520753  0.006593643548  0.000812752787  0.000796485316 
            Sit            FLUO              ST 
 0.000796281116  0.000796265067  0.000796272368 

$dtotX.dpH
            CO2            HCO3             CO3             NH4             NH3 
 5.07649100e-03  6.31247849e-04 -3.81399531e-03  1.80934949e-06 -2.12165014e-05 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 2.73685528e-04 -6.83470832e-04  2.52908788e-05  1.37779533e-05  2.26502787e-06 
            PO4             H2S              HS           SiOH4          SiOOH3 
-9.24789759e-06  2.25646868e-07 -4.61164100e-09  2.79204874e-07 -4.32596531e-06 
        SiO2OH2              HF               F            HSO4             SO4 
-8.93113550e-06  1.57322309e-04 -4.39006490e-10  6.50144856e-02 -4.08978267e-09 
           NH4t             BOR             DIC              Pt             HSt 
 1.80934949e-06  2.73685528e-04  5.07649100e-03  1.37779533e-05  2.25646868e-07 
            Sit            FLUO              ST 
 2.79204874e-07 -4.39006490e-10 -4.08978267e-09 

$dH.dALK
            CO2            HCO3             CO3             NH4             NH3 
-1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 
            PO4             H2S              HS           SiOH4          SiOOH3 
-1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 
        SiO2OH2              HF               F            HSO4             SO4 
-1.82456149e-05 -1.82455948e-05 -1.82455948e-05 -1.82454275e-05 -1.82454275e-05 
           NH4t             BOR             DIC              Pt             HSt 
-1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 -1.82456149e-05 
            Sit            FLUO              ST 
-1.82456149e-05 -1.82455948e-05 -1.82454275e-05 

$dH.dtotX
            CO2            HCO3             CO3             NH4             NH3 
 2.08365880e-05  2.08365880e-05  2.08365880e-05  1.43372309e-06  1.43372309e-06 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 5.21707943e-06  5.21707943e-06  2.18352174e-05  2.18352174e-05  2.18352174e-05 
            PO4             H2S              HS           SiOH4          SiOOH3 
 2.18352174e-05  1.78801899e-05  1.78801899e-05  1.10620550e-06  1.10620550e-06 
        SiO2OH2              HF               F            HSO4             SO4 
 1.10620550e-06 -5.09140265e-11 -5.09140265e-11 -1.14774158e-12 -1.14774158e-12 
           NH4t             BOR             DIC              Pt             HSt 
 1.43372309e-06  5.21707943e-06  2.08365880e-05  2.18352174e-05  1.78801899e-05 
            Sit            FLUO              ST 
 1.10620550e-06 -5.09140265e-11 -1.14774158e-12 

$dX.dALK
            CO2            HCO3             CO3             NH4             NH3 
-2.40606013e-02 -6.74201743e-01  6.98262345e-01 -2.09374294e-03  2.09374294e-03 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-2.45432316e-01  2.45432316e-01 -3.87385828e-11 -8.05562582e-05 -2.25844802e-03 
            PO4             H2S              HS           SiOH4          SiOOH3 
 2.33900431e-03 -5.67560195e-06  5.67560195e-06 -3.29385429e-04  3.29355745e-04 
        SiO2OH2              HF               F            HSO4             SO4 
 2.96833549e-08 -5.51330560e-07  5.51330560e-07 -5.13616016e-06  5.13616016e-06 
           NH4t             BOR             DIC              Pt             HSt 
-2.09374294e-03 -2.45432316e-01 -2.40606013e-02 -8.05562582e-05 -5.67560195e-06 
            Sit            FLUO              ST 
-3.29385429e-04  5.51330560e-07  5.13616016e-06 

$dX.dtotX
            CO2            HCO3             CO3             NH4             NH3 
 3.12513168e-02  1.62038871e+00 -6.51640031e-01  9.21585474e-01  7.84145257e-02 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
 7.84241881e-01  2.15758119e-01  1.26601490e-09  4.75196291e-03  7.96653829e-01 
            PO4             H2S              HS           SiOH4          SiOOH3 
 1.98594207e-01  2.00336643e-02  9.79966336e-01  9.39394049e-01  6.06033067e-02 
        SiO2OH2              HF               F            HSO4             SO4 
 2.64464911e-06  2.79048170e-06  9.99997210e-01  6.29053874e-08  9.99999937e-01 
           NH4t             BOR             DIC              Pt             HSt 
 9.21585474e-01  7.84241881e-01  3.12513168e-02  4.75196291e-03  2.00336643e-02 
            Sit            FLUO              ST 
 9.39394049e-01  9.99997210e-01  9.99999937e-01 

$dpH.dALK
       CO2       HCO3        CO3        NH4        NH3       BOH3       BOH4 
1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 
     H3PO4      H2PO4       HPO4        PO4        H2S         HS      SiOH4 
1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 
    SiOOH3    SiO2OH2         HF          F       HSO4        SO4       NH4t 
1255.86459 1255.86459 1255.86321 1255.86321 1255.85169 1255.85169 1255.86459 
       BOR        DIC         Pt        HSt        Sit       FLUO         ST 
1255.86459 1255.86459 1255.86459 1255.86459 1255.86459 1255.86321 1255.85169 

$dpH.dtotX
            CO2            HCO3             CO3             NH4             NH3 
-1.43420395e+03 -1.43420395e+03 -1.43420395e+03 -9.86846465e+01 -9.86846465e+01 
           BOH3            BOH4           H3PO4           H2PO4            HPO4 
-3.59096986e+02 -3.59096986e+02 -1.50294066e+03 -1.50294066e+03 -1.50294066e+03 
            PO4             H2S              HS           SiOH4          SiOOH3 
-1.50294066e+03 -1.23071201e+03 -1.23071201e+03 -7.61412718e+01 -7.61412718e+01 
        SiO2OH2              HF               F            HSO4             SO4 
-7.61412718e+01  3.50446523e-03  3.50446523e-03  7.90002429e-05  7.90002429e-05 
           NH4t             BOR             DIC              Pt             HSt 
-9.86846465e+01 -3.59096986e+02 -1.43420395e+03 -1.50294066e+03 -1.23071201e+03 
            Sit            FLUO              ST 
-7.61412718e+01  3.50446523e-03  7.90002429e-05 

$beta.H
[1] -54807.6897

$RF
[1] 8.28072346

> 
> ## Using vectors as arguments
> flag <- c(8, 2, 8)
> var1 <- c(8.2, 7.477544e-06, 8.2)
> var2 <- c(0.002343955, 0.001649802, 2400e-6)
> S <- c(35, 35, 30)
> T <- c(25, 25, 30)
> P <- c(0, 0, 0)
> Pt <- c(0, 0, 0)
> Sit <- c(0, 0, 0)
> kf <- c("pf", "pf", "pf")
> k1k2 <- c("l", "l", "l")
> pHscale <- c("T", "T", "T")
> b <- c("l10", "l10", "l10")
> gas <- c("potential", "potential", "potential")
> NH4t <- c(0, 0, 0)
> HSt <- c(0, 0, 0)
> buffergen(flag=flag, var1=var1, var2=var2, S=S, T=T, P=P, Pt=Pt, Sit=Sit, 
+   kf=kf, k1k2=k1k2, pHscale=pHscale, b=b, gas=gas, NH4t=NH4t, HSt=HSt)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpAATgyc/R.INSTALL7e0076a99dd2/seacarb/R/carbfull.R#758: 
 --- if/while statement is in package --- 
seacarb
 --- call (currently evaluated) --- 
carbfull(flag = flag, var1 = var1, var2 = var2, S = S, T = T, 
    Patm = Patm, P = P, Pt = Pt, Sit = Sit, k1k2 = k1k2, kf = kf, 
    ks = ks, pHscale = pHscale, b = b, gas = gas, NH4t = NH4t, 
    HSt = HSt)
 --- R stacktrace ---
where 1: carbfull(flag = flag, var1 = var1, var2 = var2, S = S, T = T, 
    Patm = Patm, P = P, Pt = Pt, Sit = Sit, k1k2 = k1k2, kf = kf, 
    ks = ks, pHscale = pHscale, b = b, gas = gas, NH4t = NH4t, 
    HSt = HSt)
where 2: buffergen(flag = flag, var1 = var1, var2 = var2, S = S, T = T, 
    P = P, Pt = Pt, Sit = Sit, kf = kf, k1k2 = k1k2, pHscale = pHscale, 
    b = b, gas = gas, NH4t = NH4t, HSt = HSt)

 --- value of length: 3 type: logical ---
[1] FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(flag, var1, var2, S=35, T=25, Patm=1, P=0, Pt=0, Sit=0, k1k2='x', kf='x', ks="d", pHscale="T", b="u74", gas="potential",
         NH4t = 0, HSt = 0){
    n <- max(length(var1), length(var2), length(S), length(T), length(P), length(Pt), length(Sit), length(k1k2), length(kf), length(pHscale), length(ks), length(b),
             length(gas), length(NH4t), length(HSt))
    if(length(flag)!=n){flag <- rep(flag[1],n)}
    if(length(var1)!=n){var1 <- rep(var1[1],n)}
    if(length(var2)!=n){var2 <- rep(var2[1],n)}
    if(length(S)!=n){S <- rep(S[1],n)}
    if(length(T)!=n){T <- rep(T[1],n)}
    if(length(Patm)!=n){Patm <- rep(Patm[1],n)}
    if(length(P)!=n){P <- rep(P[1],n)}
    if(length(Pt)!=n){Pt <- rep(Pt[1],n)}
    if(length(Sit)!=n){Sit <- rep(Sit[1],n)}
    if(length(k1k2)!=n){k1k2 <- rep(k1k2[1],n)}
    if(length(kf)!=n){kf <- rep(kf[1],n)}
    if(length(ks)!=n){ks <- rep(ks[1],n)}
    if(length(pHscale)!=n){pHscale <- rep(pHscale[1],n)}
    if(length(b)!=n){b <- rep(b[1],n)}
    #if(length(gas)!=n){gas <- rep(gas[1],n)}
    if(length(NH4t)!=n){NH4t <- rep(NH4t[1],n)}
    if(length(HSt)!=n){HSt <- rep(HSt[1],n)}
    
    # if the concentrations of total silicate, total phosphate, total nitrite,
    # total ammonium, and total hydrogen sulfide are NA, they are set at 0
    Sit[is.na(Sit)] <- 0
    Pt[is.na(Pt)] <- 0
    NH4t[is.na(NH4t)] <- 0
    HSt[is.na(HSt)] <- 0
    
    #-------Constants----------------   
    tk = 273.15;           # [K] (for conversion [deg C] <-> [K])  
    TK = T + tk;           # TK [K]; T[C]
    
    #---- issues de equic----
    Cl = S / 1.80655;             # Cl = chlorinity; S = salinity (per mille)
    ST = 0.14 * Cl/96.062         # (mol/kg) total sulfate  (Dickson et al., 2007, Table 2)
    FLUO = 6.7e-5 * Cl/18.9984    # (mol/kg) total fluoride (Dickson et al., 2007, Table 2)
    BOR = bor(S=S , b=b);         # (mol/kg) total boron

    #---------------------------------------------------------------------
    #--------------------- compute K's ----------------------------------
    #---------------------------------------------------------------------
    
    # Ks (free pH scale) at zero pressure and given pressure
    Ks_P0 <- Ks(S=S, T=T, P=0, ks=ks)
    Ks    <- Ks(S=S, T=T, P=P, ks=ks)
    
    # Kf on free pH scale
    Kff_P0 <- Kf(S=S, T=T, P=0, pHscale="F", kf=kf, Ks_P0, Ks)
    Kff <- Kf(S=S, T=T, P=P, pHscale="F", kf=kf, Ks_P0, Ks)
    # Kf on given pH scale
    Kf <- Kf(S=S, T=T, P=P, pHscale=pHscale, kf=kf, Ks_P0, Ks)
    
    # Conversion factor from total to SWS pH scale at zero pressure
    ktotal2SWS_P0 <- kconv(S=S,T=T,P=P,kf=kf,Ks=Ks_P0,Kff=Kff_P0)$ktotal2SWS

    # Conversion factor from SWS to chosen pH scale
    conv <- kconv(S=S,T=T,P=P,kf=kf,Ks=Ks,Kff=Kff)
    kSWS2chosen <- rep(1.,n)
    kSWS2chosen [pHscale == "T"] <- conv$kSWS2total [pHscale == "T"]
    kSWS2chosen [pHscale == "F"] <- conv$kSWS2free [pHscale == "F"]  

    K1 <- K1(S=S, T=T, P=P, pHscale=pHscale, k1k2=k1k2, kSWS2chosen, ktotal2SWS_P0)   
    K2 <- K2(S=S, T=T, P=P, pHscale=pHscale, k1k2=k1k2, kSWS2chosen, ktotal2SWS_P0)
    Kw <- Kw(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
    Kb <- Kb(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen, ktotal2SWS_P0)
    K1p <- K1p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
    K2p <- K2p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
    K3p <- K3p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
    Ksi <- Ksi(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
    Kspa <- Kspa(S=S, T=T, P=P)
    Kspc <- Kspc(S=S, T=T, P=P)
    # Newly added
    Kn <- Kn(S=S, T=T, P=P, pHscale=pHscale)
    Khs <- Khs(S=S, T=T, P=P, pHscale=pHscale)
    K2si <- K2si(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen, ktotal2SWS_P0)
    
    rho <- rho(S=S,T=T,P=P)

    # Compute "standard" K0 with S, in situ T, and atmospheric pressure
    K0 <- K0(S=S, T=T, Patm=Patm, P=0)                         
    # Compute potential K0 with S, potential temperature, and atmospheric pressure (usually 1 atm)
    K0pot <- K0(S=S, T=theta(S=S, T=T, P=P, Pref=0), Patm=Patm, P=0)
    # Compute in situ K0 with S, in situ temperature, and total pressure pressure (atmospheric + hydrostatic)
    K0insitu <- K0(S=S, T=T, Patm=Patm, P=P)
 
    #------------------------------------------------------------------#
    #------------------------------------------------------------------#
    #                            VARIABLES                             #
    #------------------------------------------------------------------#
    #------------------------------------------------------------------#
    
    # flag = 1      pH-CO2 given
    # flag = 2      CO2-HCO3 given
    # flag = 3      CO2-CO3 given
    # flag = 4      CO2-ALK given
    # flag = 5      CO2-DIC given
    # flag = 6      pH and HCO3 given
    # flag = 7      pH and CO3 given
    # flag = 8      pH and ALK given
    # flag = 9      pH and DIC given
    # flag = 10     HCO3 and CO3 given
    # flag = 11     HCO3 and ALK given
    # flag = 12     HCO3 and DIC given
    # flag = 13     CO3 and ALK given
    # flag = 14     CO3 and DIC given
    # flag = 15     ALK and DIC given
    # flag = 21     pCO2-pH given
    # flag = 22     pCO2-HCO3 given
    # flag = 23     pCO2-CO3 given
    # flag = 24     pCO2-ALK given
    # flag = 25     pCO2-DIC given
    
    # Initialise output vectors
    H   <- rep(NA, n)
    PH   <- rep(NA, n)
    CO2  <- rep(NA, n)
    pCO2 <- rep(NA, n)
    fCO2 <- rep(NA, n)
    HCO3 <- rep(NA, n)
    CO3  <- rep(NA, n)
    DIC  <- rep(NA, n)
    ALK  <- rep(NA, n)

    # ------------ case 1.) PH and CO2 given
    # Indices of flag elements where flag = 1
    i_flag_1 <- which (flag == 1)     
    PH[i_flag_1]   <- var1[i_flag_1]
    CO2[i_flag_1]  <- var2[i_flag_1]
    h <- 10^(-PH[i_flag_1])
    fCO2[i_flag_1] <- CO2[i_flag_1] / K0[i_flag_1]
    HCO3[i_flag_1] <- (K1[i_flag_1] * CO2[i_flag_1]) / h
    CO3[i_flag_1]  <- (K2[i_flag_1] * HCO3[i_flag_1]) / h
    DIC[i_flag_1]  <- CO2[i_flag_1] + HCO3[i_flag_1] + CO3[i_flag_1]
    H[i_flag_1] <- h
    
    # ------------ case 2.) CO2 and HCO3 given 
    # Indices of flag elements where flag = 2
    i_flag_2 <- which (flag == 2)     
    CO2[i_flag_2]  <- var1[i_flag_2]
    HCO3[i_flag_2] <- var2[i_flag_2]
    fCO2[i_flag_2] <- CO2[i_flag_2] / K0[i_flag_2]
    h <- K0[i_flag_2] * K1[i_flag_2] * fCO2[i_flag_2] / HCO3[i_flag_2]
    CO3[i_flag_2]  <- K0[i_flag_2] * K1[i_flag_2] * K2[i_flag_2] * fCO2[i_flag_2] / (h^2)
    DIC[i_flag_2]  <- CO2[i_flag_2] + HCO3[i_flag_2] + CO3[i_flag_2]
    PH[i_flag_2]   <- -log10(h)
    H[i_flag_2] <- h

    # ------------ case 3.) CO2 and CO3 given
    # Indices of flag elements where flag = 3
    i_flag_3 <- which (flag == 3)     
    CO2[i_flag_3]  <- var1[i_flag_3]
    CO3[i_flag_3]  <- var2[i_flag_3]
    fCO2[i_flag_3] <- CO2[i_flag_3] / K0[i_flag_3]
    k1co2 <- K1[i_flag_3] * CO2[i_flag_3]
    h <- sqrt((K2[i_flag_3]*k1co2) / CO3[i_flag_3])
    HCO3[i_flag_3] <- k1co2 / h
    DIC[i_flag_3]  <- CO2[i_flag_3] + HCO3[i_flag_3] + CO3[i_flag_3]
    PH[i_flag_3]   <- -log10(h)
    H[i_flag_3] <- h

    # ------------ case 4.) CO2 and ALK given
    # Indices of flag elements where flag = 4
    i_flag_4 <- which (flag == 4)     
    CO2[i_flag_4] <- var1[i_flag_4]
    ALK[i_flag_4] <- var2[i_flag_4]
    
    fALK <- function(x)# K1=K1, K2=K2, CO2=CO2, BOR=BOR, Kb=Kb, Kw=Kw, Pt=Pt, K1p=K1p, K2p=K2p, K3p=K3p, Sit=Sit, Ksi=Ksi, ST=ST, Ks=Ks, FLUO=FLUO, Kf=Kf, ALK=ALK) 
    {
        # components for ALK
        dic <- co2*(1+K1_i/x+K1_i*K2_i/(x*x))
        hco3 <- dic*x*K1_i/(x*x + K1_i*x + K1_i*K2_i)
        co3 <- dic*K1_i*K2_i/(x*x + K1_i*x + K1_i*K2_i)
        boh4 <- bor/(1+x/Kb_i)
        oh <- Kw_i/x
        h3po4 <- Pt_i*x^3/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        hpo4 <- Pt_i*K1p_i*K2p_i*x/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        po4 <- Pt_i*K1p_i*K2p_i*K3p_i/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        # adapted to include second dissociation constant of silicate
        siooh3 <- Sit_i*x*Ksi_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        # newly added
        sio2oh2 <- Sit_i*Ksi_i*K2si_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        nh3 <- NH4t_i/(1+x/Kn_i)
        hs <- HSt_i/(1+x/Khs_i)
    
        ## calculate Hfree and Htot
        if(phs=="F")
        {
            hfree <- x  ## if pHscale = free scale
            htot <- x / (1+st/Ks_i) 
        }
        else if(phs=="T")
        {
            hfree <- x * (1+st/Ks_i)
            htot <- x
        }
        else if(phs=="SWS")
        {
            hfree <- x * (1 + st/Ks_i + fluo/Kff_i)
            htot <- hfree / (1+st/Ks_i)
        }
        
        hso4 <- st/(1+Ks_i/hfree)
        hf <- fluo/(1+Kf_i/htot)
        
        ############
        # adapted
        OUT <- hco3+2*co3+boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4-alk
        OUT
    }

    # Calculate [H+] from [CO2] and total alk
    h <- rep(NA, length(i_flag_4))
    j <- 1 
    for(i in (i_flag_4))
    {
        # Parameters used by function fAlk defined above and called below through uniroot()
        K1_i <- K1[i]
        K2_i <- K2[i]
        K1p_i <- K1p[i]
        K2p_i <- K2p[i]
        K3p_i <- K3p[i]
        Kb_i  <- Kb[i]
        Kw_i  <- Kw[i]
        Ksi_i <- Ksi[i]
        ### newly added
        K2si_i <- K2si[i]
        Kn_i <- Kn[i]
        Khs_i <- Khs[i]
        ### end of newly added
        Ks_i  <- Ks[i]
        Kf_i  <- Kf[i]
        Kff_i <- Kff[i]
        Sit_i <- Sit[i]
        ### newly added
        NH4t_i <- NH4t[i]
        HSt_i <- HSt[i]
        ### end of newly added
        Pt_i  <- Pt[i]
        co2   <- CO2[i]
        alk   <- ALK[i]
        st    <- ST[i]
        bor   <- BOR[i]
        fluo  <- FLUO[i]
        phs   <- pHscale[i]
        # Calculate [H+] from total alk
        h[j] <- uniroot(fALK,c(10^(-9.5),10^(-3.5)), tol=1e-20)$root
        j <- j + 1
    }   
    
    DIC[i_flag_4]  <- CO2[i_flag_4] * (1+K1[i_flag_4]/h + K1[i_flag_4]*K2[i_flag_4]/(h*h))
    temp <- h*h + K1[i_flag_4]*h + K1[i_flag_4]*K2[i_flag_4]
    HCO3[i_flag_4] <- (DIC[i_flag_4]*K1[i_flag_4]*h) / temp
    CO3[i_flag_4]  <- (DIC[i_flag_4]*K1[i_flag_4]*K2[i_flag_4]) / temp
    fCO2[i_flag_4] <- CO2[i_flag_4] / K0[i_flag_4]
    PH[i_flag_4]   <- -log10(h)
    H[i_flag_4] <- h

    # ------------ case 5.) CO2 and DIC given
    # Indices of flag elements where flag = 5
    i_flag_5 <- which (flag == 5)     
    CO2[i_flag_5]  <- var1[i_flag_5]
    DIC[i_flag_5]  <- var2[i_flag_5]
    fCO2[i_flag_5] <- CO2[i_flag_5] / K0[i_flag_5]
    a <- K1[i_flag_5] * K2[i_flag_5] * CO2[i_flag_5]
    b <- K1[i_flag_5] * CO2[i_flag_5]
    c <- CO2[i_flag_5] - DIC[i_flag_5]
    D <- b*b - 4*a*c
    h <- (2*a) / (sqrt(D)-b)
    HCO3[i_flag_5] <- K0[i_flag_5] * K1[i_flag_5] * fCO2[i_flag_5] / h
    CO3[i_flag_5] <- DIC[i_flag_5] - CO2[i_flag_5] - HCO3[i_flag_5]
    PH[i_flag_5] <- -log10(h)
    H[i_flag_5] <- h

    # ------------ case 6.) PH and HCO3 given
    # Indices of flag elements where flag = 6
    i_flag_6 <- which (flag == 6)     
    PH[i_flag_6] <- var1[i_flag_6]
    HCO3[i_flag_6] <- var2[i_flag_6]
    h <- 10^(-PH[i_flag_6])
    CO2[i_flag_6] <- (HCO3[i_flag_6] * h)/K1[i_flag_6]
    CO3[i_flag_6] <- K2[i_flag_6] * HCO3[i_flag_6] /h
    DIC[i_flag_6] <- CO2[i_flag_6] + HCO3[i_flag_6] + CO3[i_flag_6]
    fCO2[i_flag_6] <- CO2[i_flag_6]/K0[i_flag_6]
    H[i_flag_6] <- h

    # ------------ case 7.) PH and CO3 given    
    # Indices of flag elements where flag = 7
    i_flag_7 <- which (flag == 7)     
    PH[i_flag_7] <- var1[i_flag_7]
    CO3[i_flag_7] <- var2[i_flag_7]
    h <- 10^(-PH[i_flag_7])
    HCO3[i_flag_7] <- CO3[i_flag_7] * h/K2[i_flag_7]
    CO2[i_flag_7]  <- HCO3[i_flag_7] * h/K1[i_flag_7]
    fCO2[i_flag_7] <- CO2[i_flag_7]/K0[i_flag_7]
    DIC[i_flag_7]  <- CO2[i_flag_7] + HCO3[i_flag_7] + CO3[i_flag_7]
    H[i_flag_7] <- h

    # ------------ case 8.) PH and ALK given

    # Indices of flag elements where flag = 8
    i_flag_8 <- which (flag == 8)     
    PH[i_flag_8]  <- var1[i_flag_8]
    ALK[i_flag_8] <- var2[i_flag_8] 
    h <- 10^(-PH[i_flag_8])
    H[i_flag_8] <- h

    ## calculate Hfree anf Htot
    hfree <- rep(NA, length(i_flag_8))
    htot  <- rep(NA, length(i_flag_8))    
    sc <- pHscale[i_flag_8] 
    st <- ST[i_flag_8]
    ks  <- Ks[i_flag_8]
    fluo <- FLUO[i_flag_8]
    kff  <- Kff[i_flag_8]
    
    # Where pHscale=="F", pHscale = free scale
    i_sc_F <- which (sc == "F") 
    hfree[i_sc_F] <- h[i_sc_F]  
    htot[i_sc_F]  <- h[i_sc_F] / (1+st[i_sc_F]/ks[i_sc_F]) 
    # Where pHscale=="T", pHscale = total scale
    i_sc_T <- which (sc == "T") 
    hfree[i_sc_T] <- h[i_sc_T] * (1+st[i_sc_T]/ks[i_sc_T])
    htot[i_sc_T]  <- h[i_sc_T]
    # Where pHscale=="SWS", pHscale = SW scale
    i_sc_S <- which (sc == "SWS") 
    hfree[i_sc_S] <- h[i_sc_S] * (1 + st[i_sc_S]/ks[i_sc_S] + fluo[i_sc_S]/kff[i_sc_S])
    htot[i_sc_S]  <- hfree[i_sc_S] / (1+st[i_sc_S]/ks[i_sc_S])

    # Calculate some invariable components of total alkalinity
    boh4   <- BOR[i_flag_8] / (1+h/Kb[i_flag_8])
    oh     <- Kw[i_flag_8]/h
    temp   <- (h^3 + K1p[i_flag_8]*h^2 + K1p[i_flag_8]*K2p[i_flag_8]*h +
              K1p[i_flag_8]*K2p[i_flag_8]*K3p[i_flag_8]) 
    h3po4  <- Pt[i_flag_8]*h^3 / temp
    hpo4   <- Pt[i_flag_8]*K1p[i_flag_8]*K2p[i_flag_8]*h / temp
    po4    <- Pt[i_flag_8]*K1p[i_flag_8]*K2p[i_flag_8]*K3p[i_flag_8] / temp
    # adapted to include second dissociation constant of silicate
    siooh3 <- Sit[i_flag_8]*h*Ksi[i_flag_8] / 
      (h*h + Ksi[i_flag_8]*h + Ksi[i_flag_8]*K2si[i_flag_8])
    ### newly added
    sio2oh2 <- Sit[i_flag_8]*Ksi[i_flag_8]*K2si[i_flag_8] / 
      (h*h + Ksi[i_flag_8]*h + Ksi[i_flag_8]*K2si[i_flag_8])
    nh3 <- NH4t[i_flag_8]/(1+h/Kn[i_flag_8])
    hs <- HSt[i_flag_8]/(1+h/Khs[i_flag_8])
    ### end of newly added
    hso4   <- st/(1+ks/hfree)
    hf     <- fluo / (1+Kf[i_flag_8]/htot)

    # Sum of these components (partial alkalinity)
    alk_p <- boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4

    # As [HCO3-] and  [CO3--] are both linearly dependent on DIC
    #    hco3  = co2*K1/h = DIC/(1+K1/h+K1*K2/(h^2)) * K1/h
    #   2*co3  = 2*hco3*K2/h = DIC/(1+K1/h+K1*K2/(h^2)) * 2*K1*K2/h^2
    # carbonate alk ([HCO3-] + 2*[CO3--]) is also linearly dependent on DIC
    # Calculate DIC from carbonate alk (total alk - partial alk)
    temp <- h*h + K1[i_flag_8]*h + K1[i_flag_8]*K2[i_flag_8]
    DIC[i_flag_8] <- (ALK[i_flag_8]-alk_p) * temp / 
         (h*K1[i_flag_8] + 2*K1[i_flag_8]*K2[i_flag_8])

    CO2[i_flag_8]  <- DIC[i_flag_8] / 
        (1 + K1[i_flag_8]/h + K1[i_flag_8]*K2[i_flag_8]/(h^2))
    HCO3[i_flag_8] <- CO2[i_flag_8]*K1[i_flag_8]/h
    CO3[i_flag_8]  <- HCO3[i_flag_8]*K2[i_flag_8]/h
    fCO2[i_flag_8] <- CO2[i_flag_8]/K0[i_flag_8]
    
    # ------------ case 9.) PH and DIC given
    # Indices of flag elements where flag = 9
    i_flag_9 <- which (flag == 9)     
    PH[i_flag_9]  <- var1[i_flag_9]
    DIC[i_flag_9] <- var2[i_flag_9]
    h <- 10^(-PH[i_flag_9])
    H[i_flag_9] <- h
    temp <- h*h + K1[i_flag_9]*h + K1[i_flag_9]*K2[i_flag_9]
    HCO3[i_flag_9] <- (DIC[i_flag_9]*K1[i_flag_9]*h) / temp
    CO3[i_flag_9]  <- (DIC[i_flag_9]*K1[i_flag_9]*K2[i_flag_9]) / temp
    CO2[i_flag_9]  <- h*HCO3[i_flag_9]/K1[i_flag_9]
    fCO2[i_flag_9] <- CO2[i_flag_9]/K0[i_flag_9]
    
    # ------------ case 10.) HCO3 and CO3 given 
    # Indices of flag elements where flag = 10
    i_flag_10 <- which (flag == 10)     
    HCO3[i_flag_10] <- var1[i_flag_10]
    CO3[i_flag_10]  <- var2[i_flag_10]
    h <- K2[i_flag_10]*HCO3[i_flag_10]/CO3[i_flag_10]
    CO2[i_flag_10]  <- h*HCO3[i_flag_10]/K1[i_flag_10]
    DIC[i_flag_10]  <- CO2[i_flag_10] + HCO3[i_flag_10] + CO3[i_flag_10]
    fCO2[i_flag_10] <- CO2[i_flag_10]/K0[i_flag_10]
    PH[i_flag_10] <- -log10(h)
    H[i_flag_10] <- h

    # ------------ case 11.) HCO3 and ALK given
    # Indices of flag elements where flag = 11
    i_flag_11 <- which (flag == 11)     
    HCO3[i_flag_11] <- var1[i_flag_11]
    ALK[i_flag_11]  <- var2[i_flag_11]
    
    fALK <- function(x)# K1=K1, K2=K2, HCO3=HCO3, BOR=BOR, Kb=Kb, Kw=Kw, Pt=Pt, K1p=K1p, K2p=K2p, K3p=K3p, Sit=Sit, Ksi=Ksi, ST=ST, Ks=Ks, FLUO=FLUO, Kf=Kf, ALK=ALK) {
    {
        # components for ALK
        dic <- hco3*(x^2 + K1_i*x + K1_i*K2_i) / (K1_i*x)
        co3 <- dic*K1_i*K2_i / (x*x + K1_i*x + K1_i*K2_i)
        boh4 <- bor / (1+x/Kb_i)
        oh <- Kw_i/x
        h3po4 <- Pt_i*x^3 / (x^3 + K1p_i*x^2 + K1p_i*K2p_i*x + K1p_i*K2p_i*K3p_i)
        hpo4 <- Pt_i*K1p_i*K2p_i*x/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        po4 <- Pt_i*K1p_i*K2p_i*K3p_i/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        # adapted to include second dissociation constant of silicate
        siooh3 <- Sit_i*x*Ksi_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        # newly added
        sio2oh2 <- Sit_i*Ksi_i*K2si_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        nh3 <- NH4t_i/(1+x/Kn_i)
        hs <- HSt_i/(1+x/Khs_i)
    
        ## calculate Hfree and Htot
        if(phs=="F")
        {
            hfree <- x  ## if pHscale = free scale
            htot <- x / (1+st/Ks_i) 
        }
        else if(phs=="T")
        {
            hfree <- x * (1+st/Ks_i)
            htot <- x
        }
        else if(phs=="SWS")
        {
            hfree <- x * (1 + st/Ks_i + fluo/Kff_i)
            htot <- hfree / (1+st/Ks_i)
        }
        
        hso4 <- st/(1+Ks_i/hfree)
        hf <- fluo/(1+Kf_i/htot)

        ############
        OUT <- hco3+2*co3+boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4-alk
        OUT
    }

    # Calculate [H+] from [HCO3] and total alk
    h <- rep(NA, length(i_flag_11))
    j <- 1 
    for(i in (i_flag_11))
    {
        # Parameters used by function fAlk defined above and called below through uniroot()
        K1_i <- K1[i]
        K2_i <- K2[i]
        K1p_i <- K1p[i]
        K2p_i <- K2p[i]
        K3p_i <- K3p[i]
        Kb_i  <- Kb[i]
        Kw_i  <- Kw[i]
        Ksi_i <- Ksi[i]
        ### newly added
        K2si_i <- K2si[i]
        Kn_i <- Kn[i]
        Khs_i <- Khs[i]
        ### end of newly added
        Ks_i  <- Ks[i]
        Kf_i  <- Kf[i]
        Kff_i <- Kff[i]
        Sit_i <- Sit[i]
        ### newly added
        NH4t_i <- NH4t[i]
        HSt_i <- HSt[i]
        ### end of newly added
        Pt_i  <- Pt[i]
        hco3  <- HCO3[i]
        alk   <- ALK[i]
        st    <- ST[i]
        bor   <- BOR[i]
        fluo  <- FLUO[i]
        phs   <- pHscale[i]
        # Calculate [H+] from total alk
        h[j] <- uniroot(fALK,c(10^(-9.5),10^(-3)), tol=1e-20)$root
        j <- j + 1
    }   
 
    CO2[i_flag_11] <- h*HCO3[i_flag_11]/K1[i_flag_11]
    CO3[i_flag_11] <- K2[i_flag_11]*HCO3[i_flag_11]/h
    DIC[i_flag_11] <- CO2[i_flag_11] + HCO3[i_flag_11] + CO3[i_flag_11]
    PH[i_flag_11] <- -log10(h)
    H[i_flag_11] <- h
    fCO2[i_flag_11] <- CO2[i_flag_11]/K0[i_flag_11]

    # ------------ case 12.) HCO3 and DIC given
    # Indices of flag elements where flag = 12
    i_flag_12 <- which (flag == 12)     
    HCO3[i_flag_12] <- var1[i_flag_12]
    DIC[i_flag_12]  <- var2[i_flag_12]
    a <- HCO3[i_flag_12]
    b <- K1[i_flag_12]*(HCO3[i_flag_12]-DIC[i_flag_12])
    c <- K1[i_flag_12]*K2[i_flag_12]*HCO3[i_flag_12]
    D <- b*b - 4*a*c
    h <- (-b-sqrt(D))/(2*a)
    CO2[i_flag_12]  <- h*HCO3[i_flag_12]/K1[i_flag_12]
    CO3[i_flag_12]  <- K2[i_flag_12]*HCO3[i_flag_12]/h
    fCO2[i_flag_12] <- CO2[i_flag_12]/K0[i_flag_12]
    PH[i_flag_12] <- -log10(h)
    H[i_flag_12] <- h

    # ------------ case 13.) CO3 and ALK given
    # Indices of flag elements where flag = 13
    i_flag_13 <- which (flag == 13)     
    CO3[i_flag_13] <- var1[i_flag_13]
    ALK[i_flag_13] <- var2[i_flag_13]
    
    fALK <- function(x)# K1=K1, K2=K2, HCO3=HCO3, BOR=BOR, Kb=Kb, Kw=Kw, Pt=Pt, K1p=K1p, K2p=K2p, K3p=K3p, Sit=Sit, Ksi=Ksi, ST=ST, Ks=Ks, FLUO=FLUO, Kf=Kf, ALK=ALK) {
    {
        # composants for ALK
        dic <- co3*(x^2 + K1_i*x + K1_i*K2_i)/(K1_i*K2_i)
        hco3 <- dic*K1_i*x/(x*x + K1_i*x + K1_i*K2_i)
        boh4 <- bor/(1+x/Kb_i)
        oh <- Kw_i/x
        h3po4 <- Pt_i*x^3 / (x^3 + K1p_i*x^2 + K1p_i*K2p_i*x + K1p_i*K2p_i*K3p_i)
        hpo4 <- Pt_i*K1p_i*K2p_i*x/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        po4 <- Pt_i*K1p_i*K2p_i*K3p_i/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        # adapted to include second dissociation constant of silicate
        siooh3 <- Sit_i*x*Ksi_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        # newly added
        sio2oh2 <- Sit_i*Ksi_i*K2si_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        nh3 <- NH4t_i/(1+x/Kn_i)
        hs <- HSt_i/(1+x/Khs_i)

        ## calculate Hfree and Htot
        if(phs=="F")
        {
            hfree <- x  ## if pHscale = free scale
            htot <- x / (1+st/Ks_i) 
        }
        else if(phs=="T")
        {
            hfree <- x * (1+st/Ks_i)
            htot <- x
        }
        else if(phs=="SWS")
        {
            hfree <- x * (1 + st/Ks_i + fluo/Kff_i)
            htot <- hfree / (1+st/Ks_i)
        }
        
        hso4 <- st/(1+Ks_i/hfree)
        hf <- fluo/(1+Kf_i/htot)
    
        ############
        OUT <- hco3+2*co3+boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4-alk
        OUT
    }

    # Calculate [H+] from [CO3] and total alk
    h <- rep(NA, length(i_flag_13))
    j <- 1 
    for(i in (i_flag_13))
    {
        # Parameters used by function fAlk defined above and called below through uniroot()
        K1_i <- K1[i]
        K2_i <- K2[i]
        K1p_i <- K1p[i]
        K2p_i <- K2p[i]
        K3p_i <- K3p[i]
        Kb_i  <- Kb[i]
        Kw_i  <- Kw[i]
        Ksi_i <- Ksi[i]
        ### newly added
        K2si_i <- K2si[i]
        Kn_i <- Kn[i]
        Khs_i <- Khs[i]
        ### end of newly added
        Ks_i  <- Ks[i]
        Kf_i  <- Kf[i]
        Kff_i <- Kff[i]
        Sit_i <- Sit[i]
        ### newly added
        NH4t_i <- NH4t[i]
        HSt_i <- HSt[i]
        ### end of newly added
        Pt_i  <- Pt[i]
        co3   <- CO3[i]
        alk   <- ALK[i]
        st    <- ST[i]
        bor   <- BOR[i]
        fluo  <- FLUO[i]
        phs   <- pHscale[i]
        # Calculate [H+] from total alk
        h[j] <- uniroot(fALK,c(10^(-9.5),10^(-3.5)), tol=1e-20)$root
        j <- j + 1
    }   
    
    HCO3[i_flag_13] <- h*CO3[i_flag_13]/K2[i_flag_13]
    CO2[i_flag_13]  <- h*HCO3[i_flag_13]/K1[i_flag_13]
    fCO2[i_flag_13] <- CO2[i_flag_13]/K0[i_flag_13]
    DIC[i_flag_13]  <- HCO3[i_flag_13] + CO2[i_flag_13] + CO3[i_flag_13]
    PH[i_flag_13] <- -log10(h)
    H[i_flag_13] <- h

    # ------------ case 14.) CO3 and DIC given
    # Indices of flag elements where flag = 14
    i_flag_14 <- which (flag == 14)     
    CO3[i_flag_14] <- var1[i_flag_14]
    DIC[i_flag_14] <- var2[i_flag_14]

    a <- CO3[i_flag_14]
    b <- K1[i_flag_14]*CO3[i_flag_14]
    c <- K1[i_flag_14] * K2[i_flag_14] * (CO3[i_flag_14]-DIC[i_flag_14])
    D <- b*b - 4*a*c
    h <- (-b+sqrt(D))/(2*a)
    HCO3[i_flag_14] <- h*CO3[i_flag_14]/K2[i_flag_14]
    CO2[i_flag_14]  <- h*HCO3[i_flag_14]/K1[i_flag_14]
    fCO2[i_flag_14] <- CO2[i_flag_14]/K0[i_flag_14]
    PH[i_flag_14] <- -log10(h)
    H[i_flag_14] <- h
    
    # ------------ case 15.) ALK and DIC given
    # Indices of flag elements where flag = 15
    i_flag_15 <- which (flag == 15)     
    ALK[i_flag_15] <- var1[i_flag_15]
    DIC[i_flag_15] <- var2[i_flag_15]

    fALK <- function(x) # K1=K1, K2=K2, DIC=DIC, BOR=BOR, Kb=Kb, Kw=Kw, Pt=Pt, K1p=K1p, K2p=K2p, K3p=K3p, Sit=Sit, Ksi=Ksi, ST=ST, Ks=Ks, FLUO=FLUO, Kf=Kf, ALK=ALK) {
    {
        # composants for ALK
        hco3 <- dic*x*K1_i/(x*x + K1_i*x + K1_i*K2_i)
        co3 <- dic*K1_i*K2_i/(x*x + K1_i*x + K1_i*K2_i)
        boh4 <- bor/(1+x/Kb_i)
        oh <- Kw_i/x
        h3po4 <- Pt_i*x^3 / (x^3 + K1p_i*x^2 + K1p_i*K2p_i*x + K1p_i*K2p_i*K3p_i)
        hpo4 <- Pt_i*K1p_i*K2p_i*x/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        po4 <- Pt_i*K1p_i*K2p_i*K3p_i/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        # adapted to include second dissociation constant of silicate
        siooh3 <- Sit_i*x*Ksi_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        # newly added
        sio2oh2 <- Sit_i*Ksi_i*K2si_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        nh3 <- NH4t_i/(1+x/Kn_i)
        hs <- HSt_i/(1+x/Khs_i)
        
        ## calculate Hfree and Htot
        if(phs=="F")
        {
            hfree <- x  ## if pHscale = free scale
            htot <- x / (1+st/Ks_i) 
        }
        else if(phs=="T")
        {
            hfree <- x * (1+st/Ks_i)
            htot <- x
        }
        else if(phs=="SWS")
        {
            hfree <- x * (1 + st/Ks_i + fluo/Kff_i)
            htot <- hfree / (1+st/Ks_i)
        }
        
        hso4 <- st/(1+Ks_i/hfree)
        hf <- fluo/(1+Kf_i/htot)
    
        ############
        OUT <- hco3+2*co3+boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4-alk
        OUT
    }

    # Calculate [H+] from DIC and total alk
    h <- rep(NA, length(i_flag_15))
    j <- 1 
    for(i in (i_flag_15))
    {
        # Parameters used by function fAlk defined above and called below through uniroot()
        K1_i <- K1[i]
        K2_i <- K2[i]
        K1p_i <- K1p[i]
        K2p_i <- K2p[i]
        K3p_i <- K3p[i]
        Kb_i  <- Kb[i]
        Kw_i  <- Kw[i]
        Ksi_i <- Ksi[i]
        ### newly added
        K2si_i <- K2si[i]
        Kn_i <- Kn[i]
        Khs_i <- Khs[i]
        ### end of newly added
        Ks_i  <- Ks[i]
        Kf_i  <- Kf[i]
        Kff_i <- Kff[i]
        Sit_i <- Sit[i]
        ### newly added
        NH4t_i <- NH4t[i]
        HSt_i <- HSt[i]
        ### end of newly added
        Pt_i  <- Pt[i]
        dic   <- DIC[i]
        alk   <- ALK[i]
        st    <- ST[i]
        bor   <- BOR[i]
        fluo  <- FLUO[i]
        phs   <- pHscale[i]
        # Calculate [H+] from total alk
        h[j] <- uniroot(fALK,c(1e-10,10^(-3.5)), tol=1e-30)$root
        j <- j + 1
    }   

    temp <- h*h + K1[i_flag_15]*h + K1[i_flag_15]*K2[i_flag_15]
    HCO3[i_flag_15] <- (DIC[i_flag_15]*K1[i_flag_15]*h) / temp 
    CO3[i_flag_15]  <- (DIC[i_flag_15]*K1[i_flag_15]*K2[i_flag_15]) / temp
    CO2[i_flag_15]  <- h*HCO3[i_flag_15]/K1[i_flag_15]
    fCO2[i_flag_15] <- CO2[i_flag_15]/K0[i_flag_15]
    PH[i_flag_15] <- -log10(h)
    H[i_flag_15] <- h

    #Initialize new 'potential' & "insitu' arrays (this are overwritten below with correct values)
    fCO2pot <- fCO2
    pCO2pot <- pCO2
    fCO2insitu <- fCO2
    pCO2insitu <- pCO2

    # ------------ Compute pCO2 for cases 1 to 15 (pCO2, pCO2insitu, & pCO2pot are NOT input variables) 
    # Indices of flag elements where 1 <= flag <= 15
    i_flag <- which (flag >= 1 & flag <= 15)
    # 1) Classic pCO2: compute from in situ T and surface P (Patm)
    tk <- TK[i_flag]
    B  <- -1636.75 + 12.0408*tk  - 0.0327957*(tk*tk)   + 0.0000316528*(tk*tk*tk);
    fugfac <- exp((Patm[i_flag])*(B + 2*((1-fCO2[i_flag])^2)*(57.7-0.118*tk))/(82.05736*tk))
    pCO2[i_flag]    <- fCO2[i_flag] / fugfac
    # 2) In-situ pCO2: compute from in situ T and total P (Patm + Phydrostatic)
    fCO2insitu[i_flag] <- fCO2[i_flag] * K0[i_flag] / K0insitu[i_flag]
    xCO2approx <- pCO2[i_flag]       #Results virtually insensitive to this (do not use fCO2insitu)
    fugfacinsitu <- exp((Patm[i_flag] + P[i_flag]/1.01325)*(B + 2*((1-xCO2approx)^2)*(57.7-0.118*tk))/(82.05736*tk))
    pCO2insitu[i_flag]    <- fCO2insitu[i_flag] / fugfacinsitu
    # 3) Potential pCO2: compute from potential T & surface P (Patm only)  
    tkp <- theta(S=S[i_flag], T=T[i_flag], P=P[i_flag], Pref=0) + 273.15       #Potential temperature in Kelvin 
    Bpot   <- -1636.75 + 12.0408*tkp - 0.0327957*(tkp*tkp) + 0.0000316528*(tkp*tkp*tkp);
    fCO2pot[i_flag] <- fCO2[i_flag] * K0[i_flag] / K0pot[i_flag]
    fugfacpot <- exp((Patm[i_flag])*(Bpot + 2*((1-fCO2pot[i_flag])^2)*(57.7-0.118*tkp))/(82.05736*tkp))
    pCO2pot[i_flag] <- fCO2pot[i_flag] / fugfacpot

    # ------------ Compute fCO2 for cases 21 to 25 (pCO2, pCO2pot or pCO2insitu is an input variable)
    # Indices of flag elements where 21 <= flag <= 25
    i_flag <- which (flag >= 21 & flag <= 25)

    tk    <- TK[i_flag]     
    tkp   <- theta(S=S[i_flag], T=T[i_flag], P=P[i_flag], Pref=0) + 273.15       #Potential temperature in Kelvin
    B     <- -1636.75 + 12.0408*tk  - 0.0327957*(tk*tk)   + 0.0000316528*(tk*tk*tk);
    Bpot  <- -1636.75 + 12.0408*tkp - 0.0327957*(tkp*tkp) + 0.0000316528*(tkp*tkp*tkp);

    if(gas=="insitu")
    {
      # From in situ pCO2 (in situ T, atm + hydro P), compute potential and standard fCO2 and pCO2
      # a) define input as pCO2insitu & compute fCO2insitu
      pCO2insitu[i_flag] <- var1[i_flag] * 1e-6
      # xCO2approx <- pCO2insitu[i_flag]  (this would be a very gross overestimate at say 5000 m)
      xCO2approx <- 0.    #This poor approximation has virtually no effect on computed result 
      fugfacinsitu <- exp((Patm[i_flag]+P[i_flag]/1.01325)*(B    + 2*((1-xCO2approx)^2)*(57.7-0.118*tk)) /(82.05736*tk))
      fCO2insitu[i_flag] <- pCO2insitu[i_flag] * fugfacinsitu
      # b) compute fCO2pot & fCO2
      fCO2pot[i_flag]    <- fCO2insitu[i_flag] * K0insitu[i_flag] / K0pot[i_flag]
      fCO2[i_flag]       <- fCO2insitu[i_flag] * K0insitu[i_flag] / K0[i_flag]
      # c) compute pCO2pot & pCO2
      fugfac       <- exp((Patm[i_flag])                  *(B    + 2*((1-fCO2[i_flag])^2)      *(57.7-0.118*tk)) /(82.05736*tk))
      fugfacpot    <- exp((Patm[i_flag])                  *(Bpot + 2*((1-fCO2pot[i_flag])^2)      *(57.7-0.118*tkp))/(82.05736*tkp))
      pCO2pot[i_flag] <- fCO2pot[i_flag] / fugfacpot
      pCO2[i_flag]    <- fCO2[i_flag]    / fugfac
    }
    else if(gas=="potential")
    {
      # From potential pCO2 (potential T, atm P), compute standard and in situ fCO2 and pCO2
      # a) define input as pCO2pot & compute fCO2pot
      pCO2pot[i_flag] <- var1[i_flag] * 1e-6
      fugfacpot <- exp((Patm[i_flag]                     )*(Bpot + 2*((1-pCO2pot[i_flag])^2)*(57.7-0.118*tkp))/(82.05736*tkp))
      fCO2pot[i_flag] <- pCO2pot[i_flag] * fugfacpot
      # b) compute fCO2 & fCO2insitu
      fCO2[i_flag]       <- fCO2pot[i_flag] * K0pot[i_flag] / K0[i_flag]
      fCO2insitu[i_flag] <- fCO2pot[i_flag] * K0pot[i_flag] / K0insitu[i_flag]
      # c) Compute pCO2 & pCO2insitu
      fugfac       <- exp((Patm[i_flag]                  )*(B    + 2*((1-fCO2[i_flag])^2)*(57.7-0.118*tk))/(82.05736*tk))
      fugfacinsitu <- exp((Patm[i_flag]+P[i_flag]/1.01325)*(B    + 2*((1-fCO2[i_flag])^2)*(57.7-0.118*tk))/(82.05736*tk))
      pCO2[i_flag]      <- fCO2[i_flag]      / fugfac
      pCO2insitu[i_flag] <- fCO2insitu[i_flag] / fugfacinsitu
    }
    else if(gas=="standard")
    {
      # From standard pCO2 (in situ T, atm P), compute potential and in situ fCO2 and pCO2
      # a) define input as pCO2 & compute fCO2
      pCO2[i_flag] <- var1[i_flag] * 1e-6
      fugfac <- exp((Patm[i_flag]                        )*(B    + 2*((1-pCO2[i_flag])^2)*(57.7-0.118*tk))/(82.05736*tk))
      fCO2[i_flag] <- pCO2[i_flag] * fugfac
      # b) compute fCO2pot & fCO2insitu
      fCO2pot[i_flag]    <- fCO2[i_flag] * K0[i_flag] / K0pot[i_flag]
      fCO2insitu[i_flag] <- fCO2[i_flag] * K0[i_flag] / K0insitu[i_flag]
      # c) Compute pCO2pot & pCO2insitu
      fugfacpot    <- exp((Patm[i_flag]                  )*(Bpot + 2*((1-pCO2[i_flag])^2)*(57.7-0.118*tkp))/(82.05736*tkp))
      fugfacinsitu <- exp((Patm[i_flag]+P[i_flag]/1.01325)*(B    + 2*((1-pCO2[i_flag])^2)*(57.7-0.118*tk))/(82.05736*tk))
      pCO2pot[i_flag]   <- fCO2pot[i_flag]   / fugfacpot
      pCO2insitu[i_flag] <- fCO2insitu[i_flag] / fugfacinsitu
    }

    # ------------ case 21.) PH and pCO2 given
    # Indices of flag elements where flag = 21
    i_flag_21 <- which (flag == 21)
    PH[i_flag_21] <- var2[i_flag_21]
    h <- 10^(-PH[i_flag_21])
    H[i_flag_21] <- h
    CO2[i_flag_21]  <- K0[i_flag_21]*fCO2[i_flag_21]
    HCO3[i_flag_21] <- K1[i_flag_21]*CO2[i_flag_21]/h
    CO3[i_flag_21]  <- K2[i_flag_21]*HCO3[i_flag_21]/h
    DIC[i_flag_21]  <- CO2[i_flag_21] + HCO3[i_flag_21] + CO3[i_flag_21]

    # ------------ case 22.) HCO3 and pCO2 given
    # Indices of flag elements where flag = 22
    i_flag_22 <- which (flag == 22)
    HCO3[i_flag_22] <- var2[i_flag_22]
    CO2[i_flag_22]  <- fCO2[i_flag_22]*K0[i_flag_22]
    h <- CO2[i_flag_22]*K1[i_flag_22]/HCO3[i_flag_22]
    CO3[i_flag_22]  <- HCO3[i_flag_22]*K2[i_flag_22]/h
    DIC[i_flag_22]  <- CO2[i_flag_22] + HCO3[i_flag_22] + CO3[i_flag_22]
    PH[i_flag_22] <- -log10(h)
    H[i_flag_22] <- h

    # ------------ case 23.) CO3 and pCO2 given
    # Indices of flag elements where flag = 23
    i_flag_23 <- which (flag == 23)
    CO3[i_flag_23] <- var2[i_flag_23]
    h <- sqrt(K0[i_flag_23]*K1[i_flag_23]*K2[i_flag_23]*fCO2[i_flag_23]/CO3[i_flag_23])
    HCO3[i_flag_23] <- h*CO3[i_flag_23]/K2[i_flag_23]
    CO2[i_flag_23]  <- h*HCO3[i_flag_23]/K1[i_flag_23]
    DIC[i_flag_23] <- CO2[i_flag_23] + HCO3[i_flag_23] + CO3[i_flag_23]
    PH[i_flag_23] <- -log10(h)
    H[i_flag_23] <- h

    # ------------ case 24.) ALK and pCO2 given
    # Indices of flag elements where flag = 24
    i_flag_24 <- which (flag == 24)
    ALK[i_flag_24] <- var2[i_flag_24]
    CO2[i_flag_24] <- fCO2[i_flag_24]*K0[i_flag_24]

    # From this line on, this case is similar to case 4
    fALK <- function(x)# K1=K1, K2=K2, CO2=CO2, BOR=BOR, Kb=Kb, Kw=Kw, Pt=Pt, K1p=K1p, K2p=K2p, K3p=K3p, Sit=Sit, Ksi=Ksi, ST=ST, Ks=Ks, FLUO=FLUO, Kf=Kf, ALK=ALK) 
    {
        # components for ALK
        dic <- co2*(1+K1_i/x+K1_i*K2_i/(x*x))
        hco3 <- dic*x*K1_i/(x*x + K1_i*x + K1_i*K2_i)
        co3 <- dic*K1_i*K2_i/(x*x + K1_i*x + K1_i*K2_i)
        boh4 <- bor/(1+x/Kb_i)
        oh <- Kw_i/x
        h3po4 <- Pt_i*x^3/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        hpo4 <- Pt_i*K1p_i*K2p_i*x/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        po4 <- Pt_i*K1p_i*K2p_i*K3p_i/(x^3+K1p_i*x^2+K1p_i*K2p_i*x+K1p_i*K2p_i*K3p_i)
        # adapted to include second dissociation constant of silicate
        siooh3 <- Sit_i*x*Ksi_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        # newly added
        sio2oh2 <- Sit_i*Ksi_i*K2si_i/(x*x + Ksi_i*x + Ksi_i*K2si_i)
        nh3 <- NH4t_i/(1+x/Kn_i)
        hs <- HSt_i/(1+x/Khs_i)
    
        ## calculate Hfree and Htot
        if(phs=="F")
        {
            hfree <- x  ## if pHscale = free scale
            htot <- x / (1+st/Ks_i) 
        }
        else if(phs=="T")
        {
            hfree <- x * (1+st/Ks_i)
            htot <- x
        }
        else if(phs=="SWS")
        {
            hfree <- x * (1 + st/Ks_i + fluo/Kff_i)
            htot <- hfree / (1+st/Ks_i)
        }
        
        hso4 <- st/(1+Ks_i/hfree)
        hf <- fluo/(1+Kf_i/htot)
        
        ############
        OUT <- hco3+2*co3+boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4-alk
        OUT
    }

    # Calculate [H+] from [CO2] and total alk
    h <- rep(NA, length(i_flag_24))
    j <- 1 
    for(i in (i_flag_24))
    {
        # Parameters used by function fAlk defined above and called below through uniroot()
        K1_i <- K1[i]
        K2_i <- K2[i]
        K1p_i <- K1p[i]
        K2p_i <- K2p[i]
        K3p_i <- K3p[i]
        Kb_i  <- Kb[i]
        Kw_i  <- Kw[i]
        Ksi_i <- Ksi[i]
        ### newly added
        K2si_i <- K2si[i]
        Kn_i <- Kn[i]
        Khs_i <- Khs[i]
        ### end of newly added
        Ks_i  <- Ks[i]
        Kf_i  <- Kf[i]
        Kff_i <- Kff[i]
        Sit_i <- Sit[i]
        ### newly added
        NH4t_i <- NH4t[i]
        HSt_i <- HSt[i]
        ### end of newly added
        Pt_i  <- Pt[i]
        co2   <- CO2[i]
        alk   <- ALK[i]
        st    <- ST[i]
        bor   <- BOR[i]
        fluo  <- FLUO[i]
        phs   <- pHscale[i]
        # Calculate [H+] from total alk
        h[j] <- uniroot(fALK,c(1e-10,10^(-3.5)), tol=1e-20)$root
        j <- j + 1
    }   
    HCO3[i_flag_24] <- K1[i_flag_24]*CO2[i_flag_24]/h
    CO3[i_flag_24]  <- K2[i_flag_24]*HCO3[i_flag_24]/h
    PH[i_flag_24]   <- -log10(h)
    H[i_flag_24] <- h
    DIC[i_flag_24]  <- CO2[i_flag_24] + HCO3[i_flag_24] + CO3[i_flag_24]

    # ------------ case 25.) DIC and pCO2 given
    # Indices of flag elements where flag = 25
    i_flag_25 <- which (flag == 25)
    DIC[i_flag_25] <- var2[i_flag_25]
    CO2[i_flag_25] <- K0[i_flag_25]*fCO2[i_flag_25]
    # Though case 25 is the same as case 5, computations are made in a different way
    K <- K1[i_flag_25]/K2[i_flag_25]
    b <- K*K0[i_flag_25]*fCO2[i_flag_25]
    c <- (K*K0[i_flag_25]*fCO2[i_flag_25]) * 
         (K0[i_flag_25]*fCO2[i_flag_25]-DIC[i_flag_25])
    D <- b*b - 4*c
    HCO3[i_flag_25] <- (1/2)*(-b + sqrt(D))
    CO3[i_flag_25]  <- DIC[i_flag_25] - CO2[i_flag_25] - HCO3[i_flag_25]
    h <- K1[i_flag_25]*CO2[i_flag_25]/HCO3[i_flag_25]
    PH[i_flag_25] <- -log10(h)
    H[i_flag_25] <- h

    # ------------ CALCULATION OF ALK in cases 
    cases <- c(1, 2, 3, 5, 6, 7, 9, 10, 12, 14, 21, 22, 23, 25)
    # Indices of flag elements in these cases
    i_flag <- which (flag %in% cases)
    h <- H[i_flag]

    # HCO3[i_flag] <- DIC[i_flag]*h*K1[i_flag]/(h*h + K1[i_flag]*h + K1[i_flag]*K2[i_flag])
    # CO3[i_flag]  <- HCO3[i_flag] * K2[i_flag] / h
    boh4 <- BOR[i_flag]/(1+h/Kb[i_flag])
    oh <- Kw[i_flag]/h 
    temp <- h^3 + K1p[i_flag]*h^2 + K1p[i_flag]*K2p[i_flag]*h + K1p[i_flag]*K2p[i_flag]*K3p[i_flag]
    h3po4 <- Pt[i_flag]*(h^3) / temp
    hpo4  <- Pt[i_flag]*K1p[i_flag]*K2p[i_flag]*h / temp
    po4   <- Pt[i_flag]*K1p[i_flag]*K2p[i_flag]*K3p[i_flag] / temp
    siooh3 <- Sit[i_flag]/(1+h/Ksi[i_flag])
    # adapted to include second dissociation constant of silicate
    siooh3 <- Sit[i_flag]*h*Ksi[i_flag] / 
      (h*h + Ksi[i_flag]*h + Ksi[i_flag]*K2si[i_flag])
    ### newly added
    sio2oh2 <- Sit[i_flag]*Ksi[i_flag]*K2si[i_flag] / 
      (h*h + Ksi[i_flag]*h + Ksi[i_flag]*K2si[i_flag])
    nh3 <- NH4t[i_flag]/(1+h/Kn[i_flag])
    hs <- HSt[i_flag]/(1+h/Khs[i_flag])

    ## calculate Hfree anf Htot
    hfree <- rep(NA, length(i_flag))
    htot  <- rep(NA, length(i_flag))    
    sc <- pHscale[i_flag] 
    st <- ST[i_flag]
    ks  <- Ks[i_flag]
    fluo <- FLUO[i_flag]
    kff  <- Kff[i_flag]
    
    # Where pHscale=="F", pHscale = free scale
    i_sc_F <- which (sc == "F") 
    hfree[i_sc_F] <- h[i_sc_F]  
    htot[i_sc_F]  <- h[i_sc_F] / (1+st[i_sc_F]/ks[i_sc_F]) 
    # Where pHscale=="T", pHscale = total scale
    i_sc_T <- which (sc == "T") 
    hfree[i_sc_T] <- h[i_sc_T] * (1+st[i_sc_T]/ks[i_sc_T])
    htot[i_sc_T]  <- h[i_sc_T]
    # Where pHscale=="SWS", pHscale = SW scale
    i_sc_S <- which (sc == "SWS") 
    hfree[i_sc_S] <- h[i_sc_S] * (1 + st[i_sc_S]/ks[i_sc_S] + fluo[i_sc_S]/kff[i_sc_S])
    htot[i_sc_S]  <- hfree[i_sc_S] / (1+st[i_sc_S]/ks[i_sc_S])

    hso4 <- st/(1+ks/hfree)
    hf   <- fluo/(1+Kf[i_flag]/htot)
    ALK[i_flag]  <- HCO3[i_flag] + 2*CO3[i_flag] + boh4+oh+hpo4+2*po4+siooh3+2*sio2oh2+nh3+hs-hfree-hso4-hf-h3po4
    ##########################################################
    # CALCULATION OF ARAGONITE AND CALCITE SATURATION STATE  #
    ##########################################################

    Ca = (0.02128/40.078) * S/1.80655  #Improved formula from Dickson et al. (2007) as discussed in Orr & Epitalon (2014, revised)
    Oa  <- (Ca*CO3)/Kspa
    Oc  <- (Ca*CO3)/Kspc

    #PCO2 and fCO2 - convert from atm to microatm
    pCO2       <- pCO2*1e6
    fCO2       <- fCO2*1e6    
    pCO2pot    <- pCO2pot*1e6
    fCO2pot    <- fCO2pot*1e6    
    pCO2insitu <- pCO2insitu*1e6
    fCO2insitu <- fCO2insitu*1e6    
    
    ####################################################
    # CALCULATION OF FULL ACID-BASE SPECIATION         #
    # not included: HNO3, NO3, HNO2, NO2, S(2-), H2SO4 #
    ####################################################
    NH4     <- (H) / (H + Kn) * NH4t      
    NH3     <- (Kn) / (H + Kn) * NH4t
    BOH3    <- (H) / (H + Kb) * BOR
    BOH4    <- (Kb) / (H + Kb) * BOR
    H3PO4   <- (H^3) / (H^3 + K1p * H^2 + K1p * K2p * H + K1p * K2p * K3p) * Pt
    H2PO4   <- (K1p * H^2) / (H^3 + K1p * H^2 + K1p * K2p * H + K1p * K2p * K3p) * Pt
    HPO4    <- (K1p * K2p * H) / (H^3 + K1p * H^2 + K1p * K2p * H + K1p * K2p * K3p) * Pt
    PO4     <- (K1p * K2p * K3p) / (H^3 + K1p * H^2 + K1p * K2p * H + K1p * K2p * K3p) * Pt
    H2S     <- (H) / (H + Khs) * HSt
    HS      <- (Khs) / (H + Khs) * HSt
    SiOH4   <- (H^2) / (H^2 + Ksi * H + Ksi * K2si) * Sit
    SiOOH3  <- (Ksi * H) / (H^2 + Ksi * H + Ksi * K2si) * Sit
    SiO2OH2 <- (Ksi * K2si) / (H^2 + Ksi * H + Ksi * K2si) * Sit
    HF      <- (H) / (H + Kf) * FLUO
    F       <- (Kf) / (H + Kf) * FLUO
    HSO4    <- (H) / (H + Ks) * ST
    SO4     <- (Ks) / (H + Ks) * ST
    OH      <- Kw/H
    
    RES <- data.frame(flag, S, T, Patm, P, PH, CO2, fCO2, pCO2, fCO2pot, pCO2pot, fCO2insitu, pCO2insitu, HCO3, CO3, DIC, ALK, Oa, Oc,
                      NH4, NH3, BOH3, BOH4, H3PO4, H2PO4, HPO4, PO4, H2S, HS, SiOH4, SiOOH3, SiO2OH2, HF, F, HSO4, SO4, H, OH, NH4t, BOR, Pt, HSt, Sit, FLUO, ST)
    names(RES) <- c("flag", "S", "T", "Patm", "P", "pH", "CO2", "fCO2", "pCO2", "fCO2pot", "pCO2pot", "fCO2insitu", "pCO2insitu", "HCO3", "CO3", "DIC", "ALK", "OmegaAragonite", "OmegaCalcite",
                    "NH4", "NH3", "BOH3", "BOH4", "H3PO4", "H2PO4", "HPO4", "PO4", "H2S", "HS", "SiOH4", "SiOOH3", "SiO2OH2", "HF", "F", "HSO4", "SO4", "H", "OH", "NH4t", "BOR", "Pt", "HSt", "Sit",
                    "FLUO", "ST")
    return(RES)
}
<bytecode: 0xe4c2608>
<environment: namespace:seacarb>
 --- function (body) search ---
Function carbfull in namespace seacarb has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
