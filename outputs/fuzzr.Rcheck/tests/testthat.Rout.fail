
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(fuzzr)
> 
> test_check("fuzzr")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at testthat/test_fuzz.R#132: 
 --- if/while statement is in package --- 
fuzzr
 --- call (currently evaluated) --- 
(function (x) 
{
    r <- x
    class(r) <- c("a", "b", "c")
    print("output 1")
    warning("warn 1")
    message("mess 1")
    print("output 2")
    warning("warn 2")
    message("mess 2")
    if (x == 1) 
        stop("Error at 1")
    return(r)
})(x = c("a", "b", "c"))
 --- R stacktrace ---
where 1: (function (x) 
{
    r <- x
    class(r) <- c("a", "b", "c")
    print("output 1")
    warning("warn 1")
    message("mess 1")
    print("output 2")
    warning("warn 2")
    message("mess 2")
    if (x == 1) 
        stop("Error at 1")
    return(r)
})(x = c("a", "b", "c"))
where 2: do.call(fun, args = all_args)
where 3: doTryCatch(return(expr), name, parentenv, handler)
where 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 5: tryCatchList(expr, classes, parentenv, handlers)
where 6: tryCatch(do.call(fun, args = all_args), error = error_handler)
where 7: withCallingHandlers(tryCatch(do.call(fun, args = all_args), error = error_handler), 
    message = message_handler, warning = warning_handler)
where 8: eval(expr, pf)
where 9: eval(expr, pf)
where 10: withVisible(eval(expr, pf))
where 11: evalVis(expr)
where 12: utils::capture.output({
    value <- withCallingHandlers(tryCatch(do.call(fun, args = all_args), 
        error = error_handler), message = message_handler, warning = warning_handler)
}, type = "output")
where 13: try_fuzz(fun = fun, fun_name = fun_name, all_args = arglist)
where 14: .f(.x[[i]], ...)
where 15 at /var/scratch2/tomas/tmp/Rtmp0KJetQ/R.INSTALL19702aacaf62/purrr/R/map.R#104: .Call(map_impl, environment(), ".x", ".f", "list")
where 16: purrr::map(test_list, function(x) {
    if (exists("pb")) 
        pb$tick()
    arglist <- purrr::map(x, getElement, name = "test_value")
    testnames <- purrr::map(x, getElement, name = "test_name")
    res <- list(test_result = try_fuzz(fun = fun, fun_name = fun_name, 
        all_args = arglist))
    res[["test_name"]] <- testnames
    res
})
where 17: p_fuzz_function(fun, .l = test_args, check_args = check_args, 
    progress = progress)
where 18 at testthat/test_fuzz.R#136: fuzz_function(mf, "x")
where 19: eval(code, test_env)
where 20: eval(code, test_env)
where 21: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 22: doTryCatch(return(expr), name, parentenv, handler)
where 23: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 24: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 25: doTryCatch(return(expr), name, parentenv, handler)
where 26: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 27: tryCatchList(expr, classes, parentenv, handlers)
where 28: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 29 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#31: test_code(desc, code, env = parent.frame())
where 30 at testthat/test_fuzz.R#122: test_that("Multi-class returns can be handled appropriately", 
    {
        mf <- function(x) {
            r <- x
            class(r) <- c("a", "b", "c")
            print("output 1")
            warning("warn 1")
            message("mess 1")
            print("output 2")
            warning("warn 2")
            message("mess 2")
            if (x == 1) 
                stop("Error at 1")
            return(r)
        }
        fmf <- fuzz_function(mf, "x")
        fdf <- as.data.frame(fmf)
        cdf <- as.data.frame(fmf, sep = "|")
        expect_true(is.character(fdf$x))
        expect_true(is.character(fdf$output))
        expect_true(is.character(fdf$messages))
        expect_true(is.character(fdf$warnings))
        expect_true(is.character(fdf$errors))
        expect_true(is.character(fdf$result_classes))
        expect_match(fdf[fdf$x == "int_single", ]$errors, "Error at 1")
        expect_match(fdf[fdf$x == "char_multiple", ]$warnings, 
            "condition has length > 1")
        expect_match(fdf$messages[1], "|")
    })
where 31: eval(code, test_env)
where 32 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#152: eval(code, test_env)
where 33: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 34: doTryCatch(return(expr), name, parentenv, handler)
where 35: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 36: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 37: doTryCatch(return(expr), name, parentenv, handler)
where 38: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 39: tryCatchList(expr, classes, parentenv, handlers)
where 40 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-that.R#149: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 41 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/source.R#42: test_code(NULL, exprs, env)
where 42 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#131: source_file(path, new.env(parent = env), chdir = TRUE, wrap = wrap)
where 43 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/reporter-zzz.R#53: force(code)
where 44 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#125: with_reporter(reporter = reporter, start_end_reporter = start_end_reporter, 
    {
        lister$start_file(basename(path))
        source_file(path, new.env(parent = env), chdir = TRUE, 
            wrap = wrap)
        end_context()
    })
where 45: FUN(X[[i]], ...)
where 46: lapply(paths, test_file, env = env, reporter = current_reporter, 
    start_end_reporter = FALSE, load_helpers = FALSE, wrap = wrap)
where 47 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/reporter-zzz.R#53: force(code)
where 48 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-files.R#25: with_reporter(reporter = current_reporter, results <- lapply(paths, 
    test_file, env = env, reporter = current_reporter, start_end_reporter = FALSE, 
    load_helpers = FALSE, wrap = wrap))
where 49 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#86: test_files(paths, reporter = reporter, env = env, stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 50 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#190: test_dir(path = test_path, reporter = reporter, env = env, filter = filter, 
    ..., stop_on_failure = stop_on_failure, stop_on_warning = stop_on_warning, 
    wrap = wrap)
where 51 at /var/scratch2/tomas/tmp/Rtmpri1Vbr/R.INSTALLb8033c63809/testthat/R/test-directory.R#171: test_package_dir(package = package, test_path = test_path, filter = filter, 
    reporter = reporter, ..., stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 52: test_check("fuzzr")

 --- value of length: 3 type: logical ---
[1] FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(x) {
    r <- x
    class(r) <- c("a", "b", "c")
    print("output 1")
    warning("warn 1")
    message("mess 1")
    print("output 2")
    warning("warn 2")
    message("mess 2")
    if (x == 1) stop("Error at 1")
    return(r)
  }
<environment: 0x4a29f10>
attr(,"fun_name")
[1] "mf"
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
