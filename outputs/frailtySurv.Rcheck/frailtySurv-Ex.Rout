
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "frailtySurv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('frailtySurv')
Loading required package: survival
Welcome to frailtySurv v1.3.2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("drs")
> ### * drs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drs
> ### Title: Diabetic Retinopathy Study (DRS)
> ### Aliases: drs
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(drs)
> ##D 
> ##D # Clustered by subject
> ##D fit.drs <- fitfrail(Surv(time, status) ~ treated + cluster(subject_id), 
> ##D                     drs, frailty="gamma")
> ##D 
> ##D fit.drs
> ##D 
> ##D # Variance estimates
> ##D vcov(fit.drs)
> ##D 
> ##D # Plot the estimated cumulative baseline hazard
> ##D plot(fit.drs, "hazard")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fitfrail")
> ### * fitfrail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitfrail
> ### Title: Fit a shared frailty model
> ### Aliases: fitfrail
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # 
> ##D # Generate synthetic survival data with regression coefficients 
> ##D # beta = c(log(2),log(3)) and theta = 2, where the shared frailty 
> ##D # values from a gamma distribution with expectation 1 and variance theta.
> ##D # 
> ##D dat <- genfrail(N=300, K=2, beta=c(log(2),log(3)), 
> ##D                 frailty="gamma", theta=2,
> ##D                 censor.rate=0.35,
> ##D                 Lambda_0=function(t, tau=4.6, C=0.01) (C*t)^tau)
> ##D 
> ##D # Fit a shared frailty model
> ##D fit <- fitfrail(Surv(time, status) ~ Z1 + Z2 + cluster(family), 
> ##D                 dat, frailty="gamma")
> ##D fit
> ##D 
> ##D # The Lambda.fun function can give the estimated cumulative baseline hazard at
> ##D # any time
> ##D fit$Lambda.fun(seq(0, 100, by=10))
> ##D 
> ##D # Fit the DRS data, clustered on patient
> ##D data(drs)
> ##D fit.drs <- fitfrail(Surv(time, status) ~ treated + cluster(subject_id), 
> ##D                     drs, frailty="gamma")
> ##D fit.drs
> ## End(Not run)
> 
> # 
> # A small example with c(log(2),log(3)) coefficients, Gamma(2) frailty, and
> # 0.10 censorship.
> # 
> dat <- genfrail(N=30, K=2, beta=c(log(2),log(3)), 
+                 frailty="gamma", theta=2,
+                 censor.rate=0.10,
+                 Lambda_0=function(t, tau=4.6, C=0.01) (C*t)^tau)
> 
> # Fit a shared frailty model
> fit <- fitfrail(Surv(time, status) ~ Z1 + Z2 + cluster(family), 
+                 dat, frailty="gamma", se=TRUE)
Warning in sqrt(fit$vcov) : NaNs produced
> fit
Call: fitfrail(formula = Surv(time, status) ~ Z1 + Z2 + cluster(family), 
    dat = dat, frailty = "gamma", se = TRUE)

     Covariate     Coefficient           SE
            Z1           0.683        0.270
            Z2           1.255        0.377

Frailty distribution   gamma(1.669), VAR of frailty variates = 1.669
Frailty parameter SE   0.988
Log-likelihood         -214.246
Converged (method)     11 iterations, 0.393 secs (maximized log-likelihood)
> 
> # Summarize the survival curve
> head(summary(fit))
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpHSgH8f/R.INSTALL51b072292fbb/frailtySurv/R/summary.fitfrail.R#8: 
 --- if/while statement is in package --- 
frailtySurv
 --- call (currently evaluated) --- 
summary.fitfrail(fit)
 --- R stacktrace ---
where 1: summary.fitfrail(fit)
where 2: summary(fit)
where 3: head(summary(fit))

 --- value of length: 2 type: logical ---
[1] FALSE FALSE
 --- function (currently evaluated)--- 
function(object, type=c("survival", "cumhaz"), Lambda.times=NULL, 
                             censored=FALSE, se=FALSE, CI=0.95, ...) {
  fit <- object
  
  if (!inherits(fit, "fitfrail")) 
    stop("summary.fitfrail can only be used for fitfrail objects")
  
  if (!match(type, c("survival", "cumhaz"), nomatch=0))
    stop("type must be either 'survival' or 'cumhaz'")
  
  if (!is.null(Lambda.times)) {
    if (!is.numeric(Lambda.times)) 
      stop("Lambda.times must be numeric")
  } else if (censored) {
    Lambda.times <- fit$VARS$time
  } else {
    Lambda.times <- fit$VARS$time[fit$VARS$status > 0]
  }
  Lambda.times <- sort(unique(Lambda.times))
  
  stopifnot((CI > 0)&&(CI < 1))
  
  status <- as.integer(fit$VARS$status > 0)
  n.risk.total <- length(status)
  
  n.risk <- n.risk.total - vapply(Lambda.times, function(t) {
    sum(fit$VARS$time < t)
  }, 0) # num failures at time t-
  
  n.event <- c(sum(status[fit$VARS$time <= Lambda.times[1]]), 
               diff(vapply(Lambda.times, 
                 function(t) {
                   sum(status[fit$VARS$time <= t])
                 }, 0))) # num failures at time t-
  
  result <- data.frame(time=Lambda.times,
                       n.risk=n.risk,
                       n.event=n.event)
  rownames(result) <- NULL
  
  if (type == "survival") {
    result$surv <- exp(-fit$Lambda.fun(Lambda.times))
  } else if (type == "cumhaz") {
    result$cumhaz <- fit$Lambda.fun(Lambda.times)
  }
  
  if (se) {
    cumhaz.se <- diag(vcov(fit, Lambda.times=Lambda.times, boot=TRUE, ...))
    cumhaz.se <- cumhaz.se[grepl("^Lambda", names(cumhaz.se))]
    
    if (type == "survival") {
      result$std.err <- exp(-result$surv + cumhaz.se^2/2)*sqrt(exp(cumhaz.se^2) - 1)
      
      if (CI > 0) {
        zval <- qnorm(1- (1-CI)/2, 0,1)
        lower <- pmax(result$surv - zval* result$std.err, 0)
        upper <- pmin(result$surv + zval* result$std.err, 1)
        result$lower.ci <- lower
        result$upper.ci <- upper
      }
    } else if (type == "cumhaz") {
      result$std.err <- cumhaz.se
      
      if (CI > 0) {
        zval <- qnorm(1- (1-CI)/2, 0,1)
        lower <- pmax(result$haz - zval* result$std.err, 0)
        upper <- result$haz + zval* result$std.err
        result$lower.ci <- lower
        result$upper.ci <- upper
      }
    }
    
  }
  
  result
}
<bytecode: 0x136c8180>
<environment: namespace:frailtySurv>
 --- function (body) search ---
Function summary.fitfrail in namespace frailtySurv has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
