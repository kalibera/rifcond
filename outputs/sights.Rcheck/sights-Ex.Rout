
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sights"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('sights')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ex_dataMatrix")
> ### * ex_dataMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ex_dataMatrix
> ### Title: High-Throughput Screening example data - CMBA
> ### Aliases: ex_dataMatrix
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## structure of dataset
> str(ex_dataMatrix)
'data.frame':	80 obs. of  10 variables:
 $ X      : int  1 9 17 25 33 41 49 57 65 73 ...
 $ Wells  : int  9 17 25 33 41 49 57 65 73 81 ...
 $ Rows   : Factor w/ 8 levels "A","B","C","D",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Columns: int  2 3 4 5 6 7 8 9 10 11 ...
 $ S1_R1  : int  22335 21482 18985 21812 22802 11225 22950 22512 23506 22967 ...
 $ S1_R2  : int  19504 19107 13765 20052 20410 19549 21561 21591 21008 20993 ...
 $ S1_R3  : int  22791 23031 18398 23612 23873 23880 23159 23911 24002 24465 ...
 $ S2_R1  : int  21030 21216 21759 21192 19430 21665 10820 22180 22364 22044 ...
 $ S2_R2  : int  20858 21960 22839 22823 20098 22660 10671 22856 23715 22834 ...
 $ S2_R3  : int  21048 20045 21883 20756 17935 20472 10506 21138 21908 21067 ...
> ## summary of dataset
> summary(ex_dataMatrix)
       X             Wells            Rows       Columns         S1_R1      
 Min.   : 1.00   Min.   : 9.00   A      :10   Min.   : 2.0   Min.   :10490  
 1st Qu.:20.75   1st Qu.:28.75   B      :10   1st Qu.: 4.0   1st Qu.:21574  
 Median :40.50   Median :48.50   C      :10   Median : 6.5   Median :22516  
 Mean   :40.50   Mean   :48.50   D      :10   Mean   : 6.5   Mean   :21409  
 3rd Qu.:60.25   3rd Qu.:68.25   E      :10   3rd Qu.: 9.0   3rd Qu.:23190  
 Max.   :80.00   Max.   :88.00   F      :10   Max.   :11.0   Max.   :24377  
                                 (Other):20                                 
     S1_R2           S1_R3           S2_R1           S2_R2      
 Min.   :10186   Min.   :11454   Min.   :10820   Min.   :10568  
 1st Qu.:19538   1st Qu.:22574   1st Qu.:21064   1st Qu.:21272  
 Median :20521   Median :23670   Median :21707   Median :22280  
 Mean   :19583   Mean   :22704   Mean   :20813   Mean   :21293  
 3rd Qu.:20884   3rd Qu.:24180   3rd Qu.:22148   3rd Qu.:22858  
 Max.   :21985   Max.   :25924   Max.   :23235   Max.   :23772  
                                                                
     S2_R3      
 Min.   :10123  
 1st Qu.:20062  
 Median :20936  
 Mean   :20050  
 3rd Qu.:21570  
 Max.   :22747  
                
> 
> ## See help pages of SIGHTS functions for examples of using this dataset
> 
> 
> 
> 
> cleanEx()
> nameEx("inglese")
> ### * inglese
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inglese
> ### Title: High-Throughput Screening example data - Inglese
> ### Aliases: inglese
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## load dataset
> data(inglese)
> 
> ## structure of dataset
> str(inglese)
'data.frame':	1280 obs. of  45 variables:
 $ Row    : int  1 1 1 1 1 1 1 1 1 1 ...
 $ Col    : int  5 6 7 8 9 10 11 12 13 14 ...
 $ Exp1R1 : int  8192 8192 7756 8453 8397 7869 8283 7967 7801 8302 ...
 $ Exp1R2 : int  9505 9117 9092 9449 9019 8767 9220 8928 8685 9371 ...
 $ Exp1R3 : int  10240 9708 9350 9630 9717 9544 9539 9626 9324 9706 ...
 $ Exp2R1 : int  7934 8057 7899 7983 7669 7506 7863 7645 7589 7908 ...
 $ Exp2R2 : int  9388 8912 9190 9476 8939 8822 9072 8969 8859 9622 ...
 $ Exp2R3 : int  9934 9331 9182 9574 9547 9380 9677 9257 9154 9432 ...
 $ Exp3R1 : int  8291 8136 8111 8428 7929 8016 8154 7938 7847 8439 ...
 $ Exp3R2 : int  9689 9027 8921 9357 9110 8705 9254 9085 8884 9466 ...
 $ Exp3R3 : int  9847 9386 9261 9503 9471 9088 9408 9150 9093 9441 ...
 $ Exp4R1 : int  8306 8039 8163 8364 7988 7719 7921 7855 7728 8300 ...
 $ Exp4R2 : int  9763 9111 8930 9006 8891 8805 9090 9065 8771 9448 ...
 $ Exp4R3 : int  9706 9249 9023 9296 9308 9011 9375 9280 9095 9407 ...
 $ Exp5R1 : int  8123 7934 8223 8453 7906 7839 8074 7930 7866 8151 ...
 $ Exp5R2 : int  9643 9185 9175 9221 8952 8741 8839 8849 8678 9138 ...
 $ Exp5R3 : int  9877 9546 9309 9461 9477 9141 9239 9145 8963 9486 ...
 $ Exp6R1 : int  8599 8125 8299 8546 7934 7756 7830 8037 7858 8224 ...
 $ Exp6R2 : int  9678 9268 9170 9183 8941 8821 8854 8894 8886 9332 ...
 $ Exp6R3 : int  9997 9496 9546 9368 9156 9141 9318 9041 8638 9375 ...
 $ Exp7R1 : int  8545 8202 8064 8279 8017 7877 7941 8034 7799 8147 ...
 $ Exp7R2 : int  9152 9064 10100 10170 9902 9500 9100 9565 8956 9733 ...
 $ Exp7R3 : int  9916 9439 9143 9318 9059 8917 9162 9098 8966 9139 ...
 $ Exp8R1 : int  8507 8402 8410 8799 8250 8197 8370 8261 8158 8549 ...
 $ Exp8R2 : int  9775 9458 9192 9494 9364 9304 9410 9330 9133 9775 ...
 $ Exp8R3 : int  9794 9466 9149 9464 9491 9315 9526 9388 9217 9403 ...
 $ Exp9R1 : int  8616 8293 8304 8416 8146 8051 8166 8173 8053 8632 ...
 $ Exp9R2 : int  10040 9480 9332 9587 9258 8998 9250 9140 9197 9783 ...
 $ Exp9R3 : int  9742 9186 9312 9417 9309 9270 9306 9175 9035 9422 ...
 $ Exp10R1: int  8701 8401 8510 8776 8222 8216 8340 8330 8122 8575 ...
 $ Exp10R2: int  9629 9023 9009 8969 8779 8538 8750 8758 8682 9444 ...
 $ Exp10R3: int  9962 9238 9140 9280 9282 9238 9441 9262 9074 9675 ...
 $ Exp11R1: int  9035 8674 8697 8888 8438 8245 8336 8057 8186 8697 ...
 $ Exp11R2: int  9454 9133 8798 8914 8965 8807 9041 8724 8809 9091 ...
 $ Exp11R3: int  9784 9270 8966 9181 9180 9068 9242 9017 8979 9329 ...
 $ Exp12R1: int  8873 8690 8608 8778 8551 8461 8736 8439 8659 8732 ...
 $ Exp12R2: int  9481 9015 8896 9492 8975 8839 9117 8839 9209 9052 ...
 $ Exp12R3: int  9639 9216 9044 9197 9072 9178 9509 9044 9292 9651 ...
 $ Exp13R1: int  9236 8598 8685 8689 8457 8527 8762 8578 9148 9213 ...
 $ Exp13R2: int  9878 9231 9113 9329 9000 9078 9675 9214 9907 9141 ...
 $ Exp13R3: int  9604 9138 9149 9074 9071 8888 9255 8991 9578 9656 ...
 $ Exp14R1: int  9122 8475 9008 8907 8249 8419 8984 8788 10360 9070 ...
 $ Exp14R2: int  9929 9075 9745 9549 8735 9188 9516 9191 10780 9813 ...
 $ Exp14R3: int  9335 8822 8979 8943 8448 8747 9167 8819 10360 9640 ...
 $ Hits   : int  0 0 0 0 0 0 0 0 1 0 ...
> ## summary of dataset
> summary(inglese)
      Row             Col            Exp1R1          Exp1R2     
 Min.   : 1.00   Min.   : 5.00   Min.   : 7427   Min.   : 8685  
 1st Qu.: 8.75   1st Qu.:14.75   1st Qu.: 9186   1st Qu.:10350  
 Median :16.50   Median :24.50   Median : 9546   Median :10750  
 Mean   :16.50   Mean   :24.50   Mean   : 9477   Mean   :10659  
 3rd Qu.:24.25   3rd Qu.:34.25   3rd Qu.: 9847   3rd Qu.:11070  
 Max.   :32.00   Max.   :44.00   Max.   :10960   Max.   :11930  
     Exp1R3          Exp2R1          Exp2R2          Exp2R3     
 Min.   : 9068   Min.   : 7426   Min.   : 8482   Min.   : 8914  
 1st Qu.:10860   1st Qu.: 9118   1st Qu.:10320   1st Qu.:10630  
 Median :11205   Median : 9516   Median :10720   Median :10950  
 Mean   :11135   Mean   : 9414   Mean   :10637   Mean   :10873  
 3rd Qu.:11500   3rd Qu.: 9802   3rd Qu.:11050   3rd Qu.:11230  
 Max.   :12580   Max.   :11260   Max.   :11830   Max.   :12040  
     Exp3R1          Exp3R2          Exp3R3          Exp4R1     
 Min.   : 7667   Min.   : 8681   Min.   : 8857   Min.   : 7719  
 1st Qu.: 9476   1st Qu.:10330   1st Qu.:10610   1st Qu.: 9565  
 Median : 9832   Median :10740   Median :10920   Median : 9919  
 Mean   : 9747   Mean   :10629   Mean   :10852   Mean   : 9813  
 3rd Qu.:10130   3rd Qu.:11030   3rd Qu.:11182   3rd Qu.:10200  
 Max.   :11500   Max.   :12430   Max.   :11880   Max.   :11080  
     Exp4R2          Exp4R3          Exp5R1          Exp5R2     
 Min.   : 8737   Min.   : 8853   Min.   : 7839   Min.   : 8678  
 1st Qu.:10450   1st Qu.:10610   1st Qu.: 9582   1st Qu.:10460  
 Median :10815   Median :10940   Median : 9939   Median :10960  
 Mean   :10714   Mean   :10866   Mean   : 9835   Mean   :10838  
 3rd Qu.:11090   3rd Qu.:11240   3rd Qu.:10230   3rd Qu.:11260  
 Max.   :11830   Max.   :11900   Max.   :10930   Max.   :11970  
     Exp5R3          Exp6R1          Exp6R2          Exp6R3     
 Min.   : 8963   Min.   : 6861   Min.   : 8704   Min.   : 8638  
 1st Qu.:10610   1st Qu.: 9548   1st Qu.:10508   1st Qu.:10650  
 Median :10950   Median : 9954   Median :10880   Median :10980  
 Mean   :10882   Mean   : 9839   Mean   :10783   Mean   :10915  
 3rd Qu.:11240   3rd Qu.:10230   3rd Qu.:11202   3rd Qu.:11270  
 Max.   :12040   Max.   :10960   Max.   :11970   Max.   :12100  
     Exp7R1          Exp7R2          Exp7R3          Exp8R1     
 Min.   : 7799   Min.   : 8956   Min.   : 8917   Min.   : 7419  
 1st Qu.: 9592   1st Qu.:10570   1st Qu.:10570   1st Qu.: 9696  
 Median : 9995   Median :10960   Median :10930   Median :10120  
 Mean   : 9881   Mean   :10859   Mean   :10850   Mean   :10005  
 3rd Qu.:10280   3rd Qu.:11260   3rd Qu.:11190   3rd Qu.:10410  
 Max.   :11510   Max.   :11950   Max.   :12060   Max.   :11280  
     Exp8R2          Exp8R3          Exp9R1          Exp9R2     
 Min.   : 8340   Min.   : 8190   Min.   : 7364   Min.   : 8035  
 1st Qu.:10630   1st Qu.:10590   1st Qu.: 9776   1st Qu.:10678  
 Median :11020   Median :10920   Median :10165   Median :11065  
 Mean   :10913   Mean   :10851   Mean   :10069   Mean   :10951  
 3rd Qu.:11300   3rd Qu.:11220   3rd Qu.:10480   3rd Qu.:11350  
 Max.   :12460   Max.   :12320   Max.   :12780   Max.   :13920  
     Exp9R3         Exp10R1         Exp10R2         Exp10R3     
 Min.   : 8163   Min.   : 6763   Min.   : 7239   Min.   : 7509  
 1st Qu.:10550   1st Qu.: 9828   1st Qu.:10238   1st Qu.:10538  
 Median :10850   Median :10215   Median :10620   Median :10860  
 Mean   :10787   Mean   :10097   Mean   :10534   Mean   :10789  
 3rd Qu.:11140   3rd Qu.:10500   3rd Qu.:10940   3rd Qu.:11142  
 Max.   :13910   Max.   :15310   Max.   :16450   Max.   :16610  
    Exp11R1         Exp11R2         Exp11R3         Exp12R1     
 Min.   : 5081   Min.   : 5381   Min.   : 5620   Min.   : 3078  
 1st Qu.: 9935   1st Qu.:10330   1st Qu.:10510   1st Qu.:10000  
 Median :10370   Median :10705   Median :10850   Median :10440  
 Mean   :10233   Mean   :10588   Mean   :10764   Mean   :10300  
 3rd Qu.:10660   3rd Qu.:11010   3rd Qu.:11170   3rd Qu.:10780  
 Max.   :20270   Max.   :21850   Max.   :21700   Max.   :23050  
    Exp12R2         Exp12R3         Exp13R1         Exp13R2     
 Min.   : 3282   Min.   : 3244   Min.   : 1968   Min.   : 2176  
 1st Qu.:10408   1st Qu.:10440   1st Qu.: 9991   1st Qu.:10520  
 Median :10810   Median :10810   Median :10470   Median :10955  
 Mean   :10676   Mean   :10687   Mean   :10302   Mean   :10795  
 3rd Qu.:11090   3rd Qu.:11110   3rd Qu.:10840   3rd Qu.:11260  
 Max.   :25030   Max.   :24450   Max.   :25530   Max.   :26670  
    Exp13R3         Exp14R1         Exp14R2         Exp14R3     
 Min.   : 2044   Min.   : 1034   Min.   : 1111   Min.   : 1022  
 1st Qu.:10330   1st Qu.: 9572   1st Qu.:10048   1st Qu.: 9702  
 Median :10750   Median :10360   Median :10850   Median :10490  
 Mean   :10586   Mean   :10097   Mean   :10565   Mean   :10220  
 3rd Qu.:11060   3rd Qu.:10800   3rd Qu.:11240   3rd Qu.:10880  
 Max.   :26240   Max.   :26540   Max.   :27520   Max.   :26410  
      Hits        
 Min.   :0.00000  
 1st Qu.:0.00000  
 Median :0.00000  
 Mean   :0.07656  
 3rd Qu.:0.00000  
 Max.   :1.00000  
> 
> ## See SIGHTS vignette for examples of using this dataset and its anlaysis
> 
> 
> 
> 
> cleanEx()
> nameEx("normLoess")
> ### * normLoess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normLoess
> ### Title: Normalization by loess method
> ### Aliases: normLoess
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## apply Loess method
> ex_normMatrix <- normLoess(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ plateRows = 8, plateCols = 10)
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  pseudoinverse used at 7
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  neighborhood radius 3
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  reciprocal condition number  0
Completed Loess normalization
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("normMedFil")
> ### * normMedFil
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normMedFil
> ### Title: Normalization by median filter method
> ### Aliases: normMedFil
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## apply standard median filter method
> ex_normMatrix <- normMedFil(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ plateRows = 8, plateCols = 10, seqFilter = FALSE)
Completed Median Filter normalization
Number of plates = 6
Number of plate wells = 80
> ## apply initial row median filter then standard filter
> ex_normMatrix <- normMedFil(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ plateRows = 8, plateCols = 10, seqFilter = TRUE)
Completed Median Filter normalization with initial row median filter
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("normR")
> ### * normR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normR
> ### Title: Normalization by R score method
> ### Aliases: normR
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## apply R score
> ex_normMatrix <- normR(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ plateRows = 8, plateCols = 10)
Completed Robust Regression model normalization
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("normRobZ")
> ### * normRobZ
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normRobZ
> ### Title: Normalization by robust Z score method
> ### Aliases: normRobZ
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## apply robust Z score
> ex_normMatrix <- normRobZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Robust Z score normalization
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("normSPAWN")
> ### * normSPAWN
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normSPAWN
> ### Title: Normalization by SPAWN method
> ### Aliases: normSPAWN
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## apply SPAWN method with default trim factor and without well correction
> ex_normMatrix <- normSPAWN(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ plateRows = 8, plateCols = 10, trimFactor = 0.2)
Completed Spatial Polish normalization, trim 0.2 without well correction
Number of plates = 6
Number of plate wells = 80
> ## apply SPAWN method with default trim factor and with well correction
> ex_normMatrix <- normSPAWN(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ plateRows = 8, plateCols = 10, trimFactor = 0.2, wellCorrection = TRUE)
Completed Spatial Polish normalization, trim 0.2 with well correction
Number of plates in bias template = 6
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("normSights")
> ### * normSights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normSights
> ### Title: Normalization methods
> ### Aliases: normSights
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## choose a normalization method and provide relevant information
> ex_normMatrix <- normSights(dataMatrix = ex_dataMatrix, dataCols = 5:10,
+ normMethod = 'RobZ')
Completed Robust Z score normalization
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("normZ")
> ### * normZ
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normZ
> ### Title: Normalization by Z score method
> ### Aliases: normZ
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## apply Z score
> ex_normMatrix <- normZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Z score normalization
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("plot3d")
> ### * plot3d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot3d
> ### Title: 3D plot
> ### Aliases: plot3d
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## plot raw data
> plot3d(plotMatrix = ex_dataMatrix, plotCols = 5:10,
+ plotName = 'Example', plateRows = 8, plateCols = 10)
Number of plots = 6
Number of plates = 6
Number of plate wells = 80
[[1]]

[[2]]

[[3]]

[[4]]

[[5]]

[[6]]

> ## normalize data matrix using any method and store in new variable
> ex_normMatrix <- normZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Z score normalization
Number of plates = 6
Number of plate wells = 80
> ## plot normalized data
> plot3d(plotMatrix = ex_normMatrix, plotName = 'Example',
+ plateRows = 8, plateCols = 10)
Number of plots = 6
Number of plates = 6
Number of plate wells = 80
[[1]]

[[2]]

[[3]]

[[4]]

[[5]]

[[6]]

> 
> 
> 
> 
> cleanEx()
> nameEx("plotAutoco")
> ### * plotAutoco
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotAutoco
> ### Title: Auto-correlation
> ### Aliases: plotAutoco
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## plot raw data
> plotAutoco(plotMatrix = ex_dataMatrix, plateRows = 8, plateCols = 10,
+ plotCols = 5:10, plotName = 'Example')
Number of plots = 6
Number of plates = 6
Number of plate wells = 80
[[1]]

[[2]]

[[3]]

[[4]]

[[5]]

[[6]]

> ## normalize data matrix using any method and store in new variable
> ex_normMatrix <- normZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Z score normalization
Number of plates = 6
Number of plate wells = 80
> ## plot normalized data
> plotAutoco(plotMatrix = ex_normMatrix, plotName = 'Example',
+ plateRows = 8, plateCols = 10, plotSep = FALSE)
Number of plots = 1
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("plotBox")
> ### * plotBox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotBox
> ### Title: Boxplot
> ### Aliases: plotBox
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## plot raw data
> plotBox(plotMatrix = ex_dataMatrix, repIndex = c(1,1,1,2,2,2), plotCols = 5:10,
+ plotName = 'Example')
Number of samples = 2
Number of plots = 2
Number of plates = 6
Number of plate wells = 80
[[1]]

[[2]]

> ## normalize data matrix using any method and store in new variable
> ex_normMatrix <- normZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Z score normalization
Number of plates = 6
Number of plate wells = 80
> ## plot normalized data
> plotBox(plotMatrix = ex_normMatrix, repIndex = c(1,1,1,2,2,2), plotName = 'Example')
Number of samples = 2
Number of plots = 2
Number of plates = 6
Number of plate wells = 80
[[1]]

[[2]]

> 
> 
> 
> 
> cleanEx()
> nameEx("plotHeatmap")
> ### * plotHeatmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotHeatmap
> ### Title: Heat map
> ### Aliases: plotHeatmap
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## plot raw data with graphs separated
> plotHeatmap(plotMatrix = ex_dataMatrix, plotCols = 5:10,
+ plotName = 'Example', plateRows = 8, plateCols = 10)
Number of plots = 6
Number of plates = 6
Number of plate wells = 80
[[1]]

[[2]]

[[3]]

[[4]]

[[5]]

[[6]]

> ## normalize data matrix using any method and store in new variable
> ex_normMatrix <- normZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Z score normalization
Number of plates = 6
Number of plate wells = 80
> ## plot normalized data with graphs together
> plotHeatmap(plotMatrix = ex_normMatrix, plotName = 'Example',
+ plateRows = 8, plateCols = 10, plotSep = FALSE)
Number of plots = 1
Number of plates = 6
Number of plate wells = 80
> 
> 
> 
> 
> cleanEx()
> nameEx("plotHist")
> ### * plotHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotHist
> ### Title: Histogram
> ### Aliases: plotHist
> 
> ### ** Examples
> 
> ## load dataset
> data(ex_dataMatrix)
> 
> ## normalize data matrix using any method and store in new variable
> ex_normMatrix <- normZ(dataMatrix = ex_dataMatrix, dataCols = 5:10)
Completed Z score normalization
Number of plates = 6
Number of plate wells = 80
> ## apply any test to normalized data and store in new variable
> ex_testMatrix <- statRVM(normMatrix = ex_normMatrix,
+ repIndex = c(1,1,1,2,2,2))
Warning in stats::nlm(g, strt, yunq = c(sig, n)) :
  NA/Inf replaced by maximum positive value
alpha= 1.891405 beta= 22.97409 
Completed RVM test [get p-value columns: seq(2)*5 ]
Number of samples = 2
Number of plates = 6
Number of plate wells = 80
> ## plot p-value data by selecting the p-value columns from test result matrix
> plotHist(plotMatrix = ex_testMatrix, plotCols = c(5,10), plotName = 'Example',
+ colNames = c('Set_A', 'Set_B'))
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
: 
 --- if/while statement is in package --- 
sights
 --- call (currently evaluated) --- 
withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
 --- R stacktrace ---
where 1: withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
where 2 at /var/scratch2/tomas/tmp/RtmpskFA60/R.INSTALL1b12170ba61e/sights/R/plotHist.R#51: suppressWarnings(if (!grepl("val", colnames(plotMatrix), ignore.case = TRUE)) {
    plotValues = "values"
} else {
    if (grepl("p", colnames(plotMatrix), ignore.case = TRUE)) {
        plotValues = "p-values"
    }
    else if (grepl("q", colnames(plotMatrix), ignore.case = TRUE)) {
        plotValues = "q-values"
    }
})
where 3: plotHist(plotMatrix = ex_testMatrix, plotCols = c(5, 10), plotName = "Example", 
    colNames = c("Set_A", "Set_B"))

 --- value of length: 2 type: logical ---
[1] FALSE FALSE
 --- function (currently evaluated)--- 
function (expr, ...) 
{
    handlers <- list(...)
    classes <- names(handlers)
    parentenv <- parent.frame()
    if (length(classes) != length(handlers)) 
        stop("bad handler specification")
    .Internal(.addCondHands(classes, handlers, parentenv, NULL, 
        TRUE))
    expr
}
<bytecode: 0x15a2b00>
<environment: namespace:base>
 --- function (body) search ---
Function withCallingHandlers in namespace base has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
