
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jmuOutlier"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jmuOutlier')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CI.t.test")
> ### * CI.t.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CI.t.test
> ### Title: Student's t-Confidence Interval with Finite Population
> ###   Correction
> ### Aliases: CI.t.test
> ### Keywords: Student t Confidence interval Finite population correction
> 
> ### ** Examples
> 
> # Sample 43 observations from a list of 200 numbers, and compute the 95% confidence interval.
> pop = sqrt(1:200) ; x1 = sample( pop, 43 ) ; list(sort(x1))
[[1]]
 [1]  1.732051  3.464102  4.242641  4.795832  5.656854  5.830952  6.164414
 [8]  6.324555  6.928203  7.348469  7.681146  8.185353  8.246211  8.366600
[15]  8.485281  8.660254  9.055385  9.110434  9.643651 10.099505 10.148892
[22] 10.535654 10.677078 10.770330 10.862780 11.000000 11.135529 11.313708
[29] 11.401754 11.445523 11.489125 11.532563 11.747340 11.874342 12.000000
[36] 12.247449 13.000000 13.152946 13.266499 13.379088 13.490738 13.564660
[43] 14.000000

> fpc = 1 - length(x1) / length(pop) ; CI.t.test( x1, fpc=fpc )
[1]  8.810232 10.448275
> 
> # Sample 14 observations from a Normal(mean=50, sd=5) distribution,
> #    and compute the 90% confidence interval.
> x2 = sample( 14, 50, 5 ) ; list(sort(x2)) ; CI.t.test( x2, 0.9 )
[[1]]
 [1]  1  1  1  2  2  2  3  3  4  4  4  4  5  5  5  5  5  5  5  6  6  6  7  7  7
[26]  7  7  7  7  8  8  8  9 10 10 10 10 10 11 11 11 11 12 12 13 13 13 13 13 14

[1] 6.380894 8.139106
> 
> 
> 
> cleanEx()
> nameEx("abbreviation")
> ### * abbreviation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: abbreviation
> ### Title: Allows Abbreviations of Character Data
> ### Aliases: abbreviation
> ### Keywords: abbreviation
> 
> ### ** Examples
> 
> x1 = "two";  x2 = "l";   x3 = "gr";   x4 = "greater";  x5 = "NotInChoices"
> choices = c("two.sided", "less", "greater")
> abbreviation( x1, choices ) ; abbreviation( x2, choices ) ; abbreviation( x3, choices ) 
[1] "two.sided"
[1] "less"
[1] "greater"
> abbreviation( x4, choices ) ; abbreviation( x5, choices )
[1] "greater"
[1] "NotInChoices"
> 
> 
> 
> cleanEx()
> nameEx("dlaplace")
> ### * dlaplace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dlaplace
> ### Title: Laplace (Double Exponential) Density Function
> ### Aliases: dlaplace
> ### Keywords: Laplace Double exponential
> 
> ### ** Examples
>  dlaplace( seq( 20, 80, length.out=11 ), 50, 10 ) 
 [1] 0.001016084 0.002373781 0.005545641 0.012955758 0.030267316 0.070710678
 [7] 0.030267316 0.012955758 0.005545641 0.002373781 0.001016084
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("dtriang")
> ### * dtriang
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtriang
> ### Title: Triangular Density Function
> ### Aliases: dtriang
> ### Keywords: Triangular distribution
> 
> ### ** Examples
> dtriang( seq( 100, 200, length.out=11 ), 100, 200 )
 [1] 0.000 0.004 0.008 0.012 0.016 0.020 0.016 0.012 0.008 0.004 0.000
> 
> 
> cleanEx()
> nameEx("fourier")
> ### * fourier
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fourier
> ### Title: Determining and Graphing Fourier Approximation
> ### Aliases: fourier
> ### Keywords: Fourier approximation
> 
> ### ** Examples
> 
> fourier( function(x){ exp(-x)*(x-pi) }, 4 )
$constant
[1] -0.342076

$cosine.coefficients
[1] -0.5009337 -0.2384993 -0.1256040 -0.0754238

$sine.coefficients
[1] -0.3420760 -0.3499125 -0.2814973 -0.2269386

$approximation
[1] "g(x) = -0.342 - 0.501 cos x - 0.342 sin x - 0.238 cos 2x - 0.35 sin 2x - 0.126 cos 3x - 0.281 sin 3x - 0.0754 cos 4x - 0.227 sin 4x"

> fourier( function(x){ exp(-x) }, 7 )
$constant
[1] 0.1588577

$cosine.coefficients
[1] 0.158857730 0.063543092 0.031771546 0.018689145 0.012219825 0.008586904
[7] 0.006354309

$sine.coefficients
[1] 0.15885773 0.12708618 0.09531464 0.07475658 0.06109913 0.05152143 0.04448016

$approximation
[1] "g(x) = 0.159 + 0.159 cos x + 0.159 sin x + 0.0635 cos 2x + 0.127 sin 2x + 0.0318 cos 3x + 0.0953 sin 3x + 0.0187 cos 4x + 0.0748 sin 4x + 0.0122 cos 5x + 0.0611 sin 5x + 0.00859 cos 6x + 0.0515 sin 6x + 0.00635 cos 7x + 0.0445 sin 7x"

> fourier( function(x){ (x-pi) }, 5 )
$constant
[1] 0

$cosine.coefficients
[1] 0 0 0 0 0

$sine.coefficients
[1] -2.0000000 -1.0000000 -0.6666667 -0.5000000 -0.4000000

$approximation
[1] "g(x) = - 2 sin x - 1 sin 2x - 0.667 sin 3x - 0.5 sin 4x - 0.4 sin 5x"

> 
> 
> 
> cleanEx()
> nameEx("jmuOutlier-package")
> ### * jmuOutlier-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jmuOutlier-package
> ### Title: Permutation Tests for Nonparametric Statistics
> ### Aliases: jmuOutlier-package jmuOutlier
> ### Keywords: Nonparametric statistics Fourier analysis Power
> 
> ### ** Examples
> 
> fourier (function(x){ (x-pi)^3 }, 4 )
$constant
[1] 0

$cosine.coefficients
[1] 0 0 0 0

$sine.coefficients
[1] -7.739209 -8.369604 -6.135292 -4.747302

$approximation
[1] "g(x) = - 7.74 sin x - 8.37 sin 2x - 6.14 sin 3x - 4.75 sin 4x"

> x = rtriang(20,50) ;  list(x) ;  perm.test( x, mu=25, stat=median )
[[1]]
 [1] 30.40524 15.31453 31.00091 26.32719 12.48811 32.47034 24.47261 26.55805
 [9] 37.72072 10.85231 17.85734 20.01500 29.92382 14.97287 40.13176 29.57107
[17] 38.04053 27.94632 28.04178 30.12363

[[1]]
[1] "One-sample permutation test was performed."

[[2]]
[1] "p-value was estimated based on 20000 simulations."

$alternative
[1] "two.sided"

$mu
[1] 25

$p.value
[1] 0.362

> quantileCI( x, c(0.25, 0.5, 0.75)  )
        lower    upper
0.25 12.48811 27.94632
0.5  20.01500 30.40524
0.75 28.04178 38.04053
> power.binom.test( 20, 0.05, "less", 47, plaplace, 45.2, 3.7 )
[1] 0.6119434
> 
> 
> 
> cleanEx()
> nameEx("lineGraph")
> ### * lineGraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lineGraph
> ### Title: Line Graph Plotting
> ### Aliases: lineGraph
> ### Keywords: Line graph
> 
> ### ** Examples
> 
> lineGraph( c( rep(6,4), rep(9,7), rep(3,5), 5, 8, 8 ) )
> lineGraph( c( rep(6,4), rep(9,7), rep(3,5), 5, 8, 8 ), freq=FALSE )
> lineGraph( 11:14, , c( 12, 9, 17, 5 ) ) 
> 
> 
> cleanEx()
> nameEx("perm.cor.test")
> ### * perm.cor.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: perm.cor.test
> ### Title: Permutation Test on Correlation
> ### Aliases: perm.cor.test
> ### Keywords: Correlation Permutation test
> 
> ### ** Examples
> 
> x = c( 4, 6, 8, 11 ) ;   y = c( 19, 44, 15, 13 )
> perm.cor.test( x, y, "less", "pearson" ) 
[[1]]
[1] "Permutation correlation test.  Method is pearson"

[[2]]
[1] "p-value was estimated based on 20000 simulations."

$alternative
[1] "less"

$p.value
[1] 0.2863

> perm.cor.test( x, y, "less", "spearman" )
[[1]]
[1] "Permutation correlation test.  Method is spearman"

[[2]]
[1] "p-value was estimated based on 20000 simulations."

$alternative
[1] "less"

$p.value
[1] 0.16685

> 
> 
> 
> cleanEx()
> nameEx("perm.f.test")
> ### * perm.f.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: perm.f.test
> ### Title: Permutation Test on the F-statistic
> ### Aliases: perm.f.test
> ### Keywords: Permutation test Analysis of Variance
> 
> ### ** Examples
> 
> perm.f.test( c( 14,6,5,2,54,7,9,15,11,13,12 ), rep( c("I","II","III"), c(4,4,3) ) )
[[1]]
[1] "One-way ANOVA"

[[2]]
            Df  Sum Sq Mean Sq F value Pr(>F)
treatment    2  429.23  214.61  1.1109 0.3752
Residuals    8 1545.50  193.19               

[[3]]
[1] "The p-value from the permutation F-test based on"

[[4]]
[1] "20000 simulations is 0.4029"

> 
> 
> 
> cleanEx()
> nameEx("perm.test")
> ### * perm.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: perm.test
> ### Title: Permutation Test
> ### Aliases: perm.test
> ### Keywords: Permutation test
> 
> ### ** Examples
> 
> # One-sample test
> x = rnorm(10,0.5) ;  list(x) ;  perm.test( x, stat=median )
[[1]]
 [1] -0.1264538  0.6836433 -0.3356286  2.0952808  0.8295078 -0.3204684
 [7]  0.9874291  1.2383247  1.0757814  0.1946116

[[1]]
[1] "One-sample permutation test was performed."

[[2]]
[1] "p-value was calculated based on all permutations."

$alternative
[1] "two.sided"

$mu
[1] 0

$p.value
[1] 0.00390625

> 
> # Two-sample unpaired test
> y = rnorm(13, 1 ) ;  list(y) ;  perm.test( x, y )
[[1]]
 [1]  2.5117812  1.3898432  0.3787594 -1.2146999  2.1249309  0.9550664
 [7]  0.9838097  1.9438362  1.8212212  1.5939013  1.9189774  1.7821363
[13]  1.0745650

[[1]]
[1] "Unpaired two-sample permutation test was performed."

[[2]]
[1] "p-value was estimated based on 20000 simulations."

$alternative
[1] "two.sided"

$mu
[1] 0

$p.value
[1] 0.07485

> 
> 
> 
> cleanEx()
> nameEx("plaplace")
> ### * plaplace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plaplace
> ### Title: Laplace (Double Exponential) Cumulative Distribution Function
> ### Aliases: plaplace
> ### Keywords: Laplace Double exponential
> 
> ### ** Examples
> 
> plaplace( seq( 20, 80, length.out=11 ), 50, 10 )
 [1] 0.007184798 0.016785166 0.039213602 0.091611043 0.214022246 0.500000000
 [7] 0.785977754 0.908388957 0.960786398 0.983214834 0.992815202
> plaplace( seq( 20, 80, length.out=11 ), 50, 10, FALSE )
 [1] 0.992815202 0.983214834 0.960786398 0.908388957 0.785977754 0.500000000
 [7] 0.214022246 0.091611043 0.039213602 0.016785166 0.007184798
> 
> 
> 
> 
> cleanEx()
> nameEx("plotCI")
> ### * plotCI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCI
> ### Title: Confidence Interval Plot
> ### Aliases: plotCI
> ### Keywords: Confidence interval
> 
> ### ** Examples
> 
> # Plot 50 90%confidence intervals, each based on 13 observations from a 
> #    Normal( mean=70, sd=10 ) distribution.
> CI = replicate( 50, CI.t.test( rnorm( 13, 70, 10 ), 0.9 ) )
> plotCI( CI, 70 )
> 
> 
> 
> cleanEx()
> nameEx("plotEcdf")
> ### * plotEcdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotEcdf
> ### Title: Plotting Two Empirical Cumulative Distribution Functions
> ### Aliases: plotEcdf
> ### Keywords: Empirical distribution
> 
> ### ** Examples
> 
> plotEcdf( c(2,4,9,6), c(1,7,11,3,8) )
> plotEcdf( c(2,4,9,6), c(1,7,11,3) ) 
> 
> 
> 
> cleanEx()
> nameEx("plotVector")
> ### * plotVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotVector
> ### Title: Plotting Vector Addition
> ### Aliases: plotVector
> ### Keywords: Vector
> 
> ### ** Examples
> 
> # Vectors (2,8) and (4,-3) and their vector sum.
>      plotVector( 2, 8, 4, -3 ) 
>      
> # Colinear vectors (-3,6) and (-1,2).
>      plotVector( -3, 6, -1, 2, add=FALSE, col=c("red","black") )
> 
> # Colinear vectors (-1,2) and (3,-6).
>      plotVector( -1, 2, 3, -6, add=FALSE )
> 
> # Vectors (2,3) and (5,-4)
>      plotVector( 2, 3, 5, -4, add=FALSE, usr=c( -5, 5, -4, 7) )
> 
> # Vectors (2,3) and (-5,4) and their vector sum.
>      plotVector( 2, 3, -5, 4, usr=c( -5, 5, -4, 7 ) )
> 
> 
> 
> cleanEx()
> nameEx("power.binom.test")
> ### * power.binom.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.binom.test
> ### Title: Power Calculations for Exact Binomial Test
> ### Aliases: power.binom.test
> ### Keywords: Binomial test Power
> 
> ### ** Examples
> 
> # Alternative distribution is Normal( mean=55.7, sd=2.5 ).
> power.binom.test( 30, 0.05, "greater", 55, pnorm, 55.7, 2.5 )
[1] 0.3321649
> 
> # Alternative distribution is Laplace( mean=55.7, sd=2.5 ).
> power.binom.test( 30, 0.05, "greater", 55, plaplace, 55.7, 2.5 )
[1] 0.570145
> 
> 
> 
> cleanEx()
> nameEx("ptriang")
> ### * ptriang
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ptriang
> ### Title: Triangular Cumulative Distribution Function
> ### Aliases: ptriang
> ### Keywords: Triangular distribution
> 
> ### ** Examples
> 
> ptriang( seq( 100, 200, length.out=11 ), 100, 200 )
 [1] 0.00 0.02 0.08 0.18 0.32 0.50 0.68 0.82 0.92 0.98 1.00
> ptriang( seq( 100, 200, length.out=11 ), 100, 200, FALSE ) 
 [1] 1.00 0.98 0.92 0.82 0.68 0.50 0.32 0.18 0.08 0.02 0.00
> 
> 
> cleanEx()
> nameEx("qlaplace")
> ### * qlaplace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qlaplace
> ### Title: Laplace (Double Exponential) Quantile Function
> ### Aliases: qlaplace
> ### Keywords: Laplace Double exponential
> 
> ### ** Examples
> 
> # 5th, 15th, 25th, ..., 95th percentiles from a Laplace( 50, 10 ) distribution.
> qlaplace( seq( 0.05, 0.95, length.out=11 ), 50, 10 )
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpegFkhU/R.INSTALL48c95f06c5e4/jmuOutlier/R/qlaplace.R#11: 
 --- if/while statement is in package --- 
jmuOutlier
 --- call (currently evaluated) --- 
qlaplace(seq(0.05, 0.95, length.out = 11), 50, 10)
 --- R stacktrace ---
where 1: qlaplace(seq(0.05, 0.95, length.out = 11), 50, 10)

 --- value of length: 11 type: logical ---
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(p, mean=0, sd=1, lower.tail=TRUE) {
  # Laplace (double exponential) quantile function with mean equal to \code{mean} and standard deviation equal to \code{sd}. 
  # 'p': Vector of probabilities.
  # 'mean': Population mean.
  # 'sd': Population standard deviation.
  # 'lower.tail': Logical; if \code{TRUE} (default), probabilities are \code{P[X <= x]}; otherwise, \code{P[X > x]}.
  # example:  # 5th, 15th, 25th, ..., 95th percentiles from a Laplace( 50, 10 ) distribution.
  #           qlaplace( seq( 0.05, 0.95, length.out=11 ), 50, 10 )
  if (!is.numeric(p))  stop("'p' must be numeric.")
  if (p<0 | p>1)  stop("'p' must be between 0 and 1.")
  if (!is.numeric(mean))  stop("'mean' must be numeric.")
  if (!is.numeric(sd))  stop("'sd' must be numeric.")
  if (sd<0)  stop("'sd' cannot be negative.")
  if (!lower.tail)  p=1-p
  mean + ( 2*(p<=0.5)-1 ) * sd / sqrt(2) * log( 2 * (p*(p<=0.5)+(1-p)*(p>0.5)) )
}
<environment: namespace:jmuOutlier>
 --- function (body) search ---
Function qlaplace in namespace jmuOutlier has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
