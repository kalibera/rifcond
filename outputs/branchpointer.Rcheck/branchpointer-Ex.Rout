 --- srcref --- 
 at /tmp/Rtmp4KUl1I/R.INSTALL2d6e7744579ee/branchpointer/R/makeRegions.R#41: 
 --- call (function) --- 
makeRegions("ENSG00000139618", "gene_id", exons)
 --- stacktrace ---
where 1: makeRegions("ENSG00000139618", "gene_id", exons)

 --- value of length: 93 type: logical ---
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 --- function --- 
function(id, idType, exons) {

  validTypes <- c("gene_id", "transcript_id","exon_id")

  #missing or invalid types
  noType <- missing(idType)

  if(!noType){
    noType <-  noType | !(idType %in% validTypes)
  }


  if (!noType) {
    x <- which(colnames(mcols(exons)) == idType)
    y <- grep(id, mcols(exons)[,x])
  }else{
    y <- NA
  }

  #go through possible columns if no matches found
  if (is.na(y) | noType) {
    idType <- validTypes[1]
    x <- which(colnames(mcols(exons)) == idType)
    y <- grep(id, mcols(exons)[,x])

    if (length(y) == 0) {
      idType <- validTypes[2]
      x <- which(colnames(mcols(exons)) == idType)
      y <- grep(id, mcols(exons)[,x])
    }

    if (length(y) == 0) {
      idType <- validTypes[3]
      x <- which(colnames(mcols(exons)) == idType)
      y <- y <- grep(id, mcols(exons)[,x])
    }

    if (length(y) == 0) {
      stop(paste0("cannot find ", id," in the exon annotation"))
    }

  }

  #use a subset of the exon annotation for faster processing
  if (idType != "gene_id") {
    gene_id <- exons$gene_id[y[1]]
    y2 <- which(!is.na(match(exons$gene_id,gene_id)))
  }else{
    y2 <- y
  }

  exons.subset <- exons[y]

  #by definition first exons shouldn' have branchpoints
  keep <- which(exons.subset$exon_number > 1)

  if (as.logical(strand(exons.subset)[1] == "+")) {
    windowStarts <- (start(ranges(exons.subset)) - 50)[keep]
  }else{
    windowStarts <- (end(ranges(exons.subset)) + 10)[keep]
  }

  window <- exons.subset[keep]

  # giving errors trying to set as start(ranges(window))
  window@ranges@start <- as.integer(windowStarts)
  width(ranges(window)) <- 41

  return(getQueryLoc(window,queryType = "region",exons = exons[y2]))

}
<environment: namespace:branchpointer>
 --- function (body) search ---
Function makeRegions in namespace branchpointer has this body.
