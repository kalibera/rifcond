 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp4toXsP/R.INSTALL64ac2c2638c4/zeallot/R/operator.R#270: 
 --- if/while statement is in package --- 
zeallot
 --- call (currently evaluated) --- 
multi_assign(substitute(x), value, parent.frame())
 --- R stacktrace ---
where 1: multi_assign(substitute(x), value, parent.frame())
where 2: doTryCatch(return(expr), name, parentenv, handler)
where 3: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 4: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 5: doTryCatch(return(expr), name, parentenv, handler)
where 6: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 7: tryCatchList(expr, classes, parentenv, handlers)
where 8 at /var/scratch2/tomas/tmp/Rtmp4toXsP/R.INSTALL64ac2c2638c4/zeallot/R/operator.R#200: tryCatch(multi_assign(substitute(x), value, parent.frame()), 
    invalid_lhs = function(e) {
        stop("invalid `%<-%` left-hand side, ", e$message, call. = FALSE)
    }, invalid_rhs = function(e) {
        stop("invalid `%<-%` right-hand side, ", e$message, call. = FALSE)
    })
where 9: c(min_wt, q1_wt, med_wt, mean_wt, q3_wt, max_wt) %<-% summary(mtcars$wt)
where 10: eval(expr, envir, enclos)
where 11: eval(expr, envir, enclos)
where 12: withVisible(eval(expr, envir, enclos))
where 13: withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, 
    error = eHandler, message = mHandler)
where 14: handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, 
    enclos)), warning = wHandler, error = eHandler, message = mHandler))
where 15: timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, 
    envir, enclos)), warning = wHandler, error = eHandler, message = mHandler)))
where 16: evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, 
    debug = debug, last = i == length(out), use_try = stop_on_error != 
        2L, keep_warning = keep_warning, keep_message = keep_message, 
    output_handler = output_handler, include_timing = include_timing)
where 17 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/hooks.R#17: evaluate::evaluate(...)
where 18: evaluate(code, envir = env, new_device = FALSE, keep_warning = !isFALSE(options$warning), 
    keep_message = !isFALSE(options$message), stop_on_error = if (options$error && 
        options$include) 0L else 2L, output_handler = knit_handlers(options$render, 
        options))
where 19: in_dir(input_dir(), evaluate(code, envir = env, new_device = FALSE, 
    keep_warning = !isFALSE(options$warning), keep_message = !isFALSE(options$message), 
    stop_on_error = if (options$error && options$include) 0L else 2L, 
    output_handler = knit_handlers(options$render, options)))
where 20: block_exec(params)
where 21 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/block.R#6: call_block(x)
where 22 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/block.R#3: process_group.block(group)
where 23: process_group(group)
where 24 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/output.R#314: withCallingHandlers(if (tangle) process_tangle(group) else process_group(group), 
    error = function(e) {
        setwd(wd)
        cat(res, sep = "\n", file = output %n% "")
        message("Quitting from lines ", paste(current_lines(i), 
            collapse = "-"), " (", knit_concord$get("infile"), 
            ") ")
    })
where 25 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/output.R#258: process_file(text, output)
where 26 at /var/scratch2/tomas/tmp/RtmpiFnhvf/R.INSTALL2032429d4002/rmarkdown/R/render.R#486: knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet, 
    encoding = encoding)
where 27 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/utils-vignettes.R#40: rmarkdown::render(file, encoding = encoding, quiet = quiet, envir = globalenv())
where 28 at /var/scratch2/tomas/tmp/RtmpJ3m6tZ/R.INSTALL62535b5d8aec/knitr/R/utils-vignettes.R#92: vweave_rmarkdown(...)
where 29: engine$weave(file, quiet = quiet, encoding = enc)
where 30: doTryCatch(return(expr), name, parentenv, handler)
where 31: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 32: tryCatchList(expr, classes, parentenv, handlers)
where 33: tryCatch({
    engine$weave(file, quiet = quiet, encoding = enc)
    setwd(startdir)
    find_vignette_product(name, by = "weave", engine = engine)
}, error = function(e) {
    stop(gettextf("processing vignette '%s' failed with diagnostics:\n%s", 
        file, conditionMessage(e)), domain = NA, call. = FALSE)
})
where 34: buildVignettes(dir = "/var/scratch2/tomas/test/mine/R-ifc4/check/zeallot.Rcheck/vign_test/zeallot")

 --- value of length: 2 type: logical ---
[1] TRUE TRUE
 --- function (currently evaluated)--- 
function(x, value, env) {
  ast <- tree(x)
  internals <- calls(ast)
  lhs <- variables(ast)
  rhs <- value

  #
  # all lists or environemnts referenced in lhs must already exist
  #
  check_extract_calls(lhs, env)

  #
  # standard assignment
  #
  if (is.null(internals)) {
    if (is.language(lhs)) {
      assign_extract(lhs, value, envir = env)
    } else {
      assign(lhs, value, envir = env)
    }
    return(invisible(value))
  }

  #
  # *error* multiple assignment, but sinle RHS value
  #
  if (length(value) == 0) {
    stop_invalid_rhs(incorrect_number_of_values())
  }

  #
  # edge cases when RHS is not a list
  #
  if (!is_list(value)) {
    if (is.atomic(value)) {
      rhs <- as.list(value)
    } else {
      rhs <- destructure(value)
    }
  }

  #
  # tuples in question are variable names and value to assign
  #
  tuples <- pair_off(lhs, rhs, env)

  for (t in tuples) {
    name <- t[["name"]]
    val <- t[["value"]]

    if (is.language(name)) {
      assign_extract(name, val, envir = env)
      next
    }

    #
    # collector variable names retain the leading "..." in order to revert
    # list values back to vectors if necessary
    #
    if (is_collector(name)) {
      name <- sub("^\\.\\.\\.", "", name)

      if (is.atomic(value)) {
        val <- unlist(val)
      }
    }

    assign(name, val, envir = env)
  }

  invisible(value)
}
<bytecode: 0xcfb2aa0>
<environment: namespace:zeallot>
 --- function (body) search ---
Function multi_assign in namespace zeallot has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
