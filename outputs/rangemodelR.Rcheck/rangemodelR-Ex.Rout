
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rangemodelR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rangemodelR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("rangemod.1d")
> ### * rangemod.1d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangemod.1d
> ### Title: Range Cohesion Model for Ordered (and Non-spatial) Data
> ### Aliases: rangemod.1d
> 
> ### ** Examples
> 
> ## Not run: 
> ##D tempmat <- matrix(0,nrow=10,ncol=200,dimnames=list(letters[1:10],1:200))
> ##D tempmat <- as.matrix(apply(tempmat,2,function(x){rbinom(nrow(tempmat),1,
> ##D                      runif(1,0.1,1))}))
> ##D rownames(tempmat) <- letters[1:10]
> ##D temp <- rangemod.1d(tempmat,nb = NULL,var = NULL,rsize = "observed",reps = 5)
> ##D plot(temp[,1],ylim= c(min(temp[,1] -2),max(temp[,1]+2)),pch = 16,ylab = 'Species Richness')
> ##D segments(1:10,y0=temp[,1]-temp[,2],y1= temp[,1]+temp[,2])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rangemod.2d")
> ### * rangemod.2d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangemod.2d
> ### Title: Range Cohesion Models for Spatial Polygon Grids
> ### Aliases: rangemod.2d
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if(require(rgdal)&&require(maptools)&&require(rgeos)&&require(ggplot2)){
> ##D data(shp)
> ##D data(neigh_ob)
> ##D data(spmat)
> ##D mod.out <- rangemod.2d(spmat,shp,"ID",nb = neigh_ob,rsize = "observed",
> ##D                        var = NULL,reps = 5)
> ##D shp.out <- mod.out$out.shp
> ##D shp.out.df <- shp.out@data
> ##D shp.out.fort <- fortify(shp.out,region = "ID")
> ##D seq <- match(shp.out.fort$id,shp.out.df$ID)
> ##D shp.out.gg <- data.frame(shp.out.fort,shp.out.df[seq,])
> ##D ggplot(shp.out.gg)+
> ##D   geom_map(map=shp.out.gg,aes_string("long","lat",map_id="id",
> ##D                                      fill = "mod.rich"))+
> ##D   geom_path(aes(x = long,y = lat,group = group),colour = "white")+
> ##D   coord_equal() + theme_bw()+
> ##D   scale_fill_continuous(low = "white",high = "black")
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rangemod1d")
> ### * rangemod1d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangemod1d
> ### Title: Range Cohesion Model for Ordered (and Non-spatial) Data
> ### Aliases: rangemod1d
> 
> ### ** Examples
> 
> tempmat <- matrix(0,nrow=10,ncol=200,dimnames=list(letters[1:10],1:200))
> tempmat <- as.matrix(apply(tempmat,2,function(x){rbinom(nrow(tempmat),1,
+                      runif(1,0.1,1))}))
> rownames(tempmat) <- letters[1:10]
> temp <- rangemod1d(tempmat,nb = NULL,var = NULL,rsize = "observed",reps = 5)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
: 
 --- if/while statement is in package --- 
rangemodelR
 --- call (currently evaluated) --- 
withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
 --- R stacktrace ---
where 1: withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
where 2 at /var/scratch2/tomas/tmp/RtmpI5wVQX/R.INSTALLbf796ef8d04c/rangemodelR/R/randomrange.R#17: suppressWarnings(if (is.na(nb)) {
    sel.vec <- sample(uid, range.size, prob = var)
} else {
    sel.vec <- NULL
    sel.nb <- NULL
    if (first == T) {
        sel.vec <- c(sel.vec, sample(uid, 1, prob = var))
    }
    else {
        sel.vec <- c(sel.vec, sample(uid, 1))
    }
    if (range.size == 1) {
        sel.vec
    }
    else {
        sel.nb <- nb[which(uid %in% sel.vec[1])]
        sel.nb.vec <- unlist(sel.nb)
        if (is.null(var)) {
            for (i in 2:range.size) {
                sel.vec[i] <- sample(uid[unique(sel.nb.vec)], 
                  1)
                sel.nb <- nb[which(uid %in% sel.vec)]
                sel.nb.vec <- unlist(sel.nb)
                sel.nb.vec <- sel.nb.vec[!sel.nb.vec %in% which(uid %in% 
                  sel.vec)]
            }
        }
        else {
            for (i in 2:range.size) {
                sel.vec[i] <- sample(uid[unique(sel.nb.vec)], 
                  1, prob = var[unique(sel.nb.vec)])
                sel.nb <- nb[which(uid %in% sel.vec)]
                sel.nb.vec <- unlist(sel.nb)
                sel.nb.vec <- sel.nb.vec[!sel.nb.vec %in% which(uid %in% 
                  sel.vec)]
            }
        }
    }
})
where 3 at /var/scratch2/tomas/tmp/RtmpI5wVQX/R.INSTALLbf796ef8d04c/rangemodelR/R/rangemod1d.R#128: random.range(uid = rownames(spmat), nb = nblist, range.size = range.size[k], 
    var, first)
where 4: rangemod1d(tempmat, nb = NULL, var = NULL, rsize = "observed", 
    reps = 5)

 --- value of length: 10 type: logical ---
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function (expr, ...) 
{
    handlers <- list(...)
    classes <- names(handlers)
    parentenv <- parent.frame()
    if (length(classes) != length(handlers)) 
        stop("bad handler specification")
    .Internal(.addCondHands(classes, handlers, parentenv, NULL, 
        TRUE))
    expr
}
<bytecode: 0xd3bb00>
<environment: namespace:base>
 --- function (body) search ---
Function withCallingHandlers in namespace base has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
