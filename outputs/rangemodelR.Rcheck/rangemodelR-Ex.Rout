 --- srcref --- 
: 
 --- call (function) --- 
withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
 --- stacktrace ---
where 1: withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
where 2 at /tmp/Rtmp431C3k/R.INSTALL1af7327e7d5fa/rangemodelR/R/randomrange.R#17: suppressWarnings(if (is.na(nb)) {
    sel.vec <- sample(uid, range.size, prob = var)
} else {
    sel.vec <- NULL
    sel.nb <- NULL
    if (first == T) {
        sel.vec <- c(sel.vec, sample(uid, 1, prob = var))
    }
    else {
        sel.vec <- c(sel.vec, sample(uid, 1))
    }
    if (range.size == 1) {
        sel.vec
    }
    else {
        sel.nb <- nb[which(uid %in% sel.vec[1])]
        sel.nb.vec <- unlist(sel.nb)
        if (is.null(var)) {
            for (i in 2:range.size) {
                sel.vec[i] <- sample(uid[unique(sel.nb.vec)], 
                  1)
                sel.nb <- nb[which(uid %in% sel.vec)]
                sel.nb.vec <- unlist(sel.nb)
                sel.nb.vec <- sel.nb.vec[!sel.nb.vec %in% which(uid %in% 
                  sel.vec)]
            }
        }
        else {
            for (i in 2:range.size) {
                sel.vec[i] <- sample(uid[unique(sel.nb.vec)], 
                  1, prob = var[unique(sel.nb.vec)])
                sel.nb <- nb[which(uid %in% sel.vec)]
                sel.nb.vec <- unlist(sel.nb)
                sel.nb.vec <- sel.nb.vec[!sel.nb.vec %in% which(uid %in% 
                  sel.vec)]
            }
        }
    }
})
where 3 at /tmp/Rtmp431C3k/R.INSTALL1af7327e7d5fa/rangemodelR/R/rangemod1d.R#128: random.range(uid = rownames(spmat), nb = nblist, range.size = range.size[k], 
    var, first)
where 4: rangemod1d(tempmat, nb = NULL, var = NULL, rsize = "observed", 
    reps = 5)

 --- value of length: 10 type: logical ---
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 --- function --- 
function (expr, ...) 
{
    handlers <- list(...)
    classes <- names(handlers)
    parentenv <- parent.frame()
    if (length(classes) != length(handlers)) 
        stop("bad handler specification")
    .Internal(.addCondHands(classes, handlers, parentenv, NULL, 
        TRUE))
    expr
}
<bytecode: 0x5e98008>
<environment: namespace:base>
 --- function (body) search ---
Function withCallingHandlers in namespace base has this body.
