* using log directory ‘/var/scratch2/tomas/test/mine/R-75396/check/DMRcate.Rcheck’
* using R Under development (unstable) (2018-10-04 r75396)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘DMRcate/DESCRIPTION’ ... OK
* this is package ‘DMRcate’ version ‘1.16.0’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘DMRcate’ can be installed ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking sizes of PDF files under ‘inst/doc’ ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘DMRcate-Ex.R’ failed
The error most likely occurred in:

> ### Name: DMRcate-package
> ### Title: DMR calling from bisulphite sequencing and Illumina array data
> ### Aliases: DMRcate-package DMRcate
> 
> ### ** Examples
> 
> data(dmrcatedata)
> myMs <- logit2(myBetas)
> myMs.noSNPs <- rmSNPandCH(myMs, dist=2, mafcut=0.05)
> patient <- factor(sub("-.*", "", colnames(myMs)))
> type <- factor(sub(".*-", "", colnames(myMs)))
> design <- model.matrix(~patient + type) 
> myannotation <- cpg.annotate("array", myMs.noSNPs, what="M", arraytype = "450K",
+                              analysis.type="differential", design=design, coef=39)
Loading required package: IlluminaHumanMethylation450kanno.ilmn12.hg19
Your contrast returned 6091 individually significant probes. We recommend the default setting of pcutoff in dmrcate().
> dmrcoutput <- dmrcate(myannotation, lambda=1000, C=2)
Fitting chr20...
Demarcating regions...
Done!
> results.ranges <- extractRanges(dmrcoutput, genome = "hg19")
> groups <- c(Tumour="magenta", Normal="forestgreen")
> cols <- groups[as.character(type)]
> samps <- c(1:6, 38+(1:6))
> DMR.plot(ranges=results.ranges, dmr=1, CpGs=myBetas, phen.col=cols, genome="hg19", samps=samps)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpeWdWcZ/R.INSTALL75207912a45e/DMRcate/R/DMR.plot.R#13: 
 --- package (from environment) --- 
DMRcate
 --- call from context --- 
DMR.plot(ranges = results.ranges, dmr = 1, CpGs = myBetas, phen.col = cols, 
    genome = "hg19", samps = samps)
 --- call from argument --- 
if (arraytype == "450K") {
    grset <- makeGenomicRatioSetFromMatrix(CpGs, array = "IlluminaHumanMethylation450k", 
        annotation = "ilmn12.hg19", mergeManifest = TRUE, what = what)
}
 --- R stacktrace ---
where 1: DMR.plot(ranges = results.ranges, dmr = 1, CpGs = myBetas, phen.col = cols, 
    genome = "hg19", samps = samps)

 --- value of length: 2 type: logical ---
[1] FALSE  TRUE
 --- function from context --- 
function(ranges, dmr, CpGs, what=c("Beta", "M"), arraytype=c("EPIC", "450K"), phen.col, genome = c("hg19", "hg38", "mm10"), samps = NULL, ...)

{
  env <- new.env(parent=emptyenv())
  data(dmrcatedata, envir=env)
  stopifnot(class(CpGs) %in% c("matrix", "GRanges", "GenomicRatioSet"))
  stopifnot(dmr %in% 1:length(ranges))
  data(dmrcatedata)
  if(is.null(samps)){samps=1:length(phen.col)}
  group <- unique(names(phen.col))
  if(class(CpGs) %in% c("matrix", "GenomicRatioSet")){
    if(class(CpGs) == "matrix"){
      if(arraytype=="450K"){grset <- makeGenomicRatioSetFromMatrix(CpGs, array = "IlluminaHumanMethylation450k", annotation = "ilmn12.hg19", mergeManifest = TRUE, what = what)}
      if(arraytype=="EPIC"){grset <- makeGenomicRatioSetFromMatrix(CpGs, array = "IlluminaHumanMethylationEPIC", annotation = "ilm10b2.hg19", mergeManifest = TRUE, what = what)}
    }
    CpGs <- getBeta(grset)
    RSanno <- getAnnotation(grset)
    RSanno <- RSanno[order(RSanno$chr, RSanno$pos),]
    CpGs <- CpGs[rownames(RSanno),]
    colnames(CpGs) <- paste(colnames(CpGs), ".C", sep='')
    cov <- matrix(1, nrow(CpGs), ncol(CpGs), dimnames = list(rownames(CpGs), sub(".C$", ".cov", colnames(CpGs))))
    cpgs.ranges <- GRanges(RSanno$chr, IRanges(RSanno$pos, RSanno$pos))
    dummy <- matrix(0, nrow=nrow(CpGs), ncol=2*ncol(CpGs))
    dummy[,seq(1, 2*ncol(CpGs), 2)] <- CpGs
    dummy[,seq(2, 2*ncol(CpGs), 2)] <- cov
    colnames(dummy)[seq(2, 2*ncol(CpGs), 2)] <- colnames(cov)
    colnames(dummy)[seq(1, 2*ncol(CpGs), 2)] <- colnames(CpGs)
    values(cpgs.ranges) <- dummy 
  } else {
    stopifnot(length(colnames(values(CpGs)))/2 == length(phen.col))
    if(!all(gsub(".*\\.", "", colnames(values(CpGs))) == rep(c("C", "cov"), length(phen.col)))){
        stop("Error: Column names of values(ranges) might not be in the correct format. Must be c('<sample1>.C', '<sample1>.cov', '<sample2>.C', '<sample2>.cov'...) and so on for all samples.")
      }
    cpgs.ranges <- CpGs
  }
  ranges$ID <- paste0("DMR_", 1:length(ranges))
  ranges.reduce <- reduce(ranges+5000)
  dmrs.inplot <- ranges[ranges %over% ranges.reduce[subjectHits(findOverlaps(ranges[dmr], ranges.reduce))]]
  ranges.inplot <- ranges.reduce[ranges.reduce %over% dmrs.inplot]
  cpgs.ranges <- subsetByOverlaps(cpgs.ranges, ranges.inplot)
  methRatios <- as.data.frame(values(cpgs.ranges)[,grep("C$", colnames(values(cpgs.ranges)))])/
                as.data.frame(values(cpgs.ranges)[,grep("cov$", colnames(values(cpgs.ranges)))])
  methRatios <- GRanges(cpgs.ranges, mcols=methRatios)
  mcols(methRatios) <- mcols(methRatios)[samps]
  names(mcols(methRatios)) <- gsub("mcols.", "", gsub("*.C$", "", names(mcols(methRatios))))
  phen.col <- phen.col[samps]
  
 
  dt.group <- lapply(unique(names(phen.col)), function(i)
        DataTrack(methRatios[,names(phen.col) %in% i], name=i, background.title=phen.col[i],
                  type="heatmap", showSampleNames=TRUE, ylim=c(0, 1), genome=genome,
                  gradient=c("blue", "white", "red")))
 
  dt.group <- c(dt.group, list(DataTrack(methRatios, groups=names(phen.col), type="b",
                                             aggregateGroups=TRUE, col=phen.col[sort(group)], ylim=c(0, 1), name="Group means")))
     
  switch(genome, 
         hg19={tx=env$tx.hg19},
         hg38={tx=env$tx.hg38},
         mm10={tx=env$tx.mm10}
  )
  extras <- list(AnnotationTrack(dmrs.inplot, name="DMRs", showFeatureId=TRUE, col=NULL, fill="purple", id=dmrs.inplot$ID, 
                                 fontcolor="black"))
  #extras <- endoapply(extras, function(x) {
  #  chromosome(x) <- as.character(seqnames(methRatios[dmr]))
  #  x
  #})
  values(cpgs.ranges) <- NULL
    basetracks <- list(IdeogramTrack(genome = "hg19", chromosome = as.character(seqnames(ranges.inplot))),
                       GenomeAxisTrack(),
                       GeneRegionTrack(subsetByOverlaps(tx, ranges.inplot), name = "Gene", showId=TRUE, geneSymbol=TRUE, symbol = subsetByOverlaps(tx, ranges.inplot)$gene_name, col=NULL, fill="lightblue", transcriptAnnotation = "symbol", shape="arrow"),
                       AnnotationTrack(cpgs.ranges, name="CpGs", fill="green", col=NULL, stacking="dense"))
    plotTracks(c(basetracks, extras, dt.group), from=start(ranges.inplot), to=end(ranges.inplot), ...)
  }
<bytecode: 0x98ededb8>
<environment: namespace:DMRcate>
 --- function search by body ---
Function DMR.plot in namespace DMRcate has this body.
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ... OK
  Running ‘runTests.R’
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... NONE
* checking re-building of vignette outputs ... WARNING
Error in re-building vignettes:
  ...
  }
  if (datatype == "sequencing") {
    if (!all(c("stat", "chr", "pos", "diff", "fdr") %in% 
             colnames(object))) 
      stop("Error: object does not contain all required columns, was it created by DSS::DMLtest()? Must contain colNames 'stat', 'chr', 'pos', 'diff' and 'fdr'.")
    if(analysis.type != "differential")
      stop("Error: only differential analysis.type available for sequencing assays")
    annotated <- data.frame(ID = rownames(object), stat = object$stat, 
                            CHR = object$chr, pos = object$pos, betafc = object$diff, 
                            indfdr = object$fdr, is.sig=object$fdr < fdr)
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
  }
  else {
    message("Error: datatype must be one of 'array' or 'sequencing'")
  }
  return(annotated)
}
<bytecode: 0x4dfd8090>
<environment: namespace:DMRcate>
 --- function search by body ---
Function cpg.annotate in namespace DMRcate has this body.
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1

* checking PDF version of manual ... OK
* DONE
Status: 1 ERROR, 1 WARNING
