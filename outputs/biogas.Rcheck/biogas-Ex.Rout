
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "biogas"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('biogas')
biogas v 1.8.0.
For updates, join the biogas mailing list--send a message to sasha.hafner@eng.au.dk.
For a web app interface to the biogas package, browse to
https://biotransformers.shinyapps.io/oba1/.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("biogas-package")
> ### * biogas-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biogas-package
> ### Title: Process Biogas Data and Predict Biogas Production
> ### Aliases: biogas-package biogas
> ### Keywords: package univar
> 
> ### ** Examples
> 
> # Calculate BMP with data from a laboratory BMP test, and compare results for 
> # cellulose to the expected value
> 
> # First load example data sets
> data("vol")
> data("comp")
> data("setup")
> 
> # vol has measured biogas volumes
> head(vol)
   id           date.time days vol
1 2_1 2014-06-07 06:00:00 1.98 393
2 2_1 2014-06-08 06:00:00 2.98 260
3 2_1 2014-06-09 06:00:00 3.98 245
4 2_1 2014-06-10 06:00:00 4.98 225
5 2_1 2014-06-11 06:00:00 5.98 200
6 2_1 2014-06-12 07:00:00 7.02 175
> 
> # comp has measured biogas composition
> head(comp)
     id           date.time  days      xCH4
516 2_1 2014-06-12 07:00:00  7.02 0.7104731
519 2_1 2014-06-19 07:00:00 14.02 0.7024937
522 2_1 2014-06-26 04:00:00 20.90 0.6659919
524 2_1 2014-07-03 03:00:00 27.85 0.6789466
525 2_1 2014-07-10 02:00:00 34.81 0.6951429
528 2_1 2014-07-24 03:00:00 48.85 0.6693053
> 
> # setup has information on batch reactor content
> head(setup)
   id descrip   msub  minoc  mvs.sub mvs.inoc mcod.sub mcod.inoc  m.tot
1 2_1       A 178.96 328.82 3.839567 12.92268 5.527522  19.09109 657.78
5 2_2       A 178.58 350.90 3.831414 13.79043 5.515785  20.37305 679.79
6 2_3       A 178.58 326.61 3.831414 12.83583 5.515785  18.96278 654.68
7 2_4       B  40.21 465.32 5.333816 18.28716 8.325115  27.01620 655.22
8 2_5       B  40.04 461.90 5.311266 18.15275 8.289918  26.81764 652.56
9 2_6       B  40.13 475.61 5.323204 18.69156 8.308551  27.61363 665.76
   mvs.tot mcod.tot
1 16.76225 24.61862
5 17.62184 25.88883
6 16.66724 24.47857
7 23.62097 35.34132
8 23.46402 35.10756
9 24.01476 35.92219
> 
> # Calculate cumulative biogas and methane production volumes at dry conditions and 
> # 0 degrees C and 1.0 atm
> cum.vol <- cumBg(vol, comp = comp, time.name = "days", temp = 35, 
+                  pres = 1, extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> 
> head(cum.vol)
   id           date.time days vol      xCH4 temperature pressure      vBg
1 2_1                <NA> 0.00  NA        NA          NA       NA   0.0000
2 2_1 2014-06-07 06:00:00 1.98 393 0.7104731          35        1 328.9470
3 2_1 2014-06-08 06:00:00 2.98 260 0.7104731          35        1 217.6240
4 2_1 2014-06-09 06:00:00 3.98 245 0.7104731          35        1 205.0687
5 2_1 2014-06-10 06:00:00 4.98 225 0.7104731          35        1 188.3284
6 2_1 2014-06-11 06:00:00 5.98 200 0.7104731          35        1 167.4031
      vCH4      cvBg    cvCH4     rvBg    rvCH4
1   0.0000    0.0000   0.0000       NA       NA
2 234.0036  328.9470 234.0036 166.1348 118.1837
3 154.8116  546.5710 388.8152 217.6240 154.8116
4 145.8801  751.6397 534.6954 205.0687 145.8801
5 133.9716  939.9681 668.6669 188.3284 133.9716
6 119.0858 1107.3712 787.7527 167.4031 119.0858
> 
> dim(cum.vol)
[1] 300  13
> 
> cum.vol
      id           date.time   days vol      xCH4 temperature pressure
1    2_1                <NA>   0.00  NA        NA          NA       NA
2    2_1 2014-06-07 06:00:00   1.98 393 0.7104731          35        1
3    2_1 2014-06-08 06:00:00   2.98 260 0.7104731          35        1
4    2_1 2014-06-09 06:00:00   3.98 245 0.7104731          35        1
5    2_1 2014-06-10 06:00:00   4.98 225 0.7104731          35        1
6    2_1 2014-06-11 06:00:00   5.98 200 0.7104731          35        1
7    2_1 2014-06-12 07:00:00   7.02 175 0.7104731          35        1
8    2_1 2014-06-14 07:00:00   9.02 220 0.7081933          35        1
9    2_1 2014-06-16 07:00:00  11.02 180 0.7059134          35        1
10   2_1 2014-06-19 07:00:00  14.02 200 0.7024937          35        1
11   2_1 2014-06-21 06:00:00  15.98 110 0.6920949          35        1
12   2_1 2014-06-23 07:00:00  18.02 100 0.6812717          35        1
13   2_1 2014-06-26 04:00:00  20.90 115 0.6659919          35        1
14   2_1 2014-06-30 06:00:00  24.98 145 0.6735970          35        1
15   2_1 2014-07-03 03:00:00  27.85 110 0.6789466          35        1
16   2_1 2014-07-10 02:00:00  34.81 210 0.6951429          35        1
17   2_1 2014-07-13 07:00:00  38.02 122 0.6892356          35        1
18   2_1 2014-07-17 06:30:00  42.00 125 0.6819113          35        1
19   2_1 2014-07-24 03:00:00  48.85 180 0.6693053          35        1
20   2_1 2014-07-31 06:00:00  55.98 140 0.6664082          35        1
21   2_1 2014-08-14 06:00:00  69.98 170 0.6694653          35        1
22   2_1 2014-08-28 03:00:00  83.85 170 0.6676999          35        1
23   2_1 2014-10-06 03:45:00 122.89 312 0.6963397          35        1
24   2_1 2014-10-13 06:00:00 129.98  98 0.6963397          35        1
25   2_1 2014-12-19 03:30:00 196.92 283 0.6963397          35        1
26   2_2                <NA>   0.00  NA        NA          NA       NA
27   2_2 2014-06-07 06:00:00   1.98 400 0.7067009          35        1
28   2_2 2014-06-08 06:00:00   2.98 262 0.7067009          35        1
29   2_2 2014-06-09 06:00:00   3.98 250 0.7067009          35        1
30   2_2 2014-06-10 06:00:00   4.98 235 0.7067009          35        1
31   2_2 2014-06-11 06:00:00   5.98 200 0.7067009          35        1
32   2_2 2014-06-12 07:00:00   7.02 180 0.7067009          35        1
33   2_2 2014-06-14 07:00:00   9.02 230 0.6998463          35        1
34   2_2 2014-06-16 07:00:00  11.02 180 0.6929917          35        1
35   2_2 2014-06-19 07:00:00  14.02 200 0.6827099          35        1
36   2_2 2014-06-21 06:00:00  15.98 120 0.6755993          35        1
37   2_2 2014-06-23 07:00:00  18.02 102 0.6681984          35        1
38   2_2 2014-06-26 04:00:00  20.90 120 0.6577502          35        1
39   2_2 2014-06-30 06:00:00  24.98 160 0.6587972          35        1
40   2_2 2014-07-03 03:00:00  27.85 120 0.6595336          35        1
41   2_2 2014-07-10 02:00:00  34.81 239 0.6875488          35        1
42   2_2 2014-07-13 07:00:00  38.02 138 0.6823446          35        1
43   2_2 2014-07-17 06:30:00  42.00 140 0.6758921          35        1
44   2_2 2014-07-24 03:00:00  48.85 200 0.6647865          35        1
45   2_2 2014-07-31 06:00:00  55.98 141 0.6488668          35        1
46   2_2 2014-08-14 06:00:00  69.98 180 0.6694653          35        1
47   2_2 2014-08-28 03:00:00  83.85 180 0.6563663          35        1
48   2_2 2014-10-06 03:45:00 122.89 333 0.6958987          35        1
49   2_2 2014-10-13 06:00:00 129.98 110 0.6958987          35        1
50   2_2 2014-12-19 03:30:00 196.92 299 0.6958987          35        1
51   2_3                <NA>   0.00  NA        NA          NA       NA
52   2_3 2014-06-07 06:00:00   1.98 345 0.6922675          35        1
53   2_3 2014-06-08 06:00:00   2.98 275 0.6922675          35        1
54   2_3 2014-06-09 06:00:00   3.98 250 0.6922675          35        1
55   2_3 2014-06-10 06:00:00   4.98 225 0.6922675          35        1
56   2_3 2014-06-11 06:00:00   5.98 200 0.6922675          35        1
57   2_3 2014-06-12 07:00:00   7.02 180 0.6922675          35        1
58   2_3 2014-06-14 07:00:00   9.02 232 0.6875954          35        1
59   2_3 2014-06-16 07:00:00  11.02 180 0.6829232          35        1
60   2_3 2014-06-19 07:00:00  14.02 195 0.6759151          35        1
61   2_3 2014-06-21 06:00:00  15.98 115 0.6686978          35        1
62   2_3 2014-06-23 07:00:00  18.02 100 0.6611860          35        1
63   2_3 2014-06-26 04:00:00  20.90 118 0.6505811          35        1
64   2_3 2014-06-30 06:00:00  24.98 150 0.6555379          35        1
65   2_3 2014-07-03 03:00:00  27.85 113 0.6590247          35        1
66   2_3 2014-07-10 02:00:00  34.81 219 0.6784779          35        1
67   2_3 2014-07-13 07:00:00  38.02 138 0.6740337          35        1
68   2_3 2014-07-17 06:30:00  42.00 130 0.6685233          35        1
69   2_3 2014-07-24 03:00:00  48.85 175 0.6590395          35        1
70   2_3 2014-07-31 06:00:00  55.98 138 0.6459742          35        1
71   2_3 2014-08-14 06:00:00  69.98 175 0.6571792          35        1
72   2_3 2014-08-28 03:00:00  83.85 170 0.6566590          35        1
73   2_3 2014-10-06 03:45:00 122.89 325 0.6815748          35        1
74   2_3 2014-10-13 06:00:00 129.98  98 0.6815748          35        1
75   2_3 2014-12-19 03:30:00 196.92 304 0.6815748          35        1
76   2_4                <NA>   0.00  NA        NA          NA       NA
77   2_4 2014-06-07 06:00:00   1.98 445 0.7021833          35        1
78   2_4 2014-06-08 06:00:00   2.98 250 0.7021833          35        1
79   2_4 2014-06-09 06:00:00   3.98 220 0.7021833          35        1
80   2_4 2014-06-10 06:00:00   4.98 225 0.7021833          35        1
81   2_4 2014-06-11 06:00:00   5.98 220 0.7021833          35        1
82   2_4 2014-06-12 07:00:00   7.02 241 0.7021833          35        1
83   2_4 2014-06-14 07:00:00   9.02 320 0.6941478          35        1
84   2_4 2014-06-16 07:00:00  11.02 280 0.6861123          35        1
85   2_4 2014-06-19 07:00:00  14.02 320 0.6740591          35        1
86   2_4 2014-06-21 06:00:00  15.98 200 0.6623013          35        1
87   2_4 2014-06-23 07:00:00  18.02 166 0.6500636          35        1
88   2_4 2014-06-26 04:00:00  20.90 190 0.6327869          35        1
89   2_4 2014-06-30 06:00:00  24.98 225 0.6303918          35        1
90   2_4 2014-07-03 03:00:00  27.85 160 0.6287070          35        1
91   2_4 2014-07-10 02:00:00  34.81 340 0.6642903          35        1
92   2_4 2014-07-13 07:00:00  38.02 203 0.6586985          35        1
93   2_4 2014-07-17 06:30:00  42.00 190 0.6517653          35        1
94   2_4 2014-07-24 03:00:00  48.85 282 0.6398326          35        1
95   2_4 2014-07-31 06:00:00  55.98 220 0.6262268          35        1
96   2_4 2014-08-14 06:00:00  69.98 260 0.6317172          35        1
97   2_4 2014-08-28 03:00:00  83.85 255 0.6329799          35        1
98   2_4 2014-10-06 03:45:00 122.89 485 0.6681050          35        1
99   2_4 2014-10-13 06:00:00 129.98 135 0.6681050          35        1
100  2_4 2014-12-19 03:30:00 196.92 459 0.6681050          35        1
101  2_5                <NA>   0.00  NA        NA          NA       NA
102  2_5 2014-06-07 06:00:00   1.98 490 0.6829821          35        1
103  2_5 2014-06-08 06:00:00   2.98 266 0.6829821          35        1
104  2_5 2014-06-09 06:00:00   3.98 255 0.6829821          35        1
105  2_5 2014-06-10 06:00:00   4.98 266 0.6829821          35        1
106  2_5 2014-06-11 06:00:00   5.98 260 0.6829821          35        1
107  2_5 2014-06-12 07:00:00   7.02 247 0.6829821          35        1
108  2_5 2014-06-14 07:00:00   9.02 330 0.6764510          35        1
109  2_5 2014-06-16 07:00:00  11.02 280 0.6699198          35        1
110  2_5 2014-06-19 07:00:00  14.02 305 0.6601230          35        1
111  2_5 2014-06-21 06:00:00  15.98 218 0.6510016          35        1
112  2_5 2014-06-23 07:00:00  18.02 170 0.6415078          35        1
113  2_5 2014-06-26 04:00:00  20.90 200 0.6281049          35        1
114  2_5 2014-06-30 06:00:00  24.98 240 0.6307257          35        1
115  2_5 2014-07-03 03:00:00  27.85 165 0.6325693          35        1
116  2_5 2014-07-10 02:00:00  34.81 359 0.6631855          35        1
117  2_5 2014-07-13 07:00:00  38.02 184 0.6568231          35        1
118  2_5 2014-07-17 06:30:00  42.00 200 0.6489345          35        1
119  2_5 2014-07-24 03:00:00  48.85 270 0.6353574          35        1
120  2_5 2014-07-31 06:00:00  55.98 207 0.6201903          35        1
121  2_5 2014-08-14 06:00:00  69.98 270 0.6341000          35        1
122  2_5 2014-08-28 03:00:00  83.85 260 0.6318964          35        1
123  2_5 2014-10-06 03:45:00 122.89 500 0.6667626          35        1
124  2_5 2014-10-13 06:00:00 129.98 135 0.6667626          35        1
125  2_5 2014-12-19 03:30:00 196.92 456 0.6667626          35        1
126  2_6                <NA>   0.00  NA        NA          NA       NA
127  2_6 2014-06-07 06:00:00   1.98 385 0.6796868          35        1
128  2_6 2014-06-08 06:00:00   2.98 270 0.6796868          35        1
129  2_6 2014-06-09 06:00:00   3.98 260 0.6796868          35        1
130  2_6 2014-06-10 06:00:00   4.98 275 0.6796868          35        1
131  2_6 2014-06-11 06:00:00   5.98 260 0.6796868          35        1
132  2_6 2014-06-12 07:00:00   7.02 245 0.6796868          35        1
133  2_6 2014-06-14 07:00:00   9.02 330 0.6747005          35        1
134  2_6 2014-06-16 07:00:00  11.02 300 0.6697142          35        1
135  2_6 2014-06-19 07:00:00  14.02 325 0.6622347          35        1
136  2_6 2014-06-21 06:00:00  15.98 205 0.6515927          35        1
137  2_6 2014-06-23 07:00:00  18.02 175 0.6405164          35        1
138  2_6 2014-06-26 04:00:00  20.90 200 0.6248792          35        1
139  2_6 2014-06-30 06:00:00  24.98 225 0.6231442          35        1
140  2_6 2014-07-03 03:00:00  27.85 175 0.6219237          35        1
141  2_6 2014-07-10 02:00:00  34.81 367 0.6600131          35        1
142  2_6 2014-07-13 07:00:00  38.02 200 0.6549911          35        1
143  2_6 2014-07-17 06:30:00  42.00 190 0.6487644          35        1
144  2_6 2014-07-24 03:00:00  48.85 300 0.6380476          35        1
145  2_6 2014-07-31 06:00:00  55.98 212 0.6177028          35        1
146  2_6 2014-08-14 06:00:00  69.98 280 0.6346967          35        1
147  2_6 2014-08-28 03:00:00  83.85 261 0.6336908          35        1
148  2_6 2014-10-06 03:45:00 122.89 499 0.6731467          35        1
149  2_6 2014-10-13 06:00:00 129.98 153 0.6731467          35        1
150  2_6 2014-12-19 03:30:00 196.92 452 0.6731467          35        1
151  2_7                <NA>   0.00  NA        NA          NA       NA
152  2_7 2014-06-07 06:00:00   1.98 560 0.5646855          35        1
153  2_7 2014-06-08 06:00:00   2.98 750 0.5646855          35        1
154  2_7 2014-06-09 06:00:00   3.98 840 0.5646855          35        1
155  2_7 2014-06-10 06:00:00   4.98 720 0.5646855          35        1
156  2_7 2014-06-11 06:00:00   5.98 580 0.5646855          35        1
157  2_7 2014-06-12 07:00:00   7.02 620 0.5646855          35        1
158  2_7 2014-06-14 07:00:00   9.02 840 0.5941170          35        1
159  2_7 2014-06-16 07:00:00  11.02 640 0.6235486          35        1
160  2_7 2014-06-19 07:00:00  14.02 560 0.6676959          35        1
161  2_7 2014-06-21 06:00:00  15.98 290 0.6525285          35        1
162  2_7 2014-06-23 07:00:00  18.02 195 0.6367420          35        1
163  2_7 2014-06-26 04:00:00  20.90 207 0.6144552          35        1
164  2_7 2014-06-30 06:00:00  24.98 240 0.6198862          35        1
165  2_7 2014-07-03 03:00:00  27.85 170 0.6237065          35        1
166  2_7 2014-07-10 02:00:00  34.81 318 0.6590416          35        1
167  2_7 2014-07-13 07:00:00  38.02 179 0.6567546          35        1
168  2_7 2014-07-17 06:30:00  42.00 180 0.6539190          35        1
169  2_7 2014-07-24 03:00:00  48.85 320 0.6490386          35        1
170  2_7 2014-07-31 06:00:00  55.98 227 0.6349868          35        1
171  2_7 2014-08-14 06:00:00  69.98 260 0.6408905          35        1
172  2_7 2014-08-28 03:00:00  83.85 222 0.6329716          35        1
173  2_7 2014-10-06 03:45:00 122.89 420 0.6716706          35        1
174  2_7 2014-10-13 06:00:00 129.98 135 0.6716706          35        1
175  2_7 2014-12-19 03:30:00 196.92 402 0.6716706          35        1
176  2_8                <NA>   0.00  NA        NA          NA       NA
177  2_8 2014-06-07 06:00:00   1.98 600 0.5682203          35        1
178  2_8 2014-06-08 06:00:00   2.98 795 0.5682203          35        1
179  2_8 2014-06-09 06:00:00   3.98 840 0.5682203          35        1
180  2_8 2014-06-10 06:00:00   4.98 760 0.5682203          35        1
181  2_8 2014-06-11 06:00:00   5.98 567 0.5682203          35        1
182  2_8 2014-06-12 07:00:00   7.02 615 0.5682203          35        1
183  2_8 2014-06-14 07:00:00   9.02 780 0.5932560          35        1
184  2_8 2014-06-16 07:00:00  11.02 695 0.6182917          35        1
185  2_8 2014-06-19 07:00:00  14.02 590 0.6558452          35        1
186  2_8 2014-06-21 06:00:00  15.98 275 0.6429072          35        1
187  2_8 2014-06-23 07:00:00  18.02 202 0.6294411          35        1
188  2_8 2014-06-26 04:00:00  20.90 220 0.6104301          35        1
189  2_8 2014-06-30 06:00:00  24.98 240 0.6153108          35        1
190  2_8 2014-07-03 03:00:00  27.85 175 0.6187440          35        1
191  2_8 2014-07-10 02:00:00  34.81 329 0.6571400          35        1
192  2_8 2014-07-13 07:00:00  38.02 178 0.6551042          35        1
193  2_8 2014-07-17 06:30:00  42.00 185 0.6525800          35        1
194  2_8 2014-07-24 03:00:00  48.85 310 0.6482357          35        1
195  2_8 2014-07-31 06:00:00  55.98 265 0.6376263          35        1
196  2_8 2014-08-14 06:00:00  69.98 280 0.6425198          35        1
197  2_8 2014-08-28 03:00:00  83.85 240 0.6316698          35        1
198  2_8 2014-10-06 03:45:00 122.89 430 0.6749096          35        1
199  2_8 2014-10-13 06:00:00 129.98 137 0.6749096          35        1
200  2_8 2014-12-19 03:30:00 196.92 422 0.6749096          35        1
201  2_9                <NA>   0.00  NA        NA          NA       NA
202  2_9 2014-06-07 06:00:00   1.98 620 0.5746770          35        1
203  2_9 2014-06-08 06:00:00   2.98 785 0.5746770          35        1
204  2_9 2014-06-09 06:00:00   3.98 780 0.5746770          35        1
205  2_9 2014-06-10 06:00:00   4.98 780 0.5746770          35        1
206  2_9 2014-06-11 06:00:00   5.98 620 0.5746770          35        1
207  2_9 2014-06-12 07:00:00   7.02 560 0.5746770          35        1
208  2_9 2014-06-14 07:00:00   9.02 790 0.6047849          35        1
209  2_9 2014-06-16 07:00:00  11.02 650 0.6348927          35        1
210  2_9 2014-06-19 07:00:00  14.02 585 0.6800545          35        1
211  2_9 2014-06-21 06:00:00  15.98 282 0.6615749          35        1
212  2_9 2014-06-23 07:00:00  18.02 213 0.6423409          35        1
213  2_9 2014-06-26 04:00:00  20.90 226 0.6151872          35        1
214  2_9 2014-06-30 06:00:00  24.98 255 0.6179991          35        1
215  2_9 2014-07-03 03:00:00  27.85 178 0.6199772          35        1
216  2_9 2014-07-10 02:00:00  34.81 326 0.6624671          35        1
217  2_9 2014-07-13 07:00:00  38.02 200 0.6600061          35        1
218  2_9 2014-07-17 06:30:00  42.00 180 0.6569549          35        1
219  2_9 2014-07-24 03:00:00  48.85 320 0.6517034          35        1
220  2_9 2014-07-31 06:00:00  55.98 266 0.6349591          35        1
221  2_9 2014-08-14 06:00:00  69.98 278 0.6397292          35        1
222  2_9 2014-08-28 03:00:00  83.85 240 0.6278492          35        1
223  2_9 2014-10-06 03:45:00 122.89 445 0.6722758          35        1
224  2_9 2014-10-13 06:00:00 129.98 132 0.6722758          35        1
225  2_9 2014-12-19 03:30:00 196.92 445 0.6722758          35        1
226 2_10                <NA>   0.00  NA        NA          NA       NA
227 2_10 2014-06-07 06:00:00   1.98 290 0.7115119          35        1
228 2_10 2014-06-08 06:00:00   2.98 165 0.7115119          35        1
229 2_10 2014-06-09 06:00:00   3.98 150 0.7115119          35        1
230 2_10 2014-06-10 06:00:00   4.98 175 0.7115119          35        1
231 2_10 2014-06-11 06:00:00   5.98 165 0.7115119          35        1
232 2_10 2014-06-12 07:00:00   7.02 205 0.7115119          35        1
233 2_10 2014-06-14 07:00:00   9.02 245 0.7080647          35        1
234 2_10 2014-06-16 07:00:00  11.02 233 0.7046176          35        1
235 2_10 2014-06-19 07:00:00  14.02 240 0.6994469          35        1
236 2_10 2014-06-21 06:00:00  15.98 158 0.6894626          35        1
237 2_10 2014-06-23 07:00:00  18.02 117 0.6790707          35        1
238 2_10 2014-06-26 04:00:00  20.90 150 0.6643999          35        1
239 2_10 2014-06-30 06:00:00  24.98 175 0.6586176          35        1
240 2_10 2014-07-03 03:00:00  27.85 120 0.6545502          35        1
241 2_10 2014-07-10 02:00:00  34.81 265 0.6817957          35        1
242 2_10 2014-07-13 07:00:00  38.02 170 0.6768089          35        1
243 2_10 2014-07-17 06:30:00  42.00 166 0.6706259          35        1
244 2_10 2014-07-24 03:00:00  48.85 230 0.6599842          35        1
245 2_10 2014-07-31 06:00:00  55.98 161 0.6457069          35        1
246 2_10 2014-08-14 06:00:00  69.98 207 0.6528733          35        1
247 2_10 2014-08-28 03:00:00  83.85 200 0.6491838          35        1
248 2_10 2014-10-06 03:45:00 122.89 383 0.6938179          35        1
249 2_10 2014-10-13 06:00:00 129.98 120 0.6938179          35        1
250 2_10 2014-12-19 03:30:00 196.92 371 0.6938179          35        1
251 2_11                <NA>   0.00  NA        NA          NA       NA
252 2_11 2014-06-07 06:00:00   1.98 293 0.7068721          35        1
253 2_11 2014-06-08 06:00:00   2.98 160 0.7068721          35        1
254 2_11 2014-06-09 06:00:00   3.98 150 0.7068721          35        1
255 2_11 2014-06-10 06:00:00   4.98 165 0.7068721          35        1
256 2_11 2014-06-11 06:00:00   5.98 183 0.7068721          35        1
257 2_11 2014-06-12 07:00:00   7.02 195 0.7068721          35        1
258 2_11 2014-06-14 07:00:00   9.02 260 0.7033480          35        1
259 2_11 2014-06-16 07:00:00  11.02 240 0.6998240          35        1
260 2_11 2014-06-19 07:00:00  14.02 238 0.6945379          35        1
261 2_11 2014-06-21 06:00:00  15.98 150 0.6857091          35        1
262 2_11 2014-06-23 07:00:00  18.02 117 0.6765201          35        1
263 2_11 2014-06-26 04:00:00  20.90 150 0.6635473          35        1
264 2_11 2014-06-30 06:00:00  24.98 170 0.6609106          35        1
265 2_11 2014-07-03 03:00:00  27.85 120 0.6590560          35        1
266 2_11 2014-07-10 02:00:00  34.81 273 0.6850226          35        1
267 2_11 2014-07-13 07:00:00  38.02 172 0.6791391          35        1
268 2_11 2014-07-17 06:30:00  42.00 163 0.6718442          35        1
269 2_11 2014-07-24 03:00:00  48.85 240 0.6592889          35        1
270 2_11 2014-07-31 06:00:00  55.98 166 0.6443147          35        1
271 2_11 2014-08-14 06:00:00  69.98 210 0.6534706          35        1
272 2_11 2014-08-28 03:00:00  83.85 360 0.6528704          35        1
273 2_11 2014-10-06 03:45:00 122.89 380 0.6885393          35        1
274 2_11 2014-10-13 06:00:00 129.98 205 0.6885393          35        1
275 2_11 2014-12-19 03:30:00 196.92 360 0.6885393          35        1
276 2_12                <NA>   0.00  NA        NA          NA       NA
277 2_12 2014-06-07 06:00:00   1.98 280 0.7005369          35        1
278 2_12 2014-06-08 06:00:00   2.98 165 0.7005369          35        1
279 2_12 2014-06-09 06:00:00   3.98 158 0.7005369          35        1
280 2_12 2014-06-10 06:00:00   4.98 170 0.7005369          35        1
281 2_12 2014-06-11 06:00:00   5.98 180 0.7005369          35        1
282 2_12 2014-06-12 07:00:00   7.02 200 0.7005369          35        1
283 2_12 2014-06-14 07:00:00   9.02 266 0.6986216          35        1
284 2_12 2014-06-16 07:00:00  11.02 207 0.6967064          35        1
285 2_12 2014-06-19 07:00:00  14.02 235 0.6938335          35        1
286 2_12 2014-06-21 06:00:00  15.98 150 0.6860180          35        1
287 2_12 2014-06-23 07:00:00  18.02 235 0.6778836          35        1
288 2_12 2014-06-26 04:00:00  20.90 170 0.6663996          35        1
289 2_12 2014-06-30 06:00:00  24.98 175 0.6577357          35        1
290 2_12 2014-07-03 03:00:00  27.85 125 0.6516412          35        1
291 2_12 2014-07-10 02:00:00  34.81 261 0.6819052          35        1
292 2_12 2014-07-13 07:00:00  38.02 168 0.6767818          35        1
293 2_12 2014-07-17 06:30:00  42.00 160 0.6704295          35        1
294 2_12 2014-07-24 03:00:00  48.85 240 0.6594964          35        1
295 2_12 2014-07-31 06:00:00  55.98 167 0.6371487          35        1
296 2_12 2014-08-14 06:00:00  69.98 210 0.6451577          35        1
297 2_12 2014-08-28 03:00:00  83.85 201 0.6467694          35        1
298 2_12 2014-10-06 03:45:00 122.89 396 0.6865428          35        1
299 2_12 2014-10-13 06:00:00 129.98 105 0.6865428          35        1
300 2_12 2014-12-19 03:30:00 196.92 362 0.6865428          35        1
          vBg      vCH4      cvBg     cvCH4       rvBg      rvCH4
1     0.00000   0.00000    0.0000    0.0000         NA         NA
2   328.94700 234.00365  328.9470  234.0036 166.134849 118.183661
3   217.62397 154.81157  546.5710  388.8152 217.623970 154.811574
4   205.06874 145.88014  751.6397  534.6954 205.068741 145.880137
5   188.32844 133.97155  939.9681  668.6669 188.328436 133.971554
6   167.40305 119.08583 1107.3712  787.7527 167.403054 119.085826
7   146.47767 104.20010 1253.8489  891.9528 140.843916 100.192402
8   184.14336 130.57536 1437.9922 1022.5282  92.071680  65.287681
9   150.66275 106.49152 1588.6550 1129.0197  75.331374  53.245762
10  167.40305 117.75246 1756.0580 1246.7722  55.801018  39.250821
11   92.07168  63.80808 1848.1297 1310.5803  46.975347  32.555142
12   83.70153  57.10291 1931.8312 1367.6832  41.030160  27.991621
13   96.25676  64.19980 2028.0880 1431.8830  33.422485  22.291596
14  121.36721  81.86920 2149.4552 1513.7522  29.746866  20.065981
15   92.07168  62.59946 2241.5269 1576.3516  32.080725  21.811659
16  175.77321 122.35027 2417.3001 1698.7019  25.254771  17.579062
17  102.11586  70.47747 2519.4160 1769.1794  31.811795  21.955597
18  104.62691  71.44544 2624.0429 1840.6248  26.288168  17.951116
19  150.66275 100.98511 2774.7056 1941.6099  21.994562  14.742352
20  117.18214  78.20498 2891.8878 2019.8149  16.435082  10.968441
21  142.29260  95.39756 3034.1804 2115.2125  10.163757   6.814111
22  142.29260  95.14673 3176.4729 2210.3592  10.259019   6.859894
23  261.14876 182.08955 3437.6217 2392.4488   6.689261   4.664179
24   82.02750  57.19480 3519.6492 2449.6436  11.569464   8.066967
25  236.87532 165.16456 3756.5245 2614.8081   3.538621   2.467352
26    0.00000   0.00000    0.0000    0.0000         NA         NA
27  334.80611 236.91100  334.8061  236.9110 169.093994 119.652019
28  219.29800 155.17670  554.1041  392.0877 219.298001 155.176703
29  209.25382 148.06937  763.3579  540.1571 209.253817 148.069374
30  196.69859 139.18521  960.0565  679.3423 196.698588 139.185211
31  167.40305 118.45550 1127.4596  797.7978 167.403054 118.455499
32  150.66275 106.60995 1278.1223  904.4077 144.868027 102.509566
33  192.51351 134.90658 1470.6358 1039.3143  96.256756  67.453288
34  150.66275 104.54811 1621.2986 1143.8624  75.331374  52.274054
35  167.40305 114.44618 1788.7016 1258.3086  55.801018  38.148728
36  100.44183  67.95463 1889.1435 1326.2632  51.245833  34.670729
37   85.37556  57.13054 1974.5190 1383.3938  41.850763  28.005165
38  100.44183  66.16445 2074.9609 1449.5582  34.875636  22.973769
39  133.92244  88.35929 2208.8833 1537.9175  32.824128  21.656689
40  100.44183  66.34334 2309.3251 1604.2608  34.997154  23.116145
41  200.04665 137.72964 2509.3718 1741.9905  28.742335  19.788741
42  115.50811  78.92574 2624.8799 1820.9162  35.983834  24.587459
43  117.18214  79.31466 2742.0620 1900.2309  29.442748  19.928306
44  167.40305 111.45033 2909.4651 2011.6812  24.438402  16.270121
45  118.01915  76.69624 3027.4842 2088.3774  16.552476  10.756836
46  150.66275 101.00918 3178.1470 2189.3866  10.761625   7.214941
47  150.66275  99.03846 3328.8097 2288.4251  10.862491   7.140480
48  278.72608 194.22286 3607.5358 2482.6479   7.139500   4.974971
49   92.07168  64.15770 3699.6075 2546.8056  12.986133   9.049041
50  250.26757 174.39230 3949.8751 2721.1979   3.738685   2.605203
51    0.00000   0.00000    0.0000    0.0000         NA         NA
52  288.77027 200.17509  288.7703  200.1751 145.843570 101.098529
53  230.17920 159.55985  518.9495  359.7349 230.179199 159.559852
54  209.25382 145.05441  728.2033  504.7893 209.253817 145.054411
55  188.32844 130.54897  916.5317  635.3383 188.328436 130.548970
56  167.40305 116.04353 1083.9348  751.3818 167.403054 116.043529
57  150.66275 104.43918 1234.5975  855.8210 144.868027 100.422284
58  194.18754 133.70473 1428.7851  989.5258  97.093771  66.852367
59  150.66275 103.03366 1579.4478 1092.5594  75.331374  51.516830
60  163.21798 110.47773 1742.6658 1203.0372  54.405993  36.825911
61   96.25676  64.45988 1838.9225 1267.4970  49.110590  32.887692
62   83.70153  55.42422 1922.6241 1322.9213  41.030160  27.168737
63   98.76780  64.35459 2021.3919 1387.2758  34.294376  22.345344
64  125.55229  82.42819 2146.9442 1469.7040  30.772620  20.202987
65   94.58273  62.42524 2241.5269 1532.1293  32.955653  21.750954
66  183.30634 124.54406 2424.8332 1656.6733  26.337118  17.894261
67  115.50811  77.96726 2540.3413 1734.6406  35.983834  24.288867
68  108.81199  72.84873 2649.1533 1807.4893  27.339695  18.303701
69  146.47767  96.67842 2795.6310 1904.1677  21.383602  14.113638
70  115.50811  74.73071 2911.1391 1978.8984  16.200296  10.481166
71  146.47767  96.40631 3057.6168 2075.3048  10.462691   6.886165
72  142.29260  93.57792 3199.9094 2168.8827  10.259019   6.746786
73  272.02996 185.66675 3471.9393 2354.5494   6.967981   4.755808
74   82.02750  55.98567 3553.9668 2410.5351  11.569464   7.896427
75  254.45264 173.66982 3808.4195 2584.2049   3.801205   2.594410
76    0.00000   0.00000    0.0000    0.0000         NA         NA
77  372.47179 261.88381  372.4718  261.8838 188.117068 132.264552
78  209.25382 147.12574  581.7256  409.0095 209.253817 147.125737
79  184.14336 129.47065  765.8690  538.4802 184.143359 129.470649
80  188.32844 132.41316  954.1974  670.8934 188.328436 132.413163
81  184.14336 129.47065 1138.3408  800.3640 184.143359 129.470649
82  201.72068 141.82921 1340.0614  942.1932 193.962192 136.374241
83  267.84489 186.17242 1607.9063 1128.3656 133.922443  93.086210
84  234.36428 161.02078 1842.2706 1289.3864 117.182138  80.510388
85  267.84489 180.80045 2110.1155 1470.1869  89.281629  60.266816
86  167.40305 111.03489 2277.5185 1581.2218  85.409721  56.650455
87  138.94453  90.46093 2416.4631 1671.6827  68.110066  44.343592
88  159.03290 100.79545 2575.4960 1772.4781  55.219757  34.998422
89  188.32844 118.91249 2763.8244 1891.3906  46.158930  29.145219
90  133.92244  84.33462 2897.7469 1975.7253  46.662872  29.384885
91  284.58519 189.32454 3182.3321 2165.0498  40.888677  27.201802
92  169.91410 112.08910 3352.2462 2277.1389  52.932741  34.918724
93  159.03290 103.80988 3511.2791 2380.9488  39.958015  26.082885
94  236.03831 151.26275 3747.3174 2532.2115  34.458147  22.082153
95  184.14336 115.50391 3931.4607 2647.7154  25.826558  16.199707
96  217.62397 137.69810 4149.0847 2785.4135  15.544569   9.835578
97  213.43889 135.31927 4362.5236 2920.7328  15.388529   9.756256
98  405.95241 271.61223 4768.4760 3192.3450  10.398371   6.957280
99  112.99706  75.60340 4881.4731 3267.9484  15.937526  10.663386
100 384.19001 257.05157 5265.6631 3525.0000   5.739319   3.840029
101   0.00000   0.00000    0.0000    0.0000         NA         NA
102 410.13748 280.50463  410.1375  280.5046 207.140142 141.669006
103 222.64606 152.27394  632.7835  432.7786 222.646062 152.273943
104 213.43889 145.97690  846.2224  578.7555 213.438894 145.976900
105 222.64606 152.27394 1068.8685  731.0294 222.646062 152.273943
106 217.62397 148.83919 1286.4925  879.8686 217.623970 148.839193
107 206.74277 141.39723 1493.2352 1021.2658 198.791127 135.958878
108 276.21504 187.11011 1769.4503 1208.3760 138.107519  93.555057
109 234.36428 157.23175 2003.8146 1365.6077 117.182138  78.615873
110 255.28966 168.77290 2259.1042 1534.3806  85.096552  56.257633
111 182.46933 118.96901 2441.5735 1653.3496  93.096596  60.698474
112 142.29260  91.42484 2583.8661 1744.7745  69.751272  44.816099
113 167.40305 105.31760 2751.2692 1850.0921  58.126060  36.568612
114 200.88366 126.90701 2952.1529 1976.9991  49.236192  31.104658
115 138.10752  87.50288 3090.2604 2064.5019  48.121087  30.488809
116 300.48848 199.57295 3390.7489 2264.0749  43.173632  28.674274
117 154.01081 101.30958 3544.7597 2365.3845  47.978445  31.560616
118 167.40305 108.80030 3712.1627 2474.1848  42.061069  27.336759
119 225.99412 143.81588 3938.1568 2618.0007  32.991843  20.995020
120 173.26216 107.63391 4111.4190 2725.6346  24.300443  15.095920
121 225.99412 143.53206 4337.4131 2869.1666  16.142437  10.252290
122 217.62397 137.73705 4555.0371 3006.9037  15.690265   9.930573
123 418.50763 279.45161 4973.5447 3286.3553  10.719970   7.158084
124 112.99706  75.45194 5086.5418 3361.8072  15.937526  10.642022
125 381.67896 254.85987 5468.2208 3616.6671   5.701807   3.807288
126   0.00000   0.00000    0.0000    0.0000         NA         NA
127 322.25088 219.33627  322.2509  219.3363 162.752969 110.775896
128 225.99412 153.82024  548.2450  373.1565 225.994123 153.820244
129 217.62397 148.12320  765.8690  521.2797 217.623970 148.123198
130 230.17920 156.66877  996.0482  677.9485 230.179199 156.668767
131 217.62397 148.12320 1213.6721  826.0717 217.623970 148.123198
132 205.06874 139.57763 1418.7409  965.6493 197.181482 134.209259
133 276.21504 186.62736 1694.9559 1152.2767 138.107519  93.313679
134 251.10458 168.41103 1946.0605 1320.6877 125.552290  84.205517
135 272.02996 180.41360 2218.0905 1501.1013  90.676654  60.137866
136 171.58813 111.97582 2389.6786 1613.0771  87.544964  57.130523
137 146.47767  93.96876 2536.1563 1707.0459  71.802780  46.063119
138 167.40305 104.77821 2703.5593 1811.8241  58.126060  36.381323
139 188.32844 117.54909 2891.8878 1929.3732  46.158930  28.811050
140 146.47767  91.24849 3038.3654 2020.6217  51.037516  31.793898
141 307.18460 203.04712 3345.5500 2223.6688  44.135719  29.173437
142 167.40305 109.81284 3512.9531 2333.4816  52.150484  34.209608
143 159.03290 103.33327 3671.9860 2436.8149  39.958015  25.963133
144 251.10458 160.47015 3923.0906 2597.2851  36.657603  23.426299
145 177.44724 109.79282 4100.5378 2707.0779  24.887411  15.398713
146 234.36428 148.98774 4334.9021 2856.0656  16.740305  10.641981
147 218.46099 138.65836 4553.3631 2994.7240  15.750612   9.996998
148 417.67062 281.55520 4971.0337 3276.2792  10.698530   7.211967
149 128.06334  86.32855 5099.0970 3362.6077  18.062530  12.176100
150 378.33090 255.03598 5477.4279 3617.6437   5.651791   3.809919
151   0.00000   0.00000    0.0000    0.0000         NA         NA
152 468.72855 265.18796  468.7286  265.1880 236.731591 133.933316
153 627.76145 355.16245 1096.4900  620.3504 627.761452 355.162453
154 703.09283 397.78195 1799.5828 1018.1324 703.092826 397.781947
155 602.65099 340.95595 2402.2338 1359.0883 602.650994 340.955955
156 485.46886 274.65896 2887.7027 1633.7473 485.468856 274.658963
157 518.94947 293.60096 3406.6521 1927.3482 498.989872 282.308616
158 703.09283 418.46060 4109.7450 2345.8088 351.546413 209.230301
159 535.68977 334.57824 4645.4347 2680.3871 267.844886 167.289119
160 468.72855 313.42264 5114.1633 2993.8097 156.242850 104.474215
161 242.73443 158.63167 5356.8977 3152.4414 123.844096  80.934526
162 163.21798 104.09275 5520.1157 3256.5342  80.008813  51.025860
163 173.26216 106.64126 5693.3779 3363.1754  60.160472  37.028215
164 200.88366 124.73191 5894.2615 3487.9073  49.236192  30.571546
165 142.29260  88.89479 6036.5541 3576.8021  49.579302  30.973793
166 266.17086 175.67907 6302.7250 3752.4812  38.242939  25.241246
167 149.82573  98.54635 6452.5507 3851.0275  46.674683  30.699798
168 150.66275  98.67025 6603.2135 3949.6978  37.854962  24.791520
169 267.84489 174.10832 6871.0583 4123.8061  39.101443  25.417273
170 190.00247 120.84155 7061.0608 4244.6476  26.648312  16.948323
171 217.62397 139.69205 7278.6848 4384.3397  15.544569   9.978003
172 185.81739 117.80581 7464.5022 4502.1455  13.397072   8.493569
173 351.54641 236.46219 7816.0486 4738.6077   9.004775   6.056921
174 112.99706  76.00570 7929.0456 4814.6134  15.937526  10.720128
175 336.48014 226.32810 8265.5258 5040.9415   5.026593   3.381059
176   0.00000   0.00000    0.0000    0.0000         NA         NA
177 502.20916 285.90417  502.2092  285.9042 253.640991 144.396044
178 665.42714 378.82302 1167.6363  664.7272 665.427139 378.823022
179 703.09283 400.26583 1870.7291 1064.9930 703.092826 400.265834
180 636.13160 362.14528 2506.8607 1427.1383 636.131605 362.145279
181 474.58766 270.17944 2981.4484 1697.3177 474.587658 270.179438
182 514.76439 293.05177 3496.2128 1990.3695 494.965760 281.780550
183 652.87191 388.00889 4149.0847 2378.3784 326.435955 194.004446
184 581.72561 360.27623 4730.8103 2738.6546 290.862806 180.138115
185 493.83901 324.36909 5224.6493 3063.0237 164.613003 108.123031
186 230.17920 148.21482 5454.8285 3211.2385 117.438367  75.619807
187 169.07708 106.59643 5623.9056 3317.8350  82.880924  52.253153
188 184.14336 112.59807 5808.0490 3430.4330  63.938666  39.096551
189 200.88366 123.81374 6008.9326 3554.2468  49.236192  30.346504
190 146.47767  90.78323 6155.4103 3645.0300  51.037516  31.631787
191 275.37802 181.23308 6430.7883 3826.2631  39.565808  26.039235
192 148.98872  97.75026 6579.7770 3924.0133  46.413931  30.451793
193 154.84782 101.20403 6734.6249 4025.2174  38.906489  25.428149
194 259.47473 168.45937 6994.0996 4193.6767  37.879523  24.592609
195 221.80905 141.65528 7215.9086 4335.3320  31.109263  19.867501
196 234.36428 150.81897 7450.2729 4486.1510  16.740305  10.772784
197 200.88366 127.09644 7651.1566 4613.2474  14.483321   9.163406
198 359.91657 243.25625 8011.0731 4856.5037   9.219174   6.230949
199 114.67109  77.50257 8125.7442 4934.0063  16.173638  10.931252
200 353.22044 238.73055 8478.9647 5172.7368   5.276672   3.566336
201   0.00000   0.00000    0.0000    0.0000         NA         NA
202 518.94947 298.78288  518.9495  298.7829 262.095690 150.900447
203 657.05699 378.29768 1176.0065  677.0806 657.056987 378.297685
204 652.87191 375.88815 1828.8784 1052.9687 652.871910 375.888145
205 652.87191 375.88815 2481.7503 1428.8569 652.871910 375.888145
206 518.94947 298.78288 3000.6997 1727.6397 518.949467 298.782885
207 468.72855 269.86841 3469.4283 1997.5082 450.700530 259.488858
208 661.24206 400.60009 4130.6704 2398.1082 330.621031 200.300045
209 544.05993 345.97091 4674.7303 2744.0792 272.029963 172.985455
210 489.65393 333.45693 5164.3842 3077.5361 163.217978 111.152309
211 236.03831 156.38797 5400.4225 3233.9241 120.427707  79.789780
212 178.28425 114.69829 5578.7068 3348.6223  87.394241  56.224654
213 189.16545 116.56791 5767.8722 3465.1903  65.682448  40.474970
214 213.43889 132.12531 5981.3111 3597.3156  52.313454  32.383654
215 148.98872  92.52304 6130.2998 3689.8386  51.912445  32.237993
216 272.86698 181.03204 6403.1668 3870.8706  39.205026  26.010350
217 167.40305 110.65122 6570.5699 3981.5219  52.150484  34.470784
218 150.66275  99.12703 6721.2326 4080.6489  37.854962  24.906288
219 267.84489 174.82114 6989.0775 4255.4700  39.101443  25.521335
220 222.64606 141.59669 7211.7236 4397.0667  31.226657  19.859284
221 232.69024 149.09315 7444.4138 4546.1599  16.620732  10.649510
222 200.88366 126.32980 7645.2975 4672.4897  14.483321   9.108133
223 372.47179 250.76239 8017.7693 4923.2521   9.540773   6.423217
224 110.48602  74.38345 8128.2553 4997.6355  15.583359  10.491319
225 372.47179 250.76239 8500.7271 5248.3979   5.564263   3.746077
226   0.00000   0.00000    0.0000    0.0000         NA         NA
227 242.73443 172.92613  242.7344  172.9261 122.593146  87.336428
228 138.10752  98.38900  380.8419  271.3151 138.107519  98.389003
229 125.55229  89.44455  506.3942  360.7597 125.552290  89.444548
230 146.47767 104.35197  652.8719  465.1117 146.477672 104.351973
231 138.10752  98.38900  790.9794  563.5007 138.107519  98.389003
232 171.58813 122.24088  962.5676  685.7415 164.988587 117.539310
233 205.06874 145.38716 1167.6363  831.1287 102.534371  72.693581
234 195.02456 137.59510 1362.6609  968.7238  97.512279  68.797548
235 200.88366 140.69198 1563.5445 1109.4158  66.961222  46.897327
236 132.24841  91.30406 1695.7929 1200.7198  67.473680  46.583704
237  97.93079  66.59519 1793.7237 1267.3150  48.005288  32.644703
238 125.55229  83.53927 1919.2760 1350.8543  43.594545  29.006690
239 146.47767  96.61671 2065.7537 1447.4710  35.901390  23.680566
240 100.44183  65.84348 2166.1955 1513.3145  34.997154  22.941980
241 221.80905 151.43875 2388.0046 1664.7532  31.869116  21.758442
242 142.29260  96.44092 2530.2972 1761.1942  44.327911  30.043899
243 138.94453  93.31393 2669.2417 1854.5081  34.910687  23.445710
244 192.51351 127.24468 2861.7552 1981.7528  28.104162  18.575866
245 134.75946  87.14986 2996.5147 2068.9026  18.900345  12.222981
246 173.26216 113.28985 3169.7768 2182.1925  12.375869   8.092132
247 167.40305 108.84198 3337.1799 2291.0345  12.069434   7.847295
248 320.57685 222.71954 3657.7567 2513.7540   8.211497   5.704906
249 100.44183  69.78158 3758.1986 2583.5356  14.166690   9.842254
250 310.53266 215.74138 4068.7312 2799.2770   4.638970   3.222907
251   0.00000   0.00000    0.0000    0.0000         NA         NA
252 245.24547 173.57922  245.2455  173.5792 123.861350  87.666275
253 133.92244  94.78729  379.1679  268.3665 133.922443  94.787289
254 125.55229  88.86308  504.7202  357.2296 125.552290  88.863084
255 138.10752  97.74939  642.8277  454.9790 138.107519  97.749392
256 153.17379 108.41296  796.0015  563.3920 153.173794 108.412962
257 163.21798 115.52201  959.2195  678.9140 156.940363 111.078855
258 217.62397 153.26380 1176.8435  832.1778 108.811985  76.631900
259 200.88366 140.76760 1377.7271  972.9454 100.441832  70.383799
260 199.20963 138.54331 1576.9368 1111.4887  66.403211  46.181103
261 125.55229  86.21059 1702.4891 1197.6993  64.057291  43.984997
262  97.93079  66.34580 1800.4198 1264.0451  48.005288  32.522450
263 125.55229  83.43238 1925.9721 1347.4774  43.594545  28.969576
264 142.29260  94.18206 2068.2647 1441.6595  34.875636  23.083837
265 100.44183  66.29542 2168.7066 1507.9549  34.997154  23.099451
266 228.50517 156.74666 2397.2117 1664.7016  32.831202  22.521072
267 143.96663  97.91045 2541.1784 1762.6120  44.849416  30.501699
268 136.43349  91.79350 2677.6118 1854.4055  34.279771  23.063693
269 200.88366 132.63759 2878.4955 1987.0431  29.326082  19.363151
270 138.94453  89.66318 3017.4400 2076.7063  19.487312  12.575481
271 175.77321 115.03658 3193.2133 2191.7429  12.555229   8.216899
272 301.32550 197.02495 3494.5388 2388.7678  21.724982  14.205116
273 318.06580 219.29887 3812.6046 2608.0667   8.147177   5.617287
274 171.58813 118.30597 3984.1927 2726.3727  24.201429  16.686315
275 301.32550 207.75683 4285.5182 2934.1295   4.501427   3.103628
276   0.00000   0.00000    0.0000    0.0000         NA         NA
277 234.36428 164.39565  234.3643  164.3957 118.365796  83.028107
278 138.10752  96.87601  372.4718  261.2717 138.107519  96.876010
279 132.24841  92.76612  504.7202  354.0378 132.248413  92.766118
280 142.29260  99.81165  647.0128  453.8494 142.292596  99.811646
281 150.66275 105.68292  797.6756  559.5323 150.662749 105.682919
282 167.40305 117.42547  965.0786  676.9578 160.964475 112.909102
283 222.64606 155.75019 1187.7247  832.7080 111.323031  77.875096
284 173.26216 120.87283 1360.9868  953.5808  86.631080  60.436416
285 196.69859 136.65866 1557.6854 1090.2395  65.566196  45.552885
286 125.55229  86.24931 1683.2377 1176.4888  64.057291  44.004751
287 196.69859 133.52644 1879.9363 1310.0152  96.420877  65.454137
288 142.29260  94.96198 2022.2289 1404.9772  49.407151  32.972910
289 146.47767  96.48771 2168.7066 1501.4649  35.901390  23.648948
290 104.62691  68.28301 2273.3335 1569.7479  36.455369  23.791988
291 218.46099 149.17676 2491.7945 1718.9247  31.388073  21.433443
292 140.61857  95.30251 2632.4130 1814.2272  43.806407  29.689256
293 133.92244  89.91487 2766.3355 1904.1421  33.648855  22.591676
294 200.88366 132.67921 2967.2191 2036.8213  29.326082  19.369227
295 139.78155  89.20288 3107.0007 2126.0242  19.604705  12.510923
296 175.77321 113.57731 3282.7739 2239.6015  12.555229   8.112665
297 168.24007 108.98052 3451.0140 2348.5820  12.129781   7.857283
298 331.45805 227.87185 3782.4720 2576.4538   8.490216   5.836881
299  87.88660  60.42057 3870.3586 2636.8744  12.395854   8.521942
300 302.99953 208.30709 4173.3581 2845.1815   4.526435   3.111848
> 
> # Now calculate BMP (60 days) with summBg()
> # Interpolation is used if needed, inoculum contribution 
> # is calculated and subtracted out, and results are 
> # normalised by substrate VS mass
> BMP <- summBg(cum.vol, setup = setup, time.name = "days", 
+               inoc.name = "inoc", inoc.m.name = "minoc", 
+               norm.name = "mvs.sub", when = 60)
Response variable (volume) is cum.vol$cvCH4.
Inoculum contribution subtracted based on setup$minoc.
Response normalized by setup$mvs.sub.
> BMP
  descrip days     mean        sd n
1       A   60 166.4386  6.627077 3
2       B   60 142.1766 10.988131 3
3   cellu   60 408.8386 15.359236 3
> 
> # More details with show.obs = TRUE
> summBg(cum.vol, setup = setup, time.name = "days", 
+        inoc.name = "inoc", inoc.m.name = "minoc", 
+        norm.name = "mvs.sub", when = 60, 
+        show.obs = TRUE)
Response variable (volume) is cum.vol$cvCH4.
Inoculum contribution subtracted based on setup$minoc.
Response normalized by setup$mvs.sub.
  days  id descrip   msub  minoc  mvs.sub mvs.inoc mcod.sub mcod.inoc  m.tot
1   60 2_1       A 178.96 328.82 3.839567 12.92268 5.527522  19.09109 657.78
2   60 2_2       A 178.58 350.90 3.831414 13.79043 5.515785  20.37305 679.79
3   60 2_3       A 178.58 326.61 3.831414 12.83583 5.515785  18.96278 654.68
4   60 2_4       B  40.21 465.32 5.333816 18.28716 8.325115  27.01620 655.22
5   60 2_5       B  40.04 461.90 5.311266 18.15275 8.289918  26.81764 652.56
6   60 2_6       B  40.13 475.61 5.323204 18.69156 8.308551  27.61363 665.76
7   60 2_7   cellu   5.75 500.94 5.507470 19.68703 7.762500  29.08428 656.68
8   60 2_8   cellu   5.76 498.10 5.517048 19.57542 7.776000  28.91939 653.02
9   60 2_9   cellu   5.71 504.65 5.469157 19.83283 7.708500  29.29968 659.28
   mvs.tot mcod.tot    cvCH4 vol.mi.mn  vol.mi.sd vol.mi.rsd cvCH4.tot
1 16.76225 24.61862 170.9377  4.229916 0.06008162   1.420398  533.1872
2 17.62184 25.88883 165.2403  4.229916 0.06008162   1.420398  552.6371
3 16.66724 24.47857 163.1377  4.229916 0.06008162   1.420398  523.7181
4 23.62097 35.34132 134.7984  4.229916 0.06008162   1.420398  503.8146
5 23.46402 35.10756 153.0804  4.229916 0.06008162   1.420398  520.9396
6 24.01476 35.92219 138.6511  4.229916 0.06008162   1.420398  516.5796
7 25.19450 36.84678 393.2523  4.229916 0.06008162   1.420398  777.9905
8 25.09246 36.69539 411.7632  4.229916 0.06008162   1.420398  793.6561
9 25.30199 37.00818 421.5002  4.229916 0.06008162   1.420398  811.8029
  cvCH4.inoc   fv.inoc  sd.inoc cvCH4.sd
1   362.2495 0.6794040 5.145382        0
2   387.3968 0.7009967 5.502575        0
3   360.5804 0.6885010 5.121676        0
4   369.0162 0.7324444 5.241497        0
5   367.8592 0.7061456 5.225064        0
6   377.9285 0.7315977 5.368087        0
7   384.7382 0.4945282 5.464812        0
8   381.8928 0.4811818 5.424396        0
9   390.3028 0.4807851 5.543851        0
> 
> # How do results compare to theoretical methane potential for 
> # cellulose?
> predBg("C6H10O5")
[1] 413.7274
> 
> # Set aside 10% of cellulose for microbial biomass production
> predBg("C6H10O5", fs = 0.1)
[1] 372.3547
> 
> # Both are close to measured values
> 
> 
> 
> 
> cleanEx()
> nameEx("calcCOD")
> ### * calcCOD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcCOD
> ### Title: Calculate Oxygen Demand
> ### Aliases: calcCOD
> 
> ### ** Examples
> 
>   calcCOD("C6H12O6")
[1] 1.065743
> 
>   calcCOD("CH3COOH")
[1] 1.065743
> 
>   calcCOD("CH3CH2OH")
[1] 2.083876
> 
>   calcCOD("CH4")
[1] 3.989527
> 
>   calcCOD("ch4")
[1] 3.989527
> 
>   calcCOD(c("C6H12O6", "CH3COOH", "CH3CH2OH"))
[1] 1.065743 1.065743 2.083876
> 
> 
> 
> cleanEx()
> nameEx("comp")
> ### * comp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comp
> ### Title: Methane Content of Biogas
> ### Aliases: comp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(comp)
> 
> 
> 
> cleanEx()
> nameEx("comp2")
> ### * comp2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comp2
> ### Title: Methane Content of Biogas
> ### Aliases: comp2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(comp2)
> 
> 
> 
> cleanEx()
> nameEx("cumBg")
> ### * cumBg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cumBg
> ### Title: Calculate Cumulative Biogas Production
> ### Aliases: cumBg
> ### Keywords: chron manip
> 
> ### ** Examples
> 
> 
> data("vol")
> data("comp")
> 
> head(vol)
   id           date.time days vol
1 2_1 2014-06-07 06:00:00 1.98 393
2 2_1 2014-06-08 06:00:00 2.98 260
3 2_1 2014-06-09 06:00:00 3.98 245
4 2_1 2014-06-10 06:00:00 4.98 225
5 2_1 2014-06-11 06:00:00 5.98 200
6 2_1 2014-06-12 07:00:00 7.02 175
> head(comp)
     id           date.time  days      xCH4
516 2_1 2014-06-12 07:00:00  7.02 0.7104731
519 2_1 2014-06-19 07:00:00 14.02 0.7024937
522 2_1 2014-06-26 04:00:00 20.90 0.6659919
524 2_1 2014-07-03 03:00:00 27.85 0.6789466
525 2_1 2014-07-10 02:00:00 34.81 0.6951429
528 2_1 2014-07-24 03:00:00 48.85 0.6693053
> 
> # Calculate cumulative production and rates from vol and comp
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, id.name = "id", time.name = "days", 
+ 		  comp.name = "xCH4", dat.name = "vol")
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
   id           date.time days vol xCH4 temperature pressure      vBg vCH4
1 2_1                <NA> 0.00  NA   NA          NA       NA   0.0000    0
2 2_1 2014-06-07 06:00:00 1.98 393   NA          20        1 357.7102   NA
3 2_1 2014-06-08 06:00:00 2.98 260   NA          20        1 236.6531   NA
4 2_1 2014-06-09 06:00:00 3.98 245   NA          20        1 223.0000   NA
5 2_1 2014-06-10 06:00:00 4.98 225   NA          20        1 204.7959   NA
6 2_1 2014-06-11 06:00:00 5.98 200   NA          20        1 182.0408   NA
       cvBg cvCH4     rvBg rvCH4
1    0.0000     0       NA    NA
2  357.7102    NA 180.6617    NA
3  594.3633    NA 236.6531    NA
4  817.3632    NA 223.0000    NA
5 1022.1592    NA 204.7959    NA
6 1204.2000    NA 182.0408    NA
> 
> # Note warnings and related NAs in results
> # Set extrap = TRUE to extrapolate xCH4 to earliest times
> 
> # Calculate cumulative production and rates from vol and comp
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, id.name = "id", time.name = "days", 
+ 		  comp.name = "xCH4", dat.name = "vol", extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
   id           date.time days vol      xCH4 temperature pressure      vBg
1 2_1                <NA> 0.00  NA        NA          NA       NA   0.0000
2 2_1 2014-06-07 06:00:00 1.98 393 0.7104731          20        1 357.7102
3 2_1 2014-06-08 06:00:00 2.98 260 0.7104731          20        1 236.6531
4 2_1 2014-06-09 06:00:00 3.98 245 0.7104731          20        1 223.0000
5 2_1 2014-06-10 06:00:00 4.98 225 0.7104731          20        1 204.7959
6 2_1 2014-06-11 06:00:00 5.98 200 0.7104731          20        1 182.0408
      vCH4      cvBg    cvCH4     rvBg    rvCH4
1   0.0000    0.0000   0.0000       NA       NA
2 254.4650  357.7102 254.4650 180.6617 128.5177
3 168.3483  594.3633 422.8133 236.6531 168.3483
4 158.6359  817.3632 581.4492 223.0000 158.6359
5 145.6861 1022.1592 727.1353 204.7959 145.6861
6 129.4987 1204.2000 856.6340 182.0408 129.4987
> 
> # In this case, we can use default values for some column names, so this call is identical
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, time.name = "days", extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> 
> # Plot results
> ## Not run: 
> ##D # Not run just because it is a bit slow
> ##D library(ggplot2)
> ##D qplot(x = days, y = cvCH4, data = cum.prod, xlab = "Time (d)", 
> ##D       ylab = "Cumulative methane production (mL)",color = id, geom = "line")
> ## End(Not run)
> 
> # Omit added time zero rows
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, time.name = "days", extrap = TRUE, 
+ 		  showt0 = FALSE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
   id           date.time days vol      xCH4 temperature pressure      vBg
1 2_1 2014-06-07 06:00:00 1.98 393 0.7104731          20        1 357.7102
2 2_1 2014-06-08 06:00:00 2.98 260 0.7104731          20        1 236.6531
3 2_1 2014-06-09 06:00:00 3.98 245 0.7104731          20        1 223.0000
4 2_1 2014-06-10 06:00:00 4.98 225 0.7104731          20        1 204.7959
5 2_1 2014-06-11 06:00:00 5.98 200 0.7104731          20        1 182.0408
6 2_1 2014-06-12 07:00:00 7.02 175 0.7104731          20        1 159.2857
      vCH4      cvBg    cvCH4     rvBg    rvCH4
1 254.4650  357.7102 254.4650 180.6617 128.5177
2 168.3483  594.3633 422.8133 236.6531 168.3483
3 158.6359  817.3632 581.4492 223.0000 158.6359
4 145.6861 1022.1592 727.1353 204.7959 145.6861
5 129.4987 1204.2000 856.6340 182.0408 129.4987
6 113.3114 1363.4857 969.9454 153.1593 108.9532
> 
> ## Not run: 
> ##D # Not run just because it is a bit slow
> ##D qplot(x = days, y = cvCH4, data = cum.prod, xlab = "Time (d)", 
> ##D       ylab = "Cumulative methane production (mL)", color = id, geom = "line")
> ## End(Not run)
> 
> # Previous is different from never adding them in the first place (rates not calculated for first 
> # observations here)
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, time.name = "days", extrap = TRUE, 
+ 		  addt0 = FALSE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
   id           date.time days vol      xCH4 temperature pressure      vBg
1 2_1 2014-06-07 06:00:00 1.98 393 0.7104731          20        1 357.7102
2 2_1 2014-06-08 06:00:00 2.98 260 0.7104731          20        1 236.6531
3 2_1 2014-06-09 06:00:00 3.98 245 0.7104731          20        1 223.0000
4 2_1 2014-06-10 06:00:00 4.98 225 0.7104731          20        1 204.7959
5 2_1 2014-06-11 06:00:00 5.98 200 0.7104731          20        1 182.0408
6 2_1 2014-06-12 07:00:00 7.02 175 0.7104731          20        1 159.2857
      vCH4      cvBg    cvCH4     rvBg    rvCH4
1 254.4650  357.7102 254.4650       NA       NA
2 168.3483  594.3633 422.8133 236.6531 168.3483
3 158.6359  817.3632 581.4492 223.0000 158.6359
4 145.6861 1022.1592 727.1353 204.7959 145.6861
5 129.4987 1204.2000 856.6340 182.0408 129.4987
6 113.3114 1363.4857 969.9454 153.1593 108.9532
> 
> ## Not run: 
> ##D # Not run just because it is a bit slow
> ##D qplot(x = days, y = cvCH4, data = cum.prod, xlab = "Time (d)", 
> ##D       ylab = "Cumulative methane production (mL)", color = id, geom = "line")
> ## End(Not run)
> 
> # Can use POSIX objects for time (but cumBg cannot add t0 rows here)
> class(vol$date.time)
[1] "POSIXct" "POSIXt" 
> class(comp$date.time)
[1] "POSIXct" "POSIXt" 
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, time.name = "date.time", extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
   id           date.time days vol      xCH4 temperature pressure      vBg
1 2_1 2014-06-07 06:00:00 1.98 393 0.7104731          20        1 357.7102
2 2_1 2014-06-08 06:00:00 2.98 260 0.7104731          20        1 236.6531
3 2_1 2014-06-09 06:00:00 3.98 245 0.7104731          20        1 223.0000
4 2_1 2014-06-10 06:00:00 4.98 225 0.7104731          20        1 204.7959
5 2_1 2014-06-11 06:00:00 5.98 200 0.7104731          20        1 182.0408
6 2_1 2014-06-12 07:00:00 7.02 175 0.7104731          20        1 159.2857
      vCH4      cvBg    cvCH4     rvBg    rvCH4
1 254.4650  357.7102 254.4650       NA       NA
2 168.3483  594.3633 422.8133 236.6531 168.3483
3 158.6359  817.3632 581.4492 223.0000 158.6359
4 145.6861 1022.1592 727.1353 204.7959 145.6861
5 129.4987 1204.2000 856.6340 182.0408 129.4987
6 113.3114 1363.4857 969.9454 152.9143 108.7789
> 
> ## Not run: 
> ##D # Not run just because it is a bit slow
> ##D qplot(x = date.time, y = cvCH4, data = cum.prod, xlab = "Time (d)", 
> ##D       ylab = "Cumulative methane production (mL)", color = id, geom = "line")
> ## End(Not run)
> 
> # Can leave out composition data, and then CH4 is not included in results
> cum.prod <- cumBg(vol, temp = 20, pres = 1, time.name = "days")
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
Warning in cumBg(vol, temp = 20, pres = 1, time.name = "days") :
  Biogas composition date ('comp' and 'name.comp' arguments) not provided so CH4 results will not be returned.
> head(cum.prod)
   id           date.time days vol temperature pressure      vBg      cvBg
1 2_1                <NA> 0.00  NA          NA       NA   0.0000    0.0000
2 2_1 2014-06-07 06:00:00 1.98 393          20        1 357.7102  357.7102
3 2_1 2014-06-08 06:00:00 2.98 260          20        1 236.6531  594.3633
4 2_1 2014-06-09 06:00:00 3.98 245          20        1 223.0000  817.3632
5 2_1 2014-06-10 06:00:00 4.98 225          20        1 204.7959 1022.1592
6 2_1 2014-06-11 06:00:00 5.98 200          20        1 182.0408 1204.2000
      rvBg
1       NA
2 180.6617
3 236.6531
4 223.0000
5 204.7959
6 182.0408
> 
> # Leave out pres or temp, and results are not standardised
> cum.prod <- cumBg(vol, time.name = "days")
Working with volume data, applying volumetric method.
Either temperature or presure is missing (temp and pres arguments) so volumes are NOT standardized.
Warning in cumBg(vol, time.name = "days") :
  Biogas composition date ('comp' and 'name.comp' arguments) not provided so CH4 results will not be returned.
> head(cum.prod)
   id           date.time days vol vBg cvBg     rvBg
1 2_1                <NA> 0.00  NA   0    0       NA
2 2_1 2014-06-07 06:00:00 1.98 393 393  393 198.4848
3 2_1 2014-06-08 06:00:00 2.98 260 260  653 260.0000
4 2_1 2014-06-09 06:00:00 3.98 245 245  898 245.0000
5 2_1 2014-06-10 06:00:00 4.98 225 225 1123 225.0000
6 2_1 2014-06-11 06:00:00 5.98 200 200 1323 200.0000
> 
> # Example with input data frames with different column names
> data("vol2")
> data("comp2")
> 
> head(vol2)
  bottle days meas.vol
1    1_1    0        0
2    1_1    2      987
3    1_1    3      710
4    1_1    4      652
5    1_1    5      740
6    1_1    6      790
> head(comp2)
  bottle days CH4.conc
1    1_1    7   0.7334
2    1_1   14   0.7141
3    1_1   22   0.7084
4    1_1   29   0.6527
5    1_1   35   0.7069
6    1_1   42   0.6934
> 
> cum.prod <- cumBg(vol2, comp = comp2, temp = 20, pres = 1, 
+                   id.name = "bottle", time.name = "days", 
+ 		  dat.name = "meas.vol", comp.name = "CH4.conc")
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Warning in interp(dc[, time.name], dc[, comp.name], time.out = dat[dat[,  :
  6 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
  bottle days meas.vol CH4.conc temperature pressure      vBg vCH4      cvBg
1    1_1    0        0        0          20        1   0.0000    0    0.0000
2    1_1    2      987       NA          20        1 898.3714   NA  898.3714
3    1_1    3      710       NA          20        1 646.2449   NA 1544.6163
4    1_1    4      652       NA          20        1 593.4530   NA 2138.0693
5    1_1    5      740       NA          20        1 673.5510   NA 2811.6204
6    1_1    6      790       NA          20        1 719.0612   NA 3530.6816
  cvCH4     rvBg rvCH4
1     0       NA    NA
2    NA 449.1857    NA
3    NA 646.2449    NA
4    NA 593.4530    NA
5    NA 673.5510    NA
6    NA 719.0612    NA
> tail(cum.prod)
    bottle days meas.vol CH4.conc temperature pressure      vBg      vCH4
355    5_3   29      150   0.6297          20        1 136.5306  86.11248
356    5_3   35      405   0.6782          20        1 368.6326 250.35824
357    5_3   42      385   0.6030          20        1 350.4286 211.67514
358    5_3   49      220   0.6235          20        1 200.2449 125.05816
359    5_3   56      205   0.6093          20        1 186.5918 113.88457
360    5_3   62      160   0.6041          20        1 145.6327  88.12894
        cvBg cvCH4     rvBg    rvCH4
355 2763.380    NA 68.26530 43.05624
356 3132.012    NA 61.43877 41.72637
357 3482.441    NA 50.06122 30.23931
358 3682.686    NA 28.60641 17.86545
359 3869.277    NA 26.65598 16.26922
360 4014.910    NA 24.27211 14.68816
> 
> # Note warnings and related NAs in results
> warnings()
> 
> # Set extrap = TRUE to avoid
> cum.prod <- cumBg(vol2, comp = comp2, temp = 20, pres = 1, 
+                   id.name = "bottle", time.name = "days", 
+ 		  dat.name = "meas.vol", comp.name = "CH4.conc", 
+                   extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> head(cum.prod)
  bottle days meas.vol CH4.conc temperature pressure      vBg     vCH4
1    1_1    0        0   0.0000          20        1   0.0000   0.0000
2    1_1    2      987   0.7334          20        1 898.3714 659.6330
3    1_1    3      710   0.7334          20        1 646.2449 474.5080
4    1_1    4      652   0.7334          20        1 593.4530 435.7454
5    1_1    5      740   0.7334          20        1 673.5510 494.5577
6    1_1    6      790   0.7334          20        1 719.0612 527.9737
       cvBg    cvCH4     rvBg    rvCH4
1    0.0000    0.000       NA       NA
2  898.3714  659.633 449.1857 329.8165
3 1544.6163 1134.141 646.2449 474.5080
4 2138.0693 1569.886 593.4530 435.7454
5 2811.6204 2064.444 673.5510 494.5577
6 3530.6816 2592.418 719.0612 527.9737
> 
> ## Not run: 
> ##D # Not run just because it is a bit slow
> ##D qplot(x = days, y = cvCH4, data = cum.prod, xlab = "Time (d)", 
> ##D       ylab = "Cumulative methane production (mL)", 
> ##D       color = bottle, geom = "line")
> ## End(Not run)
> 
> # Mass example
> data("mass")
> 
> mass
     id           date.time   days   mass  when
1   2_1 2014-06-05 06:30:00   0.00 1200.6 start
2   2_2 2014-06-05 06:30:00   0.00 1217.7 start
3   2_3 2014-06-05 06:30:00   0.00 1194.9 start
4   2_4 2014-06-05 06:30:00   0.00 1194.5 start
5   2_5 2014-06-05 06:30:00   0.00 1196.3 start
6   2_6 2014-06-05 06:30:00   0.00 1207.7 start
7  2_10 2014-06-05 06:30:00   0.00 1192.7 start
8  2_11 2014-06-05 06:30:00   0.00 1194.4 start
9  2_12 2014-06-05 06:30:00   0.00 1192.2 start
10  2_1 2014-10-06 03:45:00 122.89 1196.1   end
11  2_2 2014-10-06 03:45:00 122.89 1213.0   end
12  2_3 2014-10-06 03:45:00 122.89 1190.3   end
13  2_4 2014-10-06 03:45:00 122.89 1188.2   end
14  2_5 2014-10-06 03:45:00 122.89 1189.8   end
15  2_6 2014-10-06 03:45:00 122.89 1201.0   end
16 2_10 2014-10-06 03:45:00 122.89 1187.8   end
17 2_11 2014-10-06 03:45:00 122.89 1189.6   end
18 2_12 2014-10-06 03:45:00 122.89 1187.4   end
> 
> # Need to specify data type with dat.type argument (using default 
> # values for id.name, dat.name, and comp.name)
> cum.prod <- cumBg(mass, dat.type = "mass", comp = comp, temp = 35, 
+                   pres = 1, time.name = "days")
Biogas composition is interpolated.
Working with mass data (applying gravimetric approach).
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
> cum.prod
     id           date.time   days   mass  when      xCH4 temperature pressure
1   2_1 2014-06-05 06:30:00   0.00 1200.6 start        NA          35        1
2   2_1 2014-10-06 03:45:00 122.89 1196.1   end 0.6963397          35        1
3   2_2 2014-06-05 06:30:00   0.00 1217.7 start        NA          35        1
4   2_2 2014-10-06 03:45:00 122.89 1213.0   end 0.6958987          35        1
5   2_3 2014-06-05 06:30:00   0.00 1194.9 start        NA          35        1
6   2_3 2014-10-06 03:45:00 122.89 1190.3   end 0.6815748          35        1
7   2_4 2014-06-05 06:30:00   0.00 1194.5 start        NA          35        1
8   2_4 2014-10-06 03:45:00 122.89 1188.2   end 0.6681050          35        1
9   2_5 2014-06-05 06:30:00   0.00 1196.3 start        NA          35        1
10  2_5 2014-10-06 03:45:00 122.89 1189.8   end 0.6667626          35        1
11  2_6 2014-06-05 06:30:00   0.00 1207.7 start        NA          35        1
12  2_6 2014-10-06 03:45:00 122.89 1201.0   end 0.6731467          35        1
13 2_10 2014-06-05 06:30:00   0.00 1192.7 start        NA          35        1
14 2_10 2014-10-06 03:45:00 122.89 1187.8   end 0.6938179          35        1
15 2_11 2014-06-05 06:30:00   0.00 1194.4 start        NA          35        1
16 2_11 2014-10-06 03:45:00 122.89 1189.6   end 0.6885393          35        1
17 2_12 2014-06-05 06:30:00   0.00 1192.2 start        NA          35        1
18 2_12 2014-10-06 03:45:00 122.89 1187.4   end 0.6865428          35        1
   massloss cmassloss      vBg     vCH4     cvBg    cvCH4     rvBg    rvCH4
1       0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
2       4.5       4.5 3926.556 2737.845 3926.556 2737.845 31.95180 22.27883
3       0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
4       4.7       4.7 4099.086 2856.339 4099.086 2856.339 33.35573 23.24306
5       0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
6       4.6       4.6 3949.821 2695.845 3949.821 2695.845 32.14111 21.93705
7       0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
8       6.3       6.3 5331.978 3567.488 5331.978 3567.488 43.38822 29.02993
9       0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
10      6.5       6.5 5493.397 3668.126 5493.397 3668.126 44.70174 29.84886
11      0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
12      6.7       6.7 5701.113 3843.167 5701.113 3843.167 46.39200 31.27323
13      0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
14      4.9       4.9 4263.786 2962.249 4263.786 2962.249 34.69595 24.10488
15      0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
16      4.8       4.8 4152.783 2863.246 4152.783 2863.246 33.79269 23.29926
17      0.0       0.0    0.000    0.000    0.000    0.000       NA       NA
18      4.8       4.8 4143.783 2848.781 4143.783 2848.781 33.71944 23.18155
> 
> # Drop time 0 rows
> cum.prod <- cumBg(mass, dat.type = "mass", comp = comp, temp = 35, 
+                   pres = 1, time.name = "days", showt0 = FALSE)
Biogas composition is interpolated.
Working with mass data (applying gravimetric approach).
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
> cum.prod
    id           date.time   days   mass when      xCH4 temperature pressure
1  2_1 2014-10-06 03:45:00 122.89 1196.1  end 0.6963397          35        1
2  2_2 2014-10-06 03:45:00 122.89 1213.0  end 0.6958987          35        1
3  2_3 2014-10-06 03:45:00 122.89 1190.3  end 0.6815748          35        1
4  2_4 2014-10-06 03:45:00 122.89 1188.2  end 0.6681050          35        1
5  2_5 2014-10-06 03:45:00 122.89 1189.8  end 0.6667626          35        1
6  2_6 2014-10-06 03:45:00 122.89 1201.0  end 0.6731467          35        1
7 2_10 2014-10-06 03:45:00 122.89 1187.8  end 0.6938179          35        1
8 2_11 2014-10-06 03:45:00 122.89 1189.6  end 0.6885393          35        1
9 2_12 2014-10-06 03:45:00 122.89 1187.4  end 0.6865428          35        1
  massloss cmassloss      vBg     vCH4     cvBg    cvCH4     rvBg    rvCH4
1      4.5       4.5 3926.556 2737.845 3926.556 2737.845 31.95180 22.27883
2      4.7       4.7 4099.086 2856.339 4099.086 2856.339 33.35573 23.24306
3      4.6       4.6 3949.821 2695.845 3949.821 2695.845 32.14111 21.93705
4      6.3       6.3 5331.978 3567.488 5331.978 3567.488 43.38822 29.02993
5      6.5       6.5 5493.397 3668.126 5493.397 3668.126 44.70174 29.84886
6      6.7       6.7 5701.113 3843.167 5701.113 3843.167 46.39200 31.27323
7      4.9       4.9 4263.786 2962.249 4263.786 2962.249 34.69595 24.10488
8      4.8       4.8 4152.783 2863.246 4152.783 2863.246 33.79269 23.29926
9      4.8       4.8 4143.783 2848.781 4143.783 2848.781 33.71944 23.18155
> 
> # Add initial headspace correction (alternatively, headspace could 
> # be a data frame with a different volume for each reactor)
> cum.prod <- cumBg(mass, dat.type = "mass", comp = comp, temp = 35, 
+                   pres = 1, time.name = "days", headspace = 300, 
+                   headcomp = "N2", temp.init = 20, showt0 = FALSE)
Biogas composition is interpolated.
Working with mass data (applying gravimetric approach).
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
In gravimetric method, correcting for initial headspace composition, using an initial temperature of 20 C.
> cum.prod
    id           date.time   days   mass when      xCH4 vol.hs temperature
1  2_1 2014-10-06 03:45:00 122.89 1196.1  end 0.6963397    300          35
2  2_2 2014-10-06 03:45:00 122.89 1213.0  end 0.6958987    300          35
3  2_3 2014-10-06 03:45:00 122.89 1190.3  end 0.6815748    300          35
4  2_4 2014-10-06 03:45:00 122.89 1188.2  end 0.6681050    300          35
5  2_5 2014-10-06 03:45:00 122.89 1189.8  end 0.6667626    300          35
6  2_6 2014-10-06 03:45:00 122.89 1201.0  end 0.6731467    300          35
7 2_10 2014-10-06 03:45:00 122.89 1187.8  end 0.6938179    300          35
8 2_11 2014-10-06 03:45:00 122.89 1189.6  end 0.6885393    300          35
9 2_12 2014-10-06 03:45:00 122.89 1187.4  end 0.6865428    300          35
  pressure massloss cmassloss      vBg     vCH4     cvBg    cvCH4     rvBg
1        1      4.5       4.5 3872.674 2700.275 3872.674 2700.275 31.51334
2        1      4.7       4.7 4045.352 2818.896 4045.352 2818.896 32.91848
3        1      4.6       4.6 3900.802 2662.387 3900.802 2662.387 31.74222
4        1      6.3       6.3 5287.262 3537.570 5287.262 3537.570 43.02434
5        1      6.5       6.5 5449.103 3638.549 5449.103 3638.549 44.34130
6        1      6.7       6.7 5654.800 3811.947 5654.800 3811.947 46.01514
7        1      4.9       4.9 4210.745 2925.399 4210.745 2925.399 34.26434
8        1      4.8       4.8 4101.490 2827.880 4101.490 2827.880 33.37529
9        1      4.8       4.8 4093.144 2813.968 4093.144 2813.968 33.30738
     rvCH4
1 21.97311
2 22.93837
3 21.66480
4 28.78647
5 29.60818
6 31.01918
7 23.80502
8 23.01148
9 22.89827
> 
> # Pressure example
> data("strawPressure")
> data("strawComp")
> data("strawSetup")
> 
> cum.prod <- cumBg(strawPressure, dat.type = 'pres', 
+                   comp = strawComp, temp = 35, 
+                   id.name = 'bottle', time.name ='time', 
+                   dat.name = 'pres', comp.name = 'xCH4',
+                   pres.resid = 'pres.resid', temp.init = 20, 
+                   pres.init = 101.325,
+                   headspace = strawSetup, 
+                   vol.hs.name = 'headspace', 
+                   extrap = TRUE, 
+                   unit.pres = 'kPa', pres.std = 101.325)
Biogas composition is interpolated.
Working with pressure data, pressure measurements are ABSOLUTE If this is incorrect, change 'absolute' argument to FALSE.
Using a standard pressure of 101.325 kPa and standard temperature of 0 C for standardizing volume.
> 
> head(cum.prod)
  bottle              date.time time     pres pres.resid      xCH4 headspace
1      1                   <NA> 0.00       NA         NA        NA        NA
2      1 2016-04-28 10:30:00.00 1.90 153.2034   101.6290 0.4189000     491.3
3      1 2016-04-29 16:00:00.00 3.12 171.9485   101.8316 0.4363556     491.3
4      1 2016-04-30 13:20:00.00 4.01 140.7404   101.8316 0.4413000     491.3
5      1 2016-05-02 11:00:00.00 5.92 168.7061   102.1356 0.5014287     491.3
6      1 2016-05-04 14:30:00.00 8.06 168.4022   102.0343 0.5152000     491.3
  temperature  rh.resid pres.resid.prev rh.resid.prev temp.prev      vBg
1          NA        NA              NA            NA        NA   0.0000
2          35 0.6633598        101.3250     1.0000000        20 186.9604
3          35 0.5922216        101.6290     0.6633598        35 293.9874
4          35 0.7235421        101.8316     0.5922216        35 157.2907
5          35 0.6054054        101.8316     0.7235421        35 280.6449
6          35 0.6058965        102.1356     0.6054054        35 275.1650
       vCH4      cvBg     cvCH4      rvBg     rvCH4
1   0.00000    0.0000   0.00000        NA        NA
2  78.51682  186.9604  78.51682  98.40021  41.32464
3 128.59934  480.9478 207.11616 240.97326 105.40929
4  69.58204  638.2385 276.69820 176.73114  78.18207
5 141.03027  918.8834 417.72847 146.93452  73.83784
6 142.06556 1194.0484 559.79403 128.58178  66.38578
> 
> # Absolute GC method (long format is the only option)
> 
> # Generate some data--two bottles with identical results
> # Units for n1 and n2 are micromoles of CH4
> biogas <- data.frame(id = rep(c('A', 'B'), each = 5), 
+                      time.d = rep(1:5, 2), 
+                      n1 = rep(c(1.1, 2.4, 3.8, 5.9, 2.3), 2), 
+                      n2 = rep(c(NA, NA, NA, 1.2, NA), 2))
> 
> # Bottles were vented after the measurements on day 4
> biogas
   id time.d  n1  n2
1   A      1 1.1  NA
2   A      2 2.4  NA
3   A      3 3.8  NA
4   A      4 5.9 1.2
5   A      5 2.3  NA
6   B      1 1.1  NA
7   B      2 2.4  NA
8   B      3 3.8  NA
9   B      4 5.9 1.2
10  B      5 2.3  NA
> 
> # Syringe volume is 0.25 mL
> # Headspace volume is 50 mL
> 
> cp <- cumBg(biogas, id.name = 'id', time.name = 'time.d', 
+             dat.name = 'n1', mol.f.name = 'n2', vol.syr= 0.25,
+             headspace = 50, dat.type = 'gca')
> cp
   id time.d  n1  n2 vol.hs  vCH4.bot vCH4.resid vCH4.vent     vCH4     cvCH4
1   A      0  NA  NA     NA  0.000000   0.000000   0.00000 0.000000  0.000000
2   A      1 1.1 1.1     50  4.919329   4.919329   0.00000 4.919329  4.919329
3   A      2 2.4 2.4     50 10.733082  10.733082   0.00000 5.813753 10.733082
4   A      3 3.8 3.8     50 16.994047  16.994047   0.00000 6.260965 16.994047
5   A      4 5.9 1.2     50 26.385494   5.366541  21.01895 9.391447 26.385494
6   A      5 2.3 2.3     50 10.285870  10.285870   0.00000 4.919329 31.304823
7   B      0  NA  NA     NA  0.000000   0.000000   0.00000 0.000000  0.000000
8   B      1 1.1 1.1     50  4.919329   4.919329   0.00000 4.919329  4.919329
9   B      2 2.4 2.4     50 10.733082  10.733082   0.00000 5.813753 10.733082
10  B      3 3.8 3.8     50 16.994047  16.994047   0.00000 6.260965 16.994047
11  B      4 5.9 1.2     50 26.385494   5.366541  21.01895 9.391447 26.385494
12  B      5 2.3 2.3     50 10.285870  10.285870   0.00000 4.919329 31.304823
> 
> # Suppose the bottles had two difference headspace volumes
> setup <- data.frame(id = c('A', 'B'), vol.hs = c(50, 60))
> 
> cp2 <- cumBg(biogas, id.name = 'id', time.name = 'time.d', 
+             dat.name = 'n1', mol.f.name = 'n2', vol.syr= 0.25,
+             headspace = setup, vol.hs.name = 'vol.hs', dat.type = 'gca')
> cp2
   id time.d  n1  n2 vol.hs  vCH4.bot vCH4.resid vCH4.vent      vCH4     cvCH4
1   A      0  NA  NA     NA  0.000000   0.000000   0.00000  0.000000  0.000000
2   A      1 1.1 1.1     50  4.919329   4.919329   0.00000  4.919329  4.919329
3   A      2 2.4 2.4     50 10.733082  10.733082   0.00000  5.813753 10.733082
4   A      3 3.8 3.8     50 16.994047  16.994047   0.00000  6.260965 16.994047
5   A      4 5.9 1.2     50 26.385494   5.366541  21.01895  9.391447 26.385494
6   A      5 2.3 2.3     50 10.285870  10.285870   0.00000  4.919329 31.304823
7   B      0  NA  NA     NA  0.000000   0.000000   0.00000  0.000000  0.000000
8   B      1 1.1 1.1     60  5.903195   5.903195   0.00000  5.903195  5.903195
9   B      2 2.4 2.4     60 12.879699  12.879699   0.00000  6.976503 12.879699
10  B      3 3.8 3.8     60 20.392856  20.392856   0.00000  7.513158 20.392856
11  B      4 5.9 1.2     60 31.662593   6.439849  25.22274 11.269736 31.662593
12  B      5 2.3 2.3     60 12.343045  12.343045   0.00000  5.903195 37.565788
> 
> 
> # Different data structures
> # Load example data
> data("s3voll")
> data("s3volw")
> data("s3compl")
> data("s3compw")
> data("s3lcombo")
> 
> # wide
> 
> # Check data structure first
> s3volw
   time.d   D   E   F
1  0.9438 103 106 107
2  2.9060 192 181 203
3 34.0100 109 110 112
4  5.8860 141 133 140
5 10.0000 112 111 110
6 23.1000 200 190 200
7 57.8400 146 136 138
> 
> s3compw
  time.d      D      E      F
1  2.906 0.6983 0.6817 0.6869
2 34.010 0.6626 0.6556 0.6527
3 10.000 0.6646 0.6644 0.6632
4 23.100 0.6946 0.6871 0.6829
5 57.840 0.6651 0.6600     NA
> 
> cum.prod <- cumBg(s3volw, comp = s3compw, temp = 25, pres = 1,
+                   time.name = 'time.d',
+                   data.struct = 'wide',
+                   dat.name = 'D', comp.name = 'D',
+                   extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> 
> cum.prod
   id  time.d vol      xCH4 temperature pressure       vBg      vCH4      cvBg
1   D  0.0000  NA        NA          NA       NA   0.00000   0.00000   0.00000
2   D  0.9438 103 0.6983000          25        1  91.40334  63.91110  91.40334
3   D  2.9060 192 0.6983000          25        1 170.38293 119.13525 261.78628
4   D  5.8860 141 0.6841435          25        1 125.12497  85.72159 386.91124
5   D 10.0000 112 0.6646000          25        1  99.39004  66.15145 486.30129
6   D 23.1000 200 0.6946000          25        1 177.48222 123.44367 663.78351
7   D 34.0100 109 0.6626000          25        1  96.72781  64.18635 760.51132
8   D 57.8400 146 0.6651000          25        1 129.56202  86.29782 890.07334
9   E  0.0000  NA        NA          NA       NA   0.00000   0.00000   0.00000
10  E  0.9438 106 0.6817000          25        1  94.06558  64.21370  94.06558
11  E  2.9060 181 0.6817000          25        1 160.62141 109.64792 254.68699
12  E  5.8860 133 0.6744327          25        1 118.02568  79.71363 372.71266
13  E 10.0000 111 0.6644000          25        1  98.50263  65.54114 471.21530
14  E 23.1000 190 0.6871000          25        1 168.60811 116.00904 639.82341
15  E 34.0100 110 0.6556000          25        1  97.61522  64.09287 737.43863
16  E 57.8400 136 0.6600000          25        1 120.68791  79.77238 858.12654
17  F  0.0000  NA        NA          NA       NA   0.00000   0.00000   0.00000
18  F  0.9438 107 0.6869000          25        1  94.95299  65.31245  94.95299
19  F  2.9060 203 0.6869000          25        1 180.14445 123.91053 275.09744
20  F  5.8860 140 0.6769443          25        1 124.23755  84.22063 399.33500
21  F 10.0000 110 0.6632000          25        1  97.61522  64.83370 496.95022
22  F 23.1000 200 0.6829000          25        1 177.48222 121.37056 674.43244
23  F 34.0100 112 0.6527000          25        1  99.39004  64.97035 773.82248
24  F 57.8400 138 0.6527000          25        1 122.46273  80.05275 896.28522
       cvCH4       rvBg     rvCH4
1    0.00000         NA        NA
2   63.91110  96.846094 67.716783
3  183.04635  86.832602 60.715143
4  268.76794  41.988244 28.765635
5  334.91939  24.158980 16.079593
6  458.36306  13.548261  9.423181
7  522.54941   8.865977  5.883259
8  608.84723   5.436929  3.621394
9    0.00000         NA        NA
10  64.21370  99.666854 68.037400
11 173.86162  81.857818 55.880093
12 253.57525  39.605932 26.749541
13 319.11638  23.943275 15.931243
14 435.12542  12.870848  8.855652
15 499.21829   8.947316  5.874690
16 578.99067   5.064537  3.347561
17   0.00000         NA        NA
18  65.31245 100.607108 69.201575
19 189.22297  91.807387 63.148776
20 273.44361  41.690455 28.261957
21 338.27731  23.727570 15.759287
22 459.64787  13.548261  9.264928
23 524.61822   9.109995  5.955119
24 604.67097   5.139015  3.359327
> 
> # longcombo
> s3lcombo
   id  time.d vol.ml   xCH4
1   D  0.9438    103     NA
2   E  0.9451    106     NA
3   F  0.9472    107     NA
4   D  2.9060    192 0.6983
5   E  2.9090    181 0.6817
6   F  2.9100    203 0.6869
7   D  5.8860    141 0.6800
8   E  5.8880    133 0.6800
9   F  5.8900    140 0.6800
10  D 10.0000    112 0.6646
11  E 10.0000    111 0.6644
12  F 10.0100    110 0.6632
13  D 23.1000    200 0.6946
14  E 23.1000    190 0.6871
15  F 23.1000    200 0.6829
16  D 34.0100    109 0.6626
17  E 34.0100    110 0.6556
18  F 34.0100    112 0.6527
19  D 57.8400    146 0.6651
20  E 57.8400    136 0.6600
21  F 57.8400    138     NA
> 
> cum.prod <- cumBg(s3lcombo, temp = 25, pres = 1,
+                   id.name = 'id', time.name = 'time.d',
+                   data.struct = 'longcombo',
+                   dat.name = 'vol.ml', comp.name = 'xCH4',
+                   extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> 
> # Compare wide and longcombo to long (default)
> s3voll
   id  time.d vol.ml cvol.ml
1   D  0.9438    103     103
2   E  0.9451    106     106
3   F  0.9472    107     107
4   D  2.9060    192     295
5   E  2.9090    181     287
6   F  2.9100    203     310
7   D  5.8860    141     436
8   E  5.8880    133     420
9   F  5.8900    140     450
10  D 10.0000    112     548
11  E 10.0000    111     531
12  F 10.0100    110     560
13  D 23.1000    200     748
14  E 23.1000    190     721
15  F 23.1000    200     760
16  D 34.0100    109     857
17  E 34.0100    110     831
18  F 34.0100    112     872
19  D 57.8400    146    1003
20  E 57.8400    136     967
21  F 57.8400    138    1010
> s3compl
   id time.d   xCH4
1   D  2.906 0.6983
2   E  2.909 0.6817
3   F  2.910 0.6869
4   D 10.000 0.6646
5   E 10.000 0.6644
6   F 10.010 0.6632
7   D 23.100 0.6946
8   E 23.100 0.6871
9   F 23.100 0.6829
10  D 34.010 0.6626
11  E 34.010 0.6556
12  F 34.010 0.6527
13  D 57.840 0.6651
14  E 57.840 0.6600
> 
> cum.prod <- cumBg(s3lcombo, comp = s3compl, temp = 25, pres = 1,
+                   id.name = 'id', time.name = 'time.d',
+                   dat.name = 'vol.ml', comp.name = 'xCH4',
+                   extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> 
> cum.prod
   id  time.d vol.ml      xCH4 temperature pressure       vBg      vCH4
1   D  0.0000     NA        NA          NA       NA   0.00000   0.00000
2   D  0.9438    103 0.6983000          25        1  91.40334  63.91110
3   D  2.9060    192 0.6983000          25        1 170.38293 119.13525
4   D  5.8860    141 0.6841435          25        1 125.12497  85.72159
5   D 10.0000    112 0.6646000          25        1  99.39004  66.15145
6   D 23.1000    200 0.6946000          25        1 177.48222 123.44367
7   D 34.0100    109 0.6626000          25        1  96.72781  64.18635
8   D 57.8400    146 0.6651000          25        1 129.56202  86.29782
9   E  0.0000     NA        NA          NA       NA   0.00000   0.00000
10  E  0.9451    106 0.6817000          25        1  94.06558  64.21370
11  E  2.9090    181 0.6817000          25        1 160.62141 109.64792
12  E  5.8880    133 0.6744321          25        1 118.02568  79.71356
13  E 10.0000    111 0.6644000          25        1  98.50263  65.54114
14  E 23.1000    190 0.6871000          25        1 168.60811 116.00904
15  E 34.0100    110 0.6556000          25        1  97.61522  64.09287
16  E 57.8400    136 0.6600000          25        1 120.68791  79.77238
17  F  0.0000     NA        NA          NA       NA   0.00000   0.00000
18  F  0.9472    107 0.6869000          25        1  94.95299  65.31245
19  F  2.9100    203 0.6869000          25        1 180.14445 123.91053
20  F  5.8900    140 0.6769527          25        1 124.23755  84.22168
21  F 10.0100    110 0.6632000          25        1  97.61522  64.83370
22  F 23.1000    200 0.6829000          25        1 177.48222 121.37056
23  F 34.0100    112 0.6527000          25        1  99.39004  64.97035
24  F 57.8400    138 0.6527000          25        1 122.46273  80.05275
        cvBg     cvCH4       rvBg     rvCH4
1    0.00000   0.00000         NA        NA
2   91.40334  63.91110  96.846094 67.716783
3  261.78628 183.04635  86.832602 60.715143
4  386.91124 268.76794  41.988244 28.765635
5  486.30129 334.91939  24.158980 16.079593
6  663.78351 458.36306  13.548261  9.423181
7  760.51132 522.54941   8.865977  5.883259
8  890.07334 608.84723   5.436929  3.621394
9    0.00000   0.00000         NA        NA
10  94.06558  64.21370  99.529761 67.943814
11 254.68699 173.86162  81.786960 55.831722
12 372.71266 253.57517  39.619227 26.758495
13 471.21530 319.11631  23.954920 15.938992
14 639.82341 435.12535  12.870848  8.855652
15 737.43863 499.21821   8.947316  5.874690
16 858.12654 578.99059   5.064537  3.347561
17   0.00000   0.00000         NA        NA
18  94.95299  65.31245 100.245976 68.953174
19 275.09744 189.22297  91.779323 63.129473
20 399.33500 273.44465  41.690455 28.262307
21 496.95022 338.27836  23.693015 15.736336
22 674.43244 459.64892  13.558611  9.272006
23 773.82248 524.61926   9.109995  5.955119
24 896.28522 604.67202   5.139015  3.359327
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("interp")
> ### * interp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interp
> ### Title: Interpolate Biogas Composition or Cumulative Production
> ### Aliases: interp
> ### Keywords: chron smooth
> 
> ### ** Examples
> 
> # Fake composition data 
> dat <- data.frame(time = c(1, 7, 14, 28), 
+                   xCH4 = c(0.3, 0.5, 0.61, 0.65))
> interp(dat$time, dat$xCH4, time.out = 10)
      t10 
0.5471429 
> interp(dat$time, dat$xCH4, time.out = 10, method = "natural")
      t10 
0.5623619 
> interp(dat$time, dat$xCH4, time.out = c(10, 30))
Warning in interp(dat$time, dat$xCH4, time.out = c(10, 30)) :
  1 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
      t10       t30 
0.5471429        NA 
> interp(dat$time, dat$xCH4, time.out = c(10, 30), method = "natural")
Warning in interp(dat$time, dat$xCH4, time.out = c(10, 30), method = "natural") :
  1 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
      t10       t30 
0.5623619        NA 
> interp(dat$time, dat$xCH4, time.out = c(10, 30), extrap = TRUE)
      t10       t30 
0.5471429 0.6500000 
> 
> # Actual data
> data(comp)
> # Work with one reactor
> bgc <- subset(comp, id=="2_1")
> 
> # With numeric time, interpolate to 1, 7, and 30 days
> interp(bgc$days, bgc$xCH4, time.out = c(1, 7, 30))
Warning in interp(bgc$days, bgc$xCH4, time.out = c(1, 7, 30)) :
  2 NA(s) in calculated values. If you don't mind extrapolation, set extrap = TRUE to avoid this.
       t1        t7       t30 
       NA        NA 0.6839498 
> 
> # If extrapolation is OK
> interp(bgc$days, bgc$xCH4, time.out = c(1, 7, 30), extrap = TRUE)
       t1        t7       t30 
0.7104731 0.7104731 0.6839498 
> 
> # Or POSIXct
> interp(bgc$date.time, bgc$xCH4, 
+        time.out = as.POSIXct("2014-07-12 13:00:00"))
       t1 
0.6906194 
> 
> # For cumulative gas production
> data(vol)
> # Work with one reactor
> bgv <- subset(vol, id=="2_1")
> # Calculate cumulative volume
> bgv <- cumBg(bgv, time.name = "days")
Working with volume data, applying volumetric method.
Either temperature or presure is missing (temp and pres arguments) so volumes are NOT standardized.
Warning in cumBg(bgv, time.name = "days") :
  Biogas composition date ('comp' and 'name.comp' arguments) not provided so CH4 results will not be returned.
> # The interpolate of cumulative production to 1, 7, and 30 days
> interp(bgv$days, bgv$cvBg, time.out = c(1, 7, 30), method = "hyman")
       t1        t7       t30 
 163.8901 1495.0873 2745.8665 
> 
> 
> 
> cleanEx()
> nameEx("mass")
> ### * mass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mass
> ### Title: Mass Change of Batch Reactors
> ### Aliases: mass
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(mass)
> 
> 
> 
> cleanEx()
> nameEx("mass2vol")
> ### * mass2vol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mass2vol
> ### Title: Calculate Biogas Production Gravimetrically
> ### Aliases: mass2vol
> ### Keywords: manip
> 
> ### ** Examples
> 
>   # Volume of methane if measured mass loss was 3.1 g
>   mass2vol(3.1, xCH4 = 0.65, temp = 35, pres = 1)
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
[1] 1675.698
> 
>   # More details
>   mass2vol(3.1, xCH4 = 0.65, temp = 35, pres = 1, value = "all")
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
          vBg     vCH4     vCO2
[1,] 2574.059 1675.698 898.3613
>   
>   # Vectorized
>   data("massw")
>   massw$massloss <- massw$start - massw$end
>   massw$vCH4 <- mass2vol(massw$massloss, xCH4 = 0.65, temp = 35, 
+                          pres = 1)
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
>   massw
    id  start    end massloss     vCH4
1  2_1 1200.6 1196.1      4.5 2432.464
2  2_2 1217.7 1213.0      4.7 2540.574
3  2_3 1194.9 1190.3      4.6 2486.519
4  2_4 1194.5 1188.2      6.3 3405.450
5  2_5 1196.3 1189.8      6.5 3513.560
6  2_6 1207.7 1201.0      6.7 3621.669
7 2_10 1192.7 1187.8      4.9 2648.684
8 2_11 1194.4 1189.6      4.8 2594.629
9 2_12 1192.2 1187.4      4.8 2594.629
>   
> 
> 
> 
> cleanEx()
> nameEx("massw")
> ### * massw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: massw
> ### Title: Mass Change of Batch Reactors
> ### Aliases: massw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(massw)
> 
> 
> 
> cleanEx()
> nameEx("molMass")
> ### * molMass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: molMass
> ### Title: Calculate Molar Mass of Compound
> ### Aliases: molMass
> 
> ### ** Examples
> 
>   molMass("C6H12O6")
[1] 180.156
> 
>   molMass("CH3COOH")
[1] 60.052
> 
>   molMass("CH3CH2OH")
[1] 46.068
> 
>   molMass("CH4")
[1] 16.042
> 
>   molMass("ch4")
[1] 16.042
> 
>   molMass(c("C6H12O6", "CH3COOH", "CH3CH2OH"))
[1] 180.156  60.052  46.068
> 
>   # Case-sentitive for two letter elements
>   molMass("NaHCO3")
[1] 84.00777
> 
>   # Complex formulas OK
>   molMass("H3C(CH2)5COOH")
[1] 130.182
> 
>   molMass("(C6H12O6)0.24999 (H3COOH)0.75001")
[1] 81.06918
> 
>   # Database is quite complete 
>   molMass('CdSiO3')
[1] 188.494
> 
>   # Use care for, e.g., hydrates
>   molMass('FeSO4(H2O)7')
[1] 278.057
> 
> 
> 
> 
> cleanEx()
> nameEx("predBg")
> ### * predBg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predBg
> ### Title: Predict Biogas Production
> ### Aliases: predBg
> 
> ### ** Examples
> 
>   # BMP of cellulose in mL CH4/g
>   predBg("C6H10O5")
[1] 413.7274
> 
>   # How much is produced in a real reactor? Assume 10% goes to 
>   # biomass production
>   predBg("C6H10O5", fs = 0.1)
[1] 372.3547
> 
>   # And substrate is 80% degradable
>   predBg("C6H10O5", fs = 0.1, fd = 0.8)
[1] 297.8837
> 
>   # More detailed results
>   predBg("C6H10O5", value = "all")
     form mass mol.mass      moles      COD     hydro fCH4     vCH4      mCH4
1 C6H10O5    1   162.14 0.00616751 1.184162 0.1111139  0.5 413.7274 0.2968176
       mCO2
1 0.8142963
> 
>   # Given a substrate with a COD of 1.4 g
>   predBg(COD = 1.4)
[1] 489.1379
> 
>   # But CH4 production is reduced if substrate is 80% degradable 
>   # and 10% goes to cell synthesis
>   predBg(COD = 1.4, fd = 0.8, fs = 0.1)
[1] 352.1793
> 
>   # Can use macromolecule composition, e.g., for pig manure
>   predBg(mcomp = c(vfa = 0.2, protein = 0.25, carbohydrate = 0.32, 
+                    lipid = 0.15, lignin = 0.08), 
+          value = "all")
                      form mass mol.mass       moles      COD     hydro
1 C15.391H25.8286O7.79882N    1 349.6693 0.002859845 1.573944 0.3495545
       fCH4    vCH4      mCH4      mCO2
1 0.5587272 549.911 0.3945188 0.8548067
> 
>   # Function expects sum(mcomp) == 1 but this is not required
>   # But unless mass is set, mass is taken as sum(mcomp)
>   predBg(mcomp = c(vfa = 20, protein = 25, carbohydrate = 32, 
+                    lipid = 15, lignin = 8), 
+          value = "all")
Warning in predBg(mcomp = c(vfa = 20, protein = 25, carbohydrate = 32, lipid = 15,  :
  mass taken as sum of mcomp: 100
Warning in predBg(mcomp = c(vfa = 20, protein = 25, carbohydrate = 32, lipid = 15,  :
  Sum of mcomp != 1.0 so dividing all elements by the sum for calculation of formula.
                      form mass mol.mass     moles      COD    hydro      fCH4
1 C15.391H25.8286O7.79882N  100 349.6693 0.2859845 157.3944 34.95545 0.5587272
     vCH4     mCH4     mCO2
1 54991.1 39.45188 85.48067
> 
>   # Specify mass if this is not the case
>   predBg(mcomp = c(vfa = 20, protein = 25, carbohydrate = 32, 
+                    lipid = 15, lignin = 8), 
+          mass = 1, value = "all")
Warning in predBg(mcomp = c(vfa = 20, protein = 25, carbohydrate = 32, lipid = 15,  :
  Sum of mcomp != 1.0 so dividing all elements by the sum for calculation of formula.
                      form mass mol.mass       moles      COD     hydro
1 C15.391H25.8286O7.79882N    1 349.6693 0.002859845 1.573944 0.3495545
       fCH4    vCH4      mCH4      mCO2
1 0.5587272 549.911 0.3945188 0.8548067
> 
>   # Can mix formulas and macromolecular groups in mcomp
>   predBg(mcomp = c(C6H12O6 = 0.5, protein = 0.5))
[1] 453.217
> 
>   # For CO2 partitioning, must provide conc.sub, pH, and temp 
>   # cattle manure example from Hafner (2007)
>   predBg("C13H20O11N", mass = 1, fs = 0.1, fd = 0.56, 
+          conc.sub = 85, pH = 7.7, temp = 35, value = "all")
        form mass mol.mass       moles      COD  fs  fe   fd conc.sub temp  pH
1 C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.7
       hydro      fCH4      xCH4     vCH4     vCO2      vBg      mCH4      mCO2
1 0.09116771 0.4471459 0.5755929 180.7541 132.6955 313.4496 0.1296772 0.4398633
     mCO2Bg mCO2.sol      cTIC      m.bio       N.req
1 0.2623153 0.177548 0.3429126 0.04063825 -0.01638179
> 
>   # Or, mix of waste paper and waste vegetable oil from vignette
>   predBg(mcomp = c(C6H10O5 = 5/6, C54H100O7 = 1/6), mass = 1, 
+ 	 fd = 0.8, fs = 0.1, conc.sub = 50, pH = 7.5, temp = 35, 
+ 	 value = "all")
               form mass mol.mass      moles      COD  fs  fe  fd conc.sub temp
1 C1.52618H2.61516O    1  36.9655 0.02705225 1.454303 0.1 0.9 0.8       50   35
   pH      hydro      fCH4      xCH4     vCH4     vCO2      vBg      mCH4
1 7.5 0.09279292 0.5566161 0.6380063 365.8395 206.6652 572.5047 0.2624617
       mCO2    mCO2Bg  mCO2.sol      cTIC      m.bio      N.req
1 0.5735654 0.4085402 0.1650252 0.1874861 0.08225028 0.01018521
> 
>   # Note that form can also be used for mixtures, but here it is 
>   # molar ratios that are specified
>   predBg('(C6H10O5)5(C54H100O7)1)', mass = 1, 
+ 	 fd = 0.8, fs = 0.1, conc.sub = 50, pH = 7.5, temp = 35, 
+ 	 value = "all")
Warning in (function (form, elements = NULL, min.elements = NULL, cdigits = 6,  :
  NAs introduced by coercion
Warning in readFormula(f) : NAs introduced by coercion
Warning in readFormula(f) : NAs introduced by coercion
Warning in readFormula(form[i], elements = c("C", "H", "O", "N")) :
  NAs introduced by coercion
                     form mass mol.mass        moles     COD  fs  fe  fd
1 (C6H10O5)5(C54H100O7)1)    1  1672.04 0.0005980718 2.01909 0.1 0.9 0.8
  conc.sub temp  pH     hydro      fCH4      xCH4     vCH4     vCO2      vBg
1       50   35 7.5 0.1901548 0.6463581 0.7073717 507.9156 209.1996 717.1151
       mCH4      mCO2    mCO2Bg mCO2.sol      cTIC     m.bio     N.req
1 0.3643903 0.5469533 0.4135503 0.133403 0.1515599 0.1141927 0.0141407
>   
>   # Function is vectorized for everything except mcomp, e.g., 
>   # fs
>   predBg("C6H10O5", fs = c(0, 0.05, 0.1), value = "all")
     form mass mol.mass      moles      COD   fs   fe fd      hydro fCH4
1 C6H10O5    1   162.14 0.00616751 1.184162 0.00 1.00  1 0.11111385  0.5
2 C6H10O5    1   162.14 0.00616751 1.184162 0.05 0.95  1 0.08444653  0.5
3 C6H10O5    1   162.14 0.00616751 1.184162 0.10 0.90  1 0.05777920  0.5
      vCH4      mCH4      mCO2      m.bio       N.req
1 413.7274 0.2968176 0.8142963 0.00000000 0.000000000
2 393.0410 0.2819767 0.7735815 0.04185753 0.005183298
3 372.3547 0.2671358 0.7328667 0.08371506 0.010366597
> 
>   # form
>   predBg(c("C6H10O5", "C10H19O3N", "CH3CH2OH"), value = "all")
       form mass mol.mass       moles      COD     hydro  fCH4     vCH4
1   C6H10O5    1  162.140 0.006167510 1.184162 0.1111139 0.500 413.7274
2 C10H19O3N    1  201.259 0.004968722 1.987489 0.4923407 0.625 694.3971
3  CH3CH2OH    1   46.068 0.021707042 2.083876 0.0000000 0.750 728.0733
       mCH4      mCO2
1 0.2968176 0.8142963
2 0.4981765 0.8200254
3 0.5223365 0.4776635
>   
>   # pH
>   predBg("C13H20O11N", conc.sub = 85, fs = 0.1, fd = 0.56, 
+          pH = 7+0:10/10, temp = 35, value = "all")
         form mass mol.mass       moles      COD  fs  fe   fd conc.sub temp  pH
1  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.0
2  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.1
3  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.2
4  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.3
5  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.4
6  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.5
7  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.6
8  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.7
9  C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.8
10 C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 7.9
11 C13H20O11N    1  366.297 0.002730025 1.026489 0.1 0.9 0.56       85   35 8.0
        hydro      fCH4      xCH4     vCH4      vCO2      vBg      mCH4
1  0.09116771 0.4471459 0.4764450 180.7541 197.76003 378.5142 0.1296772
2  0.09116771 0.4471459 0.4830273 180.7541 192.61265 373.3668 0.1296772
3  0.09116771 0.4471459 0.4913180 180.7541 186.32560 367.0797 0.1296772
4  0.09116771 0.4471459 0.5017421 180.7541 178.71563 359.4698 0.1296772
5  0.09116771 0.4471459 0.5148055 180.7541 169.61396 350.3681 0.1296772
6  0.09116771 0.4471459 0.5310825 180.7541 158.89982 339.6540 0.1296772
7  0.09116771 0.4471459 0.5511711 180.7541 146.54914 327.3033 0.1296772
8  0.09116771 0.4471459 0.5755929 180.7541 132.69546 313.4496 0.1296772
9  0.09116771 0.4471459 0.6046225 180.7541 117.68377 298.4379 0.1296772
10 0.09116771 0.4471459 0.6380641 180.7541 102.08367 282.8378 0.1296772
11 0.09116771 0.4471459 0.6750713 180.7541  86.62183 267.3760 0.1296772
        mCO2    mCO2Bg   mCO2.sol       cTIC      m.bio       N.req
1  0.4398633 0.3909363 0.04892698 0.09449656 0.04063825 -0.01638179
2  0.4398633 0.3807609 0.05910243 0.11414921 0.04063825 -0.01638179
3  0.4398633 0.3683325 0.07153080 0.13815311 0.04063825 -0.01638179
4  0.4398633 0.3532889 0.08657436 0.16720792 0.04063825 -0.01638179
5  0.4398633 0.3352966 0.10456675 0.20195806 0.04063825 -0.01638179
6  0.4398633 0.3141166 0.12574669 0.24286455 0.04063825 -0.01638179
7  0.4398633 0.2897015 0.15016179 0.29001936 0.04063825 -0.01638179
8  0.4398633 0.2623153 0.17754803 0.34291259 0.04063825 -0.01638179
9  0.4398633 0.2326398 0.20722347 0.40022711 0.04063825 -0.01638179
10 0.4398633 0.2018012 0.23806208 0.45978816 0.04063825 -0.01638179
11 0.4398633 0.1712359 0.26862740 0.51882138 0.04063825 -0.01638179
> 
> 
> 
> cleanEx()
> nameEx("s3compl")
> ### * s3compl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: s3compl
> ### Title: Methane Content of Biogas from Batch Reactors
> ### Aliases: s3compl
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(s3compl)
> 
> 
> 
> cleanEx()
> nameEx("s3compw")
> ### * s3compw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: s3compw
> ### Title: Methane Content of Biogas from Batch Reactors
> ### Aliases: s3compw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(s3compw)
> 
> 
> 
> cleanEx()
> nameEx("s3lcombo")
> ### * s3lcombo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: s3lcombo
> ### Title: Biogas Volume and Methane Content from Batch Bottles
> ### Aliases: s3lcombo
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(s3lcombo)
> 
> 
> 
> cleanEx()
> nameEx("s3voll")
> ### * s3voll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: s3voll
> ### Title: Biogas Volume from Batch Bottles
> ### Aliases: s3voll
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(s3voll)
> 
> 
> 
> cleanEx()
> nameEx("s3volw")
> ### * s3volw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: s3volw
> ### Title: Biogas Volume from Batch Reactors
> ### Aliases: s3volw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(vol)
> 
> 
> 
> cleanEx()
> nameEx("setup")
> ### * setup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setup
> ### Title: Setup Details for Batch Reactors
> ### Aliases: setup
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(setup)
> 
> 
> 
> cleanEx()
> nameEx("setup2")
> ### * setup2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setup2
> ### Title: Setup Details for Some Batch Reactors
> ### Aliases: setup2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(setup2)
> 
> 
> 
> cleanEx()
> nameEx("stdVol")
> ### * stdVol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stdVol
> ### Title: Correct Gas Volume to 'Standard' Conditions
> ### Aliases: stdVol
> ### Keywords: manip
> 
> ### ** Examples
> 
>   # 100 mL, measured at 35 C
>   stdVol(100, temp = 35, pres = 1)
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
[1] 83.70153
> 
>   # Or, with different units
>   stdVol(100, temp = 35, pres = 103, unit.pres = "kPa", pres.std = 101.325)
Using a standard pressure of 101.325 kPa and standard temperature of 0 C for standardizing volume.
[1] 85.16649
>   
>   # Vectorized
>   data(vol)
>   head(vol)
   id           date.time days vol
1 2_1 2014-06-07 06:00:00 1.98 393
2 2_1 2014-06-08 06:00:00 2.98 260
3 2_1 2014-06-09 06:00:00 3.98 245
4 2_1 2014-06-10 06:00:00 4.98 225
5 2_1 2014-06-11 06:00:00 5.98 200
6 2_1 2014-06-12 07:00:00 7.02 175
>   vol$vol.std <- stdVol(vol$vol, temp = 20, pres = 1.02)
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
>   head(vol)
   id           date.time days vol  vol.std
1 2_1 2014-06-07 06:00:00 1.98 393 365.0332
2 2_1 2014-06-08 06:00:00 2.98 260 241.4978
3 2_1 2014-06-09 06:00:00 3.98 245 227.5652
4 2_1 2014-06-10 06:00:00 4.98 225 208.9885
5 2_1 2014-06-11 06:00:00 5.98 200 185.7675
6 2_1 2014-06-12 07:00:00 7.02 175 162.5466
>   
>   #using options() (recommended!)
>   oldoptions <- options(temp.std = 273.15, pres.std = 101325, 
+                         unit.temp = 'K', unit.pres = 'Pa')
>   vol$vol.std <- stdVol(vol$vol, temp = 293.15, pres = 101325)
Using a standard pressure of 101325 Pa and standard temperature of 273.15 K for standardizing volume.
>   head(vol)
   id           date.time days vol  vol.std
1 2_1 2014-06-07 06:00:00 1.98 393 357.7102
2 2_1 2014-06-08 06:00:00 2.98 260 236.6531
3 2_1 2014-06-09 06:00:00 3.98 245 223.0000
4 2_1 2014-06-10 06:00:00 4.98 225 204.7959
5 2_1 2014-06-11 06:00:00 5.98 200 182.0408
6 2_1 2014-06-12 07:00:00 7.02 175 159.2857
>   options(oldoptions)
> 
> 
> 
> cleanEx()
> nameEx("strawComp")
> ### * strawComp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strawComp
> ### Title: Methane Content of Biogas
> ### Aliases: strawComp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(strawComp)
> 
> 
> 
> cleanEx()
> nameEx("strawMass")
> ### * strawMass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strawMass
> ### Title: Mass Change of Batch Reactors
> ### Aliases: strawMass
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(strawMass)
> 
> 
> 
> cleanEx()
> nameEx("strawPressure")
> ### * strawPressure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strawPressure
> ### Title: Headspace Pressure in Batch Reactors
> ### Aliases: strawPressure
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(vol)
> 
> 
> 
> cleanEx()
> nameEx("strawSetup")
> ### * strawSetup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strawSetup
> ### Title: Setup Details for Batch Reactors
> ### Aliases: strawSetup
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(setup)
> 
> 
> 
> cleanEx()
> nameEx("summBg")
> ### * summBg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summBg
> ### Title: Summarise and Normalise Cumulative Methane Production
> ### Aliases: summBg
> ### Keywords: univar manip chron
> 
> ### ** Examples
> 
> data("vol")
> data("comp") 
> data("setup") 
> 
> # First need to calculate cumulative methane production data
> cum.prod <- cumBg(vol, comp = comp, temp = 20, pres = 1, 
+                   time.name = "days", extrap = TRUE)
Biogas composition is interpolated.
Working with volume data, applying volumetric method.
Using a standard pressure of 1 atm and standard temperature of 0 C for standardizing volume.
> 
> head(cum.prod)
   id           date.time days vol      xCH4 temperature pressure      vBg
1 2_1                <NA> 0.00  NA        NA          NA       NA   0.0000
2 2_1 2014-06-07 06:00:00 1.98 393 0.7104731          20        1 357.7102
3 2_1 2014-06-08 06:00:00 2.98 260 0.7104731          20        1 236.6531
4 2_1 2014-06-09 06:00:00 3.98 245 0.7104731          20        1 223.0000
5 2_1 2014-06-10 06:00:00 4.98 225 0.7104731          20        1 204.7959
6 2_1 2014-06-11 06:00:00 5.98 200 0.7104731          20        1 182.0408
      vCH4      cvBg    cvCH4     rvBg    rvCH4
1   0.0000    0.0000   0.0000       NA       NA
2 254.4650  357.7102 254.4650 180.6617 128.5177
3 168.3483  594.3633 422.8133 236.6531 168.3483
4 158.6359  817.3632 581.4492 223.0000 158.6359
5 145.6861 1022.1592 727.1353 204.7959 145.6861
6 129.4987 1204.2000 856.6340 182.0408 129.4987
> 
> # Cumulative methane production (default) at 30 d 
> # Uses default names for some columns
> summBg(vol = cum.prod, setup = setup, time.name = "days", when = 30)
Response variable (volume) is cum.prod$cvCH4.
Inoculum contribution not subtracted.
No normalization by substrate mass.
  descrip days     mean       sd n
1       A   30 1751.342 41.57468 3
2       B   30 2263.219 50.03045 3
3   cellu   30 4015.498 62.85895 3
4    inoc   30 1715.365 36.21640 3
> 
> # Or total cumulative biogas
> summBg(vol = cum.prod, setup = setup, time.name = "days", 
+        vol.name = "cvBg", when = 30)
Response variable (volume) is cum.prod$cvBg.
Inoculum contribution not subtracted.
No normalization by substrate mass.
  descrip days     mean        sd n
1       A   30 2524.709  46.56039 3
2       B   30 3371.789 111.64631 3
3   cellu   30 6732.648  69.71702 3
4    inoc   30 2470.238  65.22546 3
> 
> # Cumulative CH4 only, subtract inoculum contribution
> summBg(vol = cum.prod, setup = setup, time.name = "days", 
+        inoc.name = "inoc", inoc.m.name = "minoc", when = 30)
Response variable (volume) is cum.prod$cvCH4.
Inoculum contribution subtracted based on setup$minoc.
No normalization by substrate mass.
  descrip days      mean       sd n
1       A   30  605.0316 33.22040 3
2       B   30  665.2546 68.57729 3
3   cellu   30 2302.6447 68.65990 3
> 
> # And normalise by mvs.sub column (mass of substrate VS here) (so the result is BMP)
> summBg(vol = cum.prod, setup = setup, time.name = "days", 
+        inoc.name = "inoc", inoc.m.name = "minoc", when = 30, norm.name = "mvs.sub")
Response variable (volume) is cum.prod$cvCH4.
Inoculum contribution subtracted based on setup$minoc.
Response normalized by setup$mvs.sub.
  descrip days     mean        sd n
1       A   30 157.7967  8.528566 3
2       B   30 124.9984 13.111588 3
3   cellu   30 418.8466 13.484248 3
> 
> # Same example, but return results for three times
> summBg(vol = cum.prod, setup = setup, time.name = "days", 
+        inoc.name = "inoc", inoc.m.name = "minoc", when = c(10, 30, 60), 
+        norm.name = "mvs.sub")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpnEWeXU/R.INSTALLd7f461a86252/biogas/R/summBg.R#43: 
 --- if/while statement is in package --- 
biogas
 --- call (currently evaluated) --- 
summBg(vol = cum.prod, setup = setup, time.name = "days", inoc.name = "inoc", 
    inoc.m.name = "minoc", when = c(10, 30, 60), norm.name = "mvs.sub")
 --- R stacktrace ---
where 1: summBg(vol = cum.prod, setup = setup, time.name = "days", inoc.name = "inoc", 
    inoc.m.name = "minoc", when = c(10, 30, 60), norm.name = "mvs.sub")

 --- value of length: 3 type: logical ---
[1] FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(
  vol,
  setup,
  id.name = 'id',
  time.name = 'time',
  descrip.name = 'descrip',
  inoc.name = NULL,
  inoc.m.name = NULL,
  norm.name = NULL,
  norm.sd.name = NULL,
  vol.name = 'cvCH4',
  imethod = 'linear',
  extrap = FALSE,
  when = 30,
  show.obs = FALSE, 
  show.rates = FALSE, 
  show.more = FALSE,
  sort = TRUE,
  quiet = FALSE) 
{

  # Argument checks~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  checkArgClassValue(vol, 'data.frame')
  checkArgClassValue(setup, 'data.frame')
  checkArgClassValue(id.name, 'character')
  checkArgClassValue(time.name, c('character', 'NULL'))
  checkArgClassValue(descrip.name, c('character', 'NULL'))
  checkArgClassValue(inoc.name, c('character', 'NULL'))
  checkArgClassValue(norm.name, c('character', 'NULL'))
  checkArgClassValue(inoc.m.name, c('character', 'NULL'))
  checkArgClassValue(vol.name, 'character')
  # Skip imethod, since it is checked in interp()
  checkArgClassValue(extrap, 'logical')
  checkArgClassValue(when, c('numeric', 'integer', 'character', 'NULL'))
  checkArgClassValue(show.obs, 'logical')
  checkArgClassValue(sort, 'logical')
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # Check for pd when argument
  # First for backward compatability
  if(when == '1p') when <- '1p3d'
  if(when == '0.5p') when <- '0.5p3d'
  pdwhen <- gsub('[0-9.]', '', when) == 'pd'

  # Warning on show.rates
  if(!pdwhen & show.rates) {
      warning('You set \"show.rates = TRUE\", so \"when\" argument will be ignored.')
      pdwhen <- TRUE
      when <- '1p1d'
  }

  # Echo response variable
  if(!quiet) message('Response variable (volume) is ', deparse(substitute(vol)), '$', vol.name, '.')

  # Check for missing columns in vol
  if(class(when) %in% c('numeric', 'integer')) {
    if(any(missing.col <- !c(id.name, time.name, vol.name) %in% names(vol))){
      stop('Specified columns in vol data frame (', deparse(substitute(vol)), ') not found: ', c(id.name, time.name, vol.name)[missing.col], '.')
    } 
  } else { # when is 'end' or 'meas'
    if(any(missing.col <- !c(id.name, vol.name) %in% names(vol))){
      stop('Specified columns in vol data frame (', deparse(substitute(vol)), ') not found: ', c(id.name, vol.name)[missing.col], '.')
    } 
  }

  # Check for missing columns in setup
  if(any(missing.col <- !c(id.name, descrip.name) %in% names(setup))){
    stop('Specified columns in setup data frame (', deparse(substitute(setup)), ') not found: ', c(id.name, descrip.name)[missing.col], '.')
  } 

  # Check that inoc.name and norm.name can be found in setup data frame
  if(!is.null(inoc.name) && !inoc.name %in% setup[, descrip.name]) {
    stop('inoc.name ', deparse(substitute(inoc.name)), ' not found in ', deparse(substitute(setup)), '$', descrip.name, '.')
  }

  if(!is.null(norm.name) && !norm.name %in% names(setup)) {
    stop('norm.name ', deparse(substitute(norm.name)), ' not found in the column names of ', deparse(substitute(setup)), '.')
  }

  # And inoc.m.name
  if(!is.null(inoc.m.name) && !inoc.m.name %in% names(setup)) {
    stop('inoc.m.name ', deparse(substitute(inoc.m.name)), ' not found in the column names of ', deparse(substitute(setup)), '.')
  }

  # Problem if inoc.name is given but inoc.m.name is not
  if(!is.null(inoc.name) & is.null(inoc.m.name)) {
    stop('inoc.m.name must be provided in order to subtract inoculumn contribution.')
  }

  # Check for case when 'when' argument > all times
  if((is.numeric(when) | is.integer(when)) && all(when > vol[, time.name])) {
    stop('when argument (', when, ') is > all times in data.')

  }

  # Add other checks here

  # Trim setup based on ids and check again for inoc.name and norm.name~~~~~~~~~~~~~~~~~~~
  # Find reactor/bottle IDs present in both vol and setup
  ids <- intersect(setup[, id.name], vol[, id.name])

  setup <- setup[setup[, id.name] %in% ids, ]

  if(!is.null(inoc.name) && !inoc.name %in% setup[, descrip.name]) {
    stop('inoc.name ', deparse(substitute(inoc.name)), ' no longer in setup after trimming--are reactors present in setup missing in vol?')
  }

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # Remove inoc ids
  if(!is.null(inoc.name)) {
    ids <- setup[setup[, descrip.name]!=inoc.name, id.name]
    ids.inoc <- setup[setup[, descrip.name]==inoc.name, id.name]
  }

  # Check for duplicates in setup and vol~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  if(any(duplicated(setup[, id.name]))) {
    stop('Duplicated reactor IDs (', id.name, ' column) in setup dataframe! This must be an error.')
  }

  if(any(duplicated(vol[, c(id.name, time.name)]))) {
    stop('Duplicated ID (', id.name, ' column) x time (', time.name, ' column) in vol dataframe! This must be an error.')
  }
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # Drop missing values from vol with a warning
  if(any(is.na(vol[, vol.name]))) {
    warning('Missing volume data in vol dataframe will be dropped.')
    vol <- vol[!is.na(vol[, vol.name]), ]
  }

  # Interpolate cvCH4 to common time for each reactor~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Or select values for analysis (when = 'end' or 'meas')

  if(class(when) %in% c('numeric', 'integer')) {
    summ1 <- expand.grid(id = ids, time = when)
    names(summ1) <- c(id.name, time.name)

    # Then interpolate
    for(i in ids) {
      dc <- vol[vol[, id.name]==i, ]
      # Interpolate if more than one value is present

      if(nrow(dc)>1) {
        summ1[summ1[, id.name]==i, vol.name] <- interp(dc[, time.name], dc[, vol.name], time.out = when, method = imethod, extrap = extrap)
      } else {
	if(dc[, time.name]==when) { # `when` argument matches the single time present
          summ1[summ1[, id.name]==i, vol.name] <- dc[, vol.name]
	} else {
          summ1[summ1[, id.name]==i, vol.name] <- NA
      	  warning('There is only a single ', vol.name, ' value for reactor ', i,', and it does not match the specified when (', when, '). Interpolation is not possible.')
	}
      }

    }

  } else if(length(when) == 1 && tolower(when) == 'end') { # User just wants to use latest values of volume

    summ1 <- data.frame(id = ids, time = NA, vol = NA)
    names(summ1) <- c(id.name, time.name, vol.name)

    # Sort, in order to find latest values
    vol <- vol[order(vol[, id.name], vol[, vol.name]), ]

    for(i in ids) {
      dc <- vol[vol[, id.name]==i, ]
      # Select the last row from sorted data frame
      summ1[summ1[, id.name]==i, c(time.name, vol.name)] <- dc[nrow(dc), c(time.name, vol.name)]
    }

  #} else if(length(when) == 1 && when %in% c('meas', '1p', '0.5p')) { # Return values for all measurement times, which may differ among reactors
  } else if(length(when) == 1 && (when == 'meas' | pdwhen)) { 

    summ1 <- vol[vol[, id.name] %in% ids, c(id.name, time.name, vol.name)]

  } else  {

    stop('when argument not recognized. Options are numeric or integer vector, \"end\" or \"meas\".')

  
  }
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # Get all unique times
  times.summ <- unique(summ1[, time.name])

  # Work with inoculum data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Now interpolate inoculum-only reactors to all unique times
  if(!is.null(inoc.name)) {

    summ.inoc <- expand.grid(id = ids.inoc, time = times.summ)

    # Then interpolate inoculum production (each inoc reactor) to each time
    for(i in ids.inoc) {

      dc <- vol[vol[, id.name]==i, ]

      # Interpolate if more than one value is present
      if(nrow(dc)>1) {
        summ.inoc[summ.inoc$id==i, vol.name] <- interp(dc[, time.name], dc[, vol.name], time.out = times.summ, method = imethod, extrap = extrap)
      } else {

	if(dc[, time.name]==times.summ) { # `when` argument matches the single time present
          summ.inoc[summ.inoc$id==i, vol.name] <- dc[, vol.name]
	} else {
          summ.inoc[summ.inoc$id==i, vol.name] <- NA
      	  warning('There is only a single ', vol.name, ' value for reactor ', i,', and it does not match the specified when (', when, '). Interpolation is not possible.')
	}

      }

    }

    # Check for NAs in inoculum data (probably extrapolation issue)
    if(any(is.na(summ.inoc[, vol.name]))) {
      warning('Missing values in inoculum-only volumes. Did the inoculum-only incubation end before other bottles or before \'when\'? Dropping observation(s). Try extrap = TRUE to retain (but be aware of what this means).')
      summ.inoc <- summ.inoc[!is.na(summ.inoc[, vol.name]), ]
    }

    # See if latest times have been dropped/are not available
    if(max(summ.inoc$time) < max(summ1[, time.name])) {
      warning('Times for the inoculum-only bottles do not extend as far as times for other bottles. See NaNs in output. Select a shorter time to avoid NaNs.')
    }

    # Merge to add mass inoculum and VS in substrate
    # Merge only necessary columns!
    summ.inoc <- merge(setup[, c(id.name, inoc.m.name)], summ.inoc, by.x = id.name, by.y = 'id')

    # Volume contribution per unit inoculum mass
    summ.inoc$vol.mi <- summ.inoc[, vol.name]/summ.inoc[, inoc.m.name]

    # Mean and sd volume contribution per unit inoc mass
    inoc.vol <- data.frame()

    for(i in times.summ) {
      vol.mi <- summ.inoc[summ.inoc$time == i, 'vol.mi']
      # Calculate sd only if there is more than one observation
      if(length(vol.mi) > 1) {
        ss <- sd(vol.mi)
      } else {
        ss <- 0
        warning('Only one inoculum-only bottle is present, so reported sd does not include variation within inoculum-only bottles.')
      }
      inoc.vol <- rbind(inoc.vol, c(time = i, mn = mean(vol.mi), s = ss))
    }

    names(inoc.vol) <- c(time.name, 'vol.mi.mn', 'vol.mi.sd')
    inoc.vol$vol.mi.rsd <- 100*inoc.vol$vol.mi.sd/inoc.vol$vol.mi.mn
    # inoc.vol has mean and sd vol per unit mass inoc for all times

  }
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # Samples
  # Add mass of inoculum and VS in substrate
  summ1 <- merge(setup, summ1, by = id.name)

  if(!is.null(inoc.name)) {

    # Merge inoculum normalized volumes with sample data
    summ1 <- merge(summ1, inoc.vol, by = time.name)

    # Calculate and substract inoc contribution
    # Next three lines only for returning additional info when show.rates = TRUE
    summ1[, paste0(vol.name, '.tot')] <- summ1[, vol.name]
    summ1[, paste0(vol.name, '.inoc')] <- summ1$vol.mi.mn*summ1[, inoc.m.name]
    summ1[, 'fv.inoc'] <- summ1[, paste0(vol.name, '.inoc')]/summ1[, paste0(vol.name, '.tot')]

    # Correct vol for inoculum
    summ1[, vol.name] <- summ1[, vol.name] - summ1$vol.mi.mn*summ1[, inoc.m.name]

    # Add sd in volume produced by inoculum for use below in error propagation
    summ1[, 'sd.inoc'] <- summ1$vol.mi.sd*summ1[, inoc.m.name]

  } else {

    # NTS: How did I handle this before 10 Feb 2016?
    summ1[, 'sd.inoc'] <- 0

  }

  # If selected, find times where rate drops below 1%/d of cumulative
  if(length(when) == 1 && pdwhen) { 

    # Get cutoff 
    cutoff <- as.numeric(gsub('p.+$', '', when))/100
##    if(when == '1p') {
##      cutoff <- 0.01 
##    } else {
##      cutoff <- 0.005
##    }

    # Find time when rvCH4 <= 1% of cvCH4
    s1times <- NULL
    summ1$rrvCH4 <- NA

    # Calculate relative rates
    for(i in ids) {
      dd <- summ1[summ1[, id.name] == i, ]
      dd <- dd[order(dd[, time.name]), ]
      rr <- c(NA, diff(dd[, vol.name])/diff(dd[, time.name]))/dd[, vol.name]
      # Add rates to summ1 only for exporting with show.rates = TRUE
      summ1[summ1[, id.name] == i, 'rrvCH4'] <- signif(100*rr, 4)
    }

    # Return observations here (early to avoid problem in next 2 blocks--see error messages)
    if(show.rates) {
      summ1 <- summ1[order(summ1[, id.name], summ1[, time.name]), ]
      return(summ1)
    }

    # Back to working with rates (after show.rates option above)
    for(i in ids) {
      dd <- summ1[summ1[, id.name] == i, ]

      rr <- dd$rrvCH4/100
      tt <- dd[, time.name]

      # Find rates < 1%
      i1 <- which(rr <= cutoff)

      # That are consecutive
      # If i1 is length 1, this is integer(0)
      i1d <- diff(i1)

      # That are uninterupted by a high rate
      if(length(i1d) > 0 & any(i1d > 1)) {
        i2 <- max(which(i1d > 1)) + 1 
      } else {
        i2 <- 1
      }

      # Take first following time at least dur (usually 3 d) after obs preceeding first obs below 1% (this is correct!--think about production for first obs starting just after preceeding obs, so 3 d count should start then
      # But, limitation of this approach is that a single observation < 1% can end trial (as long as it is at least 3 d after previous)
      # Users should avoid case when returned 1p time = final time in trial
      dur <- as.numeric(gsub('^.+p(.+)d', '\\1', when))
      i3 <- i1[i2]
      i3 <- which(tt - tt[i3 - 1] >= dur)[1]

      if(!is.na(i3)) {
        ss <- dd[i3, ]
        s1times <- rbind(s1times, ss)
      } else {
        stop('You selected ', when, ' option for \"when\" argument but there are no observations that meet the criterion for id ', i, ' (and possibly others). Either use a fixed time for \"when\" or remove this id. Leave when = ', when, ' and set show.rates = TRUE to check rates for all bottles.')
        ##ss <- dd[nrow(dd), ]
        ##s1times <- rbind(s1times, ss)
      }

    }

    # Check for different times for bottles with same descrip
    summ1temp <- data.frame()

    for(i in unique(s1times[, descrip.name])) {
      tt <- max(s1times[s1times[, descrip.name] == i, time.name])

      for(j in unique(summ1[summ1[, descrip.name] == i, id.name])) {
        # Select times >= max time for this decrip.name level
        ss <- summ1[summ1[, id.name] == j & summ1[, time.name] >= tt, ]
        if(length(ss) == 0) stop('when = "xpyd" problem. Re-run function with show.rates = TRUE')
        ss <- ss[1, ]
        summ1temp <- rbind(summ1temp, ss)
      }

    }

    summ1 <- summ1temp

  } 

  # Normalization
  if(!is.null(norm.name)) { 

    # First calculate sd on normalized volume based on sd of VS
    if(!is.null(norm.sd.name)) {
      summ1[, paste0(vol.name,'.sd')] <- summ1[, vol.name]/summ1[, norm.name] * summ1[, norm.sd.name]/summ1[, norm.name]
    # Original approach nearly equivalent to calculate relative error in norm.name and apply it directly (i.e., 10% for norm.name = 10% for vol.name)
      #summ1[, paste0(vol.name,'.sd')] <- (summ1[, vol.name]/(summ1[, norm.name] - summ1[, norm.sd.name]) - 
      #                                    summ1[, vol.name]/(summ1[, norm.name] + summ1[, norm.sd.name]))/2
    } else {
      summ1[, paste0(vol.name,'.sd')] <- 0
    }

    # Normalize remaining vol by norm.name (typically by substrate VS)
    summ1[, vol.name] <- summ1[, vol.name]/summ1[, norm.name]

    # Normalize sd contribution from inoc by the same value
    summ1[, 'sd.inoc'] <- summ1[, 'sd.inoc']/summ1[, norm.name]

    # Next two lines only for returning additional info when show.obs = TRUE
    # Only have the .tot and .inoc columns when inoc is subtracted out
    if(!is.null(inoc.name) && inoc.name %in% setup[, descrip.name]) { 
      summ1[, paste0(vol.name, '.tot')] <- summ1[, paste0(vol.name, '.tot')]/summ1[, norm.name]
      summ1[, paste0(vol.name, '.inoc')] <- summ1[, paste0(vol.name, '.inoc')]/summ1[, norm.name]
    }
  } else {
      summ1[, paste0(vol.name,'.sd')] <- 0
  }

  # Calculate means and sd for a summary
  if(!show.obs) {
    # Summarize by description
    summ2 <- unique(summ1[, c(time.name, descrip.name)]) # NTS: may want to put time second

    for(i in unique(summ1[, descrip.name])){
      dd <- summ1[summ1[, descrip.name]==i, ]
      for(j in unique(dd[, time.name])) {
        ddd <- dd[dd[, time.name]==j, ]
        summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'mean'] <- mean(na.omit(ddd[, vol.name]))
        summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'sd'] <- sqrt(sd(na.omit(ddd[, vol.name]))^2 + 
                                                                              mean(ddd[, 'sd.inoc'])^2 + 
                                                                              mean(ddd[, paste0(vol.name,'.sd')])^2) 
        summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'n'] <- sum(!is.na(ddd[, vol.name]))  
	if(!is.null(inoc.name)) {
          summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'rsd.inoc'] <- ddd[1, 'vol.mi.rsd']
          summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'fv.inoc'] <- mean(na.omit(ddd[, 'fv.inoc']))
          summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'sd1'] <- sd(na.omit(ddd[, vol.name]))
          summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'sd2'] <- mean(ddd[, 'sd.inoc'])
          summ2[summ2[, descrip.name]==i & summ2[, time.name]==j, 'sd3'] <- mean(ddd[, paste0(vol.name,'.sd')])
	}
      }
    }
  } else { # If show.obs = TRUE, just return individual observations
    #summ1$sd.inoc <- NULL
    summ2 <- summ1[order(summ1[, descrip.name], summ1[, id.name], summ1[, time.name]), ]
  }


  # More messages~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # Messages about inoculum 
  if(!is.null(inoc.name) && inoc.name %in% setup[, descrip.name]) { # Inoculum contribution subtracted
    #message('Inoculum contribution subtracted based on ', deparse(substitute(setup.orig)), '$', inoc.m.name, '.') 
    if(!quiet) message('Inoculum contribution subtracted based on setup$', inoc.m.name, '.') 
  } else {
      if(!quiet) message('Inoculum contribution not subtracted.') 
  }

  # Message about normalization
  if(!is.null(norm.name)) { 
    #message('Response normalized by ', deparse(substitute(setup)), '$', norm.name, '.')
    if(!quiet) message('Response normalized by setup$', norm.name, '.')
  } else {
    if(!quiet) message('No normalization by substrate mass.')
  }

  # Select columns
  if(!show.obs) {
    if(show.more) {
      summ2 <- summ2[ , c(descrip.name, time.name, 'mean', 'sd', 'n', 'rsd.inoc', 'fv.inoc', 'sd1', 'sd2', 'sd3')]
    } else {
      summ2 <- summ2[ , c(descrip.name, time.name, 'mean', 'sd', 'n')]
    }
  } 

  # Sort result
  if(sort) {
    if(show.obs) {
      summ2 <- summ2[order(summ2[, descrip.name], summ2[, id.name], summ2[, time.name]), ]
    } else {
      summ2 <- summ2[order(summ2[, descrip.name], summ2[, time.name]), ]
    }
  } else {
    # Get original reactor order from setup
    descrip.order <- 1:length(unique(setup[, descrip.name]))
    names(descrip.order) <- setup[!duplicated(setup[, descrip.name]), descrip.name]

    # Sort
    summ2 <- summ2[order(descrip.order[as.character(summ2[, descrip.name])], summ2[, time.name]), ]
  }

  # Row names
  rownames(summ2) <- 1:nrow(summ2)

  return(summ2)

}
<bytecode: 0x7c3ce78>
<environment: namespace:biogas>
 --- function (body) search ---
Function summBg in namespace biogas has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
