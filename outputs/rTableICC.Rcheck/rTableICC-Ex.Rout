
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rTableICC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rTableICC')
Loading required package: partitions
Loading required package: aster
Loading required package: trust
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("rDiscrete")
> ### * rDiscrete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rDiscrete
> ### Title: Generate a Random Data from Discrete Probability Function
> ### Aliases: rDiscrete
> ### Keywords: datagen discrete distribution
> 
> ### ** Examples
> 
> p = c(0.23,0.11,0.05,0.03,0.31,0.03,0.22,0.02)
> rDiscrete(n=2,pf=p)
$rDiscrete
[1] 2 3

$cdf
[1] 0.00 0.23 0.34 0.39 0.42 0.73 0.76 0.98 1.00

> 
> # pf would be entered as a matrix:
> 
> p = matrix(c(0.23,0.11,0.05,0.03,0.31,0.03,0.22,0.02), nrow=2, ncol=4, byrow = TRUE) 
> rDiscrete(n=2,pf=p)
$rDiscrete
[1] 3 6

$cdf
[1] 0.00 0.23 0.54 0.65 0.68 0.73 0.95 0.98 1.00

> 
> p = matrix(c(0.23,0.11,0.05,0.03,0.31,0.03,0.22,0.02), nrow=4, ncol=2, byrow = TRUE) 
> rDiscrete(n=2,pf=p)
$rDiscrete
[1] 1 5

$cdf
[1] 0.00 0.23 0.28 0.59 0.81 0.92 0.95 0.98 1.00

> 
> # or pf would be entered as a three dimensional array:
> 
> p = array(c(0.23,0.11,0.05,0.03,0.31,0.03,0.22,0.02), dim=c(2,2,2))
> rDiscrete(n=2,pf=p)
$rDiscrete
[1] 7 5

$cdf
[1] 0.00 0.23 0.34 0.39 0.42 0.73 0.76 0.98 1.00

> 
> 
> 
> cleanEx()
> nameEx("rTable.2x2xK")
> ### * rTable.2x2xK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rTable.2x2xK
> ### Title: Randomly Generate 2x2xK Contingency Tables
> ### Aliases: rTable.2x2xK
> ### Keywords: datagen contingency Poisson multinomial product
> 
> ### ** Examples
> 
> # --- Generate a 2x2x8 contingency table under multinomial sampling plan ---
> num.centers=8                                   # Number of centers
> sampl="Multinomial"                             # Generate table under multinomial 
>                                                 #  sampling plan
> cell.prob=array(0.03125,dim=c(2,2,num.centers)) # Enter cell probabilities in 2x2xK format 
> num.obs=124                                     # Number of observations
> 
> x=rTable.2x2xK(p=cell.prob,sampling=sampl,N=num.obs)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp09XSZM/R.INSTALL980a50bd2c70/rTableICC/R/check.R#38: 
 --- if/while statement is in package --- 
rTableICC
 --- call (currently evaluated) --- 
check(p, theta = NULL, M = NULL, N, K, row.margins = NULL, col.margins = NULL, 
    lambda, sampling, ICC = FALSE, structure = "2x2xK")
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/Rtmp09XSZM/R.INSTALL980a50bd2c70/rTableICC/R/rTable.2x2xK.default.R#6: check(p, theta = NULL, M = NULL, N, K, row.margins = NULL, col.margins = NULL, 
    lambda, sampling, ICC = FALSE, structure = "2x2xK")
where 2 at /var/scratch2/tomas/tmp/Rtmp09XSZM/R.INSTALL980a50bd2c70/rTableICC/R/rTable.2x2xK.R#2: rTable.2x2xK.default(p = cell.prob, sampling = sampl, N = num.obs)
where 3: rTable.2x2xK(p = cell.prob, sampling = sampl, N = num.obs)

 --- value of length: 32 type: logical ---
, , 1

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 2

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 3

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 4

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 5

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 6

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 7

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

, , 8

      [,1]  [,2]
[1,] FALSE FALSE
[2,] FALSE FALSE

 --- function (currently evaluated)--- 
function(p, theta, M, N=NULL, K=NULL, row.margins=NULL, col.margins=NULL, lambda=NULL, sampling, 
                           ICC=TRUE, structure="2x2xK"){

  if ((sampling!="Multinomial") & (sampling!="Product") & (sampling!="Poisson")) {
    stop("The parameter 'sampling' can take 'Product' for product multinomial sampling, 'Multinomial' for multinomial sampling, and 'Poisson' for Possion sampling schemes!")
  }
  
  if (sampling=="Poisson"){
    if ((is.finite(lambda)==FALSE) & (min(lambda)<0)){
      stop("Mean number of individuals must be either a positive scalar or a positive vector under Poisson samlping plan!")     
    }
  }

  if (ICC==TRUE){
    if ((is.na(theta)==TRUE) | (is.finite(theta)==FALSE) | (min(theta)<0)) {
      stop("Pre-determined intraclass correlations must be entered as a positive value!")
    }
    if (structure=="2x2xK"){
      if ((is.na(p)==TRUE) | (is.finite(p)==FALSE) | (length(dim(p))!=2) |  (ncol(p)!=4) | (min(p)<=0) | (max(p)>=1) | (sum(p)!=1)){
        stop("Parameter p must be entered as a Kx4 finite matrix with elements within the interval [0,1] and sum up to 1!")
      }
      if ((is.na(M)==TRUE) | (is.finite(M)==FALSE) | (min(M)<0)) {
        stop("Number of clusters under each center (M>0) must be entered!")
      }       
    }else if (structure=="RxC"){
      if ((length(M)!=1) | (is.finite(M)==FALSE) | (min(M)<=0)){
        stop("Total number of clusters (M>0) must be a scalar value for RxC tables!")
      }       
    }    
    
  }else if (ICC==FALSE){
    if (structure=="2x2xK"){
      if (sampling=="Multinomial"){ 
        if ((length(N)!=1) | (is.finite(N)==FALSE)){ 
          stop("Total number of observation should be entered as a scalar under multinomial samlping plan.")      
        }
        if (((is.na(p)==TRUE) | (is.finite(p)==FALSE) | (length(dim(p))!=3) | (dim(p)[1]!=2) | (dim(p)[2]!=2) | (min(p)<=0) | (max(p)>=1))){
          stop("Parameter p must be entered as a 2x2xK finite matrix with elements within the interval [0,1]!")
        }
      } 
      if (sampling=="Poisson"){
        if (length(dim(lambda))==3){
          if ((is.na(lambda)==TRUE) | (is.finite(lambda)==FALSE) |  (dim(lambda)[1]!=2) | (dim(lambda)[2]!=2) | (min(lambda)<=0)){
            stop("Parameter lambda must be entered as a 2x2xK finite matrix!")
          }
        }else if (is.null(dim(lambda))==TRUE){
          if ((is.na(lambda)==TRUE) | (is.finite(lambda)==FALSE) | (is.null(K)==TRUE)| (min(lambda)<=0)){
            stop("The scalar entered as the value of parameter lambda must be a finite scalar and number of centers K must be entered!")
          }
        } else {          
          stop("Parameter lambda must be either a 2x2xK finite matrix or a scalar!")
        }      
      }
      if (sampling=="Product"){
        if ((is.na(N)==TRUE) | (is.finite(N)==FALSE) | (min(N)<0)) {
          stop("Center margins must be entered as scalar positive values!")
        } else if (length(N)<1){
          stop("At least one center must be entered!")
        } 
        if (((is.na(p)==TRUE) | (is.finite(p)==FALSE) | (length(dim(p))!=3) | (dim(p)[1]!=2) | (dim(p)[2]!=2) | (min(p)<=0) | (max(p)>=1))){
          stop("Parameter p must be entered as a 2x2xK finite matrix with elements within the interval [0,1]!")
        }
      }
    } else if (structure=="RxC"){
      if (sampling=="Multinomial"){ 
        if ((length(N)!=1) | (is.finite(N)==FALSE)){ 
          stop("Total number of observation should be entered as a scalar under multinomial samlping plan.")      
        }
        if ((is.na(p)==TRUE) | (is.finite(p)==FALSE) | (length(dim(p))!=2) | (min(p)<=0) | (max(p)>=1)){
          stop("Parameter p must be entered as an RxC finite matrix with elements within the interval [0,1]!")
        }      
        if (min(dim(p))<=1){
          stop("Minimum colum or row length of p must be greater than 1!")
        }
      }
      if (sampling=="Product"){
        if ((is.null(row.margins)==FALSE) & (is.null(col.margins)==FALSE)){
          stop("Row or columun margins must be a scalar vector under product multinomial sampling plan!")
        } else if ((length(row.margins)>1) & (length(col.margins)>1)){
          stop("Number of either row.margins or columun margins must be greater than one. Both cannot be greater than one!")
        } else if ((length(row.margins)<2) & (length(col.margins)<2)){
          stop("At least number of fixed row or columun margins must be greater than one under product multinomial sampling!")
        }
        if ((is.na(p)==TRUE) | (is.finite(p)==FALSE) | (length(dim(p))!=2) | (min(p)<=0) | (max(p)>=1)){
          stop("Parameter p must be entered as an RxC finite matrix with elements within the interval [0,1]!")
        }  
      }
      if (sampling=="Poisson"){
        if ((is.na(lambda)==TRUE) | (is.finite(lambda)==FALSE) | (length(dim(lambda))!=2) | (min(lambda)<=0)){
          stop("Parameter lambda must be entered as an RxC finite matrix!")
        }  
      }      
    }
  }
}
<environment: namespace:rTableICC>
 --- function (body) search ---
Function check in namespace rTableICC has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
