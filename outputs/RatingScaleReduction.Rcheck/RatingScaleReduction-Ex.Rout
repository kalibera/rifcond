
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RatingScaleReduction"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RatingScaleReduction')
Loading required package: pROC
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

Loading required package: ggplot2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CheckAttr4Inclusion")
> ### * CheckAttr4Inclusion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CheckAttr4Inclusion
> ### Title: Check the next attribute for possible inclusion into AUC
> ### Aliases: CheckAttr4Inclusion
> 
> ### ** Examples
> 
> #creating the matrix of attributes and the decision vector
> #must be as.numeric()
> data(aSAH)
> attach(aSAH)
> is.numeric(aSAH)
[1] FALSE
> 
> attribute <-data.frame(as.numeric(gender), 
+ as.numeric(age), as.numeric(wfns), as.numeric(s100b), as.numeric(ndka))
> colnames(attribute) <-c("a1", "a2", "a3", "a4", "a5")
> decision <-as.numeric(outcome)
> 
> #deLong test, two-side alternative hiphotesis
> CheckAttr4Inclusion(attribute, decision, method=c("delong"), 
+ alternative=c("two.side"))

	DeLong's test for two correlated ROC curves

data:  rsr.auc and item.next
Z = 2.8808, p-value = 0.003967
alternative hypothesis: true difference in AUC is not equal to 0
sample estimates:
AUC of roc1 AUC of roc2 
  0.8241870   0.6531165 

> 
> #bootstrap, two-side alternative hiphotesis
> #CheckAttr4Inclusion(attribute, decision, method=c("bootstrap"), boot.n=500)
> #
> 
> 
> cleanEx()

detaching ‘aSAH’

> nameEx("diffExamples")
> ### * diffExamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diffExamples
> ### Title: The number of different (unique) examples in a dataset
> ### Aliases: diffExamples
> 
> ### ** Examples
> 
> #creating the matrix of attributes and the decision vector
> #must be as.numeric()
> data(aSAH)
> attach(aSAH)
> is.numeric(aSAH)
[1] FALSE
> 
> attribute <-data.frame(as.numeric(gender), 
+ as.numeric(age), as.numeric(wfns), as.numeric(s100b), as.numeric(ndka))
> colnames(attribute) <-c("a1", "a2", "a3", "a4", "a5")
> 
> #show the number of different examples
> diffExamples(attribute)
$total.examples
[1] 113

$diff.examples
[1] 113

$dup.examples
[1] 0

> 
> 
> 
> cleanEx()

detaching ‘aSAH’

> nameEx("grayExamples")
> ### * grayExamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grayExamples
> ### Title: Examples belonging to both classes
> ### Aliases: grayExamples
> 
> ### ** Examples
> 
> #generate data
> 
> a=c(); attribute=c()
> for (i in 1:3){
+ a <-sample(c(1,2,3), 100, replace=TRUE)
+ attribute <-cbind(attribute, a)
+ attribute=data.frame(attribute)
+ }
> colnames(attribute)=c("a1", "a2", "a3")
> names(attribute)
[1] "a1" "a2" "a3"
> 
> decision=sample(c(0,1), 100, replace=TRUE)
> 
> #check examples
> grayExamples(attribute, decision)
  D a1 a2 a3
1 1  1  2  1
5 0  1  2  1
   D a1 a2 a3
1  1  1  2  1
22 0  1  2  1
   D a1 a2 a3
1  1  1  2  1
27 1  1  2  1
   D a1 a2 a3
1  1  1  2  1
57 1  1  2  1
   D a1 a2 a3
1  1  1  2  1
66 1  1  2  1
   D a1 a2 a3
1  1  1  2  1
90 1  1  2  1
   D a1 a2 a3
1  1  1  2  1
92 0  1  2  1
  D a1 a2 a3
2 0  2  2  1
8 1  2  2  1
   D a1 a2 a3
2  0  2  2  1
23 0  2  2  1
   D a1 a2 a3
2  0  2  2  1
63 1  2  2  1
   D a1 a2 a3
2  0  2  2  1
71 0  2  2  1
   D a1 a2 a3
2  0  2  2  1
74 0  2  2  1
   D a1 a2 a3
2  0  2  2  1
75 0  2  2  1
   D a1 a2 a3
3  0  2  1  2
33 0  2  1  2
   D a1 a2 a3
3  0  2  1  2
53 1  2  1  2
   D a1 a2 a3
3  0  2  1  2
58 0  2  1  2
   D a1 a2 a3
3  0  2  1  2
59 1  2  1  2
   D a1 a2 a3
4  0  3  3  1
21 1  3  3  1
   D a1 a2 a3
4  0  3  3  1
41 1  3  3  1
   D a1 a2 a3
4  0  3  3  1
72 1  3  3  1
   D a1 a2 a3
4  0  3  3  1
76 0  3  3  1
   D a1 a2 a3
4  0  3  3  1
85 0  3  3  1
   D a1 a2 a3
4  0  3  3  1
87 1  3  3  1
   D a1 a2 a3
4  0  3  3  1
94 1  3  3  1
   D a1 a2 a3
5  0  1  2  1
22 0  1  2  1
   D a1 a2 a3
5  0  1  2  1
27 1  1  2  1
   D a1 a2 a3
5  0  1  2  1
57 1  1  2  1
   D a1 a2 a3
5  0  1  2  1
66 1  1  2  1
   D a1 a2 a3
5  0  1  2  1
90 1  1  2  1
   D a1 a2 a3
5  0  1  2  1
92 0  1  2  1
  D a1 a2 a3
6 1  3  1  2
7 0  3  1  2
   D a1 a2 a3
6  1  3  1  2
29 0  3  1  2
   D a1 a2 a3
6  1  3  1  2
49 0  3  1  2
   D a1 a2 a3
6  1  3  1  2
61 0  3  1  2
   D a1 a2 a3
6  1  3  1  2
82 1  3  1  2
   D a1 a2 a3
6  1  3  1  2
95 0  3  1  2
   D a1 a2 a3
7  0  3  1  2
29 0  3  1  2
   D a1 a2 a3
7  0  3  1  2
49 0  3  1  2
   D a1 a2 a3
7  0  3  1  2
61 0  3  1  2
   D a1 a2 a3
7  0  3  1  2
82 1  3  1  2
   D a1 a2 a3
7  0  3  1  2
95 0  3  1  2
   D a1 a2 a3
8  1  2  2  1
23 0  2  2  1
   D a1 a2 a3
8  1  2  2  1
63 1  2  2  1
   D a1 a2 a3
8  1  2  2  1
71 0  2  2  1
   D a1 a2 a3
8  1  2  2  1
74 0  2  2  1
   D a1 a2 a3
8  1  2  2  1
75 0  2  2  1
   D a1 a2 a3
9  0  2  3  1
48 0  2  3  1
   D a1 a2 a3
9  0  2  3  1
78 1  2  3  1
   D a1 a2 a3
9  0  2  3  1
98 0  2  3  1
   D a1 a2 a3
11 0  1  3  3
25 1  1  3  3
   D a1 a2 a3
11 0  1  3  3
64 0  1  3  3
   D a1 a2 a3
12 0  1  3  1
62 0  1  3  1
   D a1 a2 a3
12 0  1  3  1
88 1  1  3  1
   D a1 a2 a3
12 0  1  3  1
89 0  1  3  1
   D a1 a2 a3
12 0  1  3  1
91 0  1  3  1
   D a1 a2 a3
13 1  3  2  3
36 0  3  2  3
   D a1 a2 a3
13 1  3  2  3
37 0  3  2  3
   D a1 a2 a3
13 1  3  2  3
52 0  3  2  3
   D a1 a2 a3
13 1  3  2  3
68 1  3  2  3
   D a1 a2 a3
13 1  3  2  3
96 0  3  2  3
   D a1 a2 a3
14 1  2  2  3
19 1  2  2  3
   D a1 a2 a3
14 1  2  2  3
30 1  2  2  3
   D a1 a2 a3
14 1  2  2  3
51 0  2  2  3
   D a1 a2 a3
15 0  3  1  3
18 0  3  1  3
   D a1 a2 a3
15 0  3  1  3
43 1  3  1  3
   D a1 a2 a3
16 0  2  1  1
28 1  2  1  1
   D a1 a2 a3
16 0  2  1  1
32 0  2  1  1
   D a1 a2 a3
16 0  2  1  1
44 0  2  1  1
   D a1 a2 a3
16 0  2  1  1
67 0  2  1  1
   D a1 a2 a3
16 0  2  1  1
81 0  2  1  1
   D a1 a2 a3
16 0  2  1  1
97 1  2  1  1
   D a1 a2 a3
17 0  3  3  2
35 0  3  3  2
   D a1 a2 a3
17 0  3  3  2
39 1  3  3  2
   D a1 a2 a3
18 0  3  1  3
43 1  3  1  3
   D a1 a2 a3
19 1  2  2  3
30 1  2  2  3
   D a1 a2 a3
19 1  2  2  3
51 0  2  2  3
   D a1 a2 a3
20 1  3  2  2
79 0  3  2  2
   D a1 a2 a3
21 1  3  3  1
41 1  3  3  1
   D a1 a2 a3
21 1  3  3  1
72 1  3  3  1
   D a1 a2 a3
21 1  3  3  1
76 0  3  3  1
   D a1 a2 a3
21 1  3  3  1
85 0  3  3  1
   D a1 a2 a3
21 1  3  3  1
87 1  3  3  1
   D a1 a2 a3
21 1  3  3  1
94 1  3  3  1
   D a1 a2 a3
22 0  1  2  1
27 1  1  2  1
   D a1 a2 a3
22 0  1  2  1
57 1  1  2  1
   D a1 a2 a3
22 0  1  2  1
66 1  1  2  1
   D a1 a2 a3
22 0  1  2  1
90 1  1  2  1
   D a1 a2 a3
22 0  1  2  1
92 0  1  2  1
   D a1 a2 a3
23 0  2  2  1
63 1  2  2  1
   D a1 a2 a3
23 0  2  2  1
71 0  2  2  1
   D a1 a2 a3
23 0  2  2  1
74 0  2  2  1
   D a1 a2 a3
23 0  2  2  1
75 0  2  2  1
   D a1 a2 a3
24 1  1  1  2
47 0  1  1  2
   D a1 a2 a3
25 1  1  3  3
64 0  1  3  3
   D a1 a2 a3
26 1  2  2  2
31 1  2  2  2
   D a1 a2 a3
26 1  2  2  2
40 1  2  2  2
   D a1 a2 a3
26 1  2  2  2
42 0  2  2  2
   D a1 a2 a3
27 1  1  2  1
57 1  1  2  1
   D a1 a2 a3
27 1  1  2  1
66 1  1  2  1
   D a1 a2 a3
27 1  1  2  1
90 1  1  2  1
   D a1 a2 a3
27 1  1  2  1
92 0  1  2  1
   D a1 a2 a3
28 1  2  1  1
32 0  2  1  1
   D a1 a2 a3
28 1  2  1  1
44 0  2  1  1
   D a1 a2 a3
28 1  2  1  1
67 0  2  1  1
   D a1 a2 a3
28 1  2  1  1
81 0  2  1  1
   D a1 a2 a3
28 1  2  1  1
97 1  2  1  1
   D a1 a2 a3
29 0  3  1  2
49 0  3  1  2
   D a1 a2 a3
29 0  3  1  2
61 0  3  1  2
   D a1 a2 a3
29 0  3  1  2
82 1  3  1  2
   D a1 a2 a3
29 0  3  1  2
95 0  3  1  2
   D a1 a2 a3
30 1  2  2  3
51 0  2  2  3
   D a1 a2 a3
31 1  2  2  2
40 1  2  2  2
   D a1 a2 a3
31 1  2  2  2
42 0  2  2  2
   D a1 a2 a3
32 0  2  1  1
44 0  2  1  1
   D a1 a2 a3
32 0  2  1  1
67 0  2  1  1
   D a1 a2 a3
32 0  2  1  1
81 0  2  1  1
   D a1 a2 a3
32 0  2  1  1
97 1  2  1  1
   D a1 a2 a3
33 0  2  1  2
53 1  2  1  2
   D a1 a2 a3
33 0  2  1  2
58 0  2  1  2
   D a1 a2 a3
33 0  2  1  2
59 1  2  1  2
   D a1 a2 a3
34 1  1  2  2
38 0  1  2  2
   D a1 a2 a3
34 1  1  2  2
54 0  1  2  2
   D a1 a2 a3
34 1  1  2  2
55 1  1  2  2
   D a1 a2 a3
34 1  1  2  2
84 1  1  2  2
   D a1 a2 a3
35 0  3  3  2
39 1  3  3  2
   D a1 a2 a3
36 0  3  2  3
37 0  3  2  3
   D a1 a2 a3
36 0  3  2  3
52 0  3  2  3
   D a1 a2 a3
36 0  3  2  3
68 1  3  2  3
   D a1 a2 a3
36 0  3  2  3
96 0  3  2  3
   D a1 a2 a3
37 0  3  2  3
52 0  3  2  3
   D a1 a2 a3
37 0  3  2  3
68 1  3  2  3
   D a1 a2 a3
37 0  3  2  3
96 0  3  2  3
   D a1 a2 a3
38 0  1  2  2
54 0  1  2  2
   D a1 a2 a3
38 0  1  2  2
55 1  1  2  2
   D a1 a2 a3
38 0  1  2  2
84 1  1  2  2
   D a1 a2 a3
40 1  2  2  2
42 0  2  2  2
   D a1 a2 a3
41 1  3  3  1
72 1  3  3  1
   D a1 a2 a3
41 1  3  3  1
76 0  3  3  1
   D a1 a2 a3
41 1  3  3  1
85 0  3  3  1
   D a1 a2 a3
41 1  3  3  1
87 1  3  3  1
   D a1 a2 a3
41 1  3  3  1
94 1  3  3  1
   D a1 a2 a3
44 0  2  1  1
67 0  2  1  1
   D a1 a2 a3
44 0  2  1  1
81 0  2  1  1
   D a1 a2 a3
44 0  2  1  1
97 1  2  1  1
   D a1 a2 a3
45 1  2  3  2
73 1  2  3  2
   D a1 a2 a3
46 0  3  2  1
70 0  3  2  1
   D a1 a2 a3
46 0  3  2  1
77 0  3  2  1
   D a1 a2 a3
48 0  2  3  1
78 1  2  3  1
   D a1 a2 a3
48 0  2  3  1
98 0  2  3  1
   D a1 a2 a3
49 0  3  1  2
61 0  3  1  2
   D a1 a2 a3
49 0  3  1  2
82 1  3  1  2
   D a1 a2 a3
49 0  3  1  2
95 0  3  1  2
   D a1 a2 a3
50 1  3  3  3
80 0  3  3  3
   D a1 a2 a3
52 0  3  2  3
68 1  3  2  3
   D a1 a2 a3
52 0  3  2  3
96 0  3  2  3
   D a1 a2 a3
53 1  2  1  2
58 0  2  1  2
   D a1 a2 a3
53 1  2  1  2
59 1  2  1  2
   D a1 a2 a3
54 0  1  2  2
55 1  1  2  2
   D a1 a2 a3
54 0  1  2  2
84 1  1  2  2
   D a1 a2 a3
55 1  1  2  2
84 1  1  2  2
   D a1 a2 a3
56 0  1  1  1
86 0  1  1  1
   D a1 a2 a3
57 1  1  2  1
66 1  1  2  1
   D a1 a2 a3
57 1  1  2  1
90 1  1  2  1
   D a1 a2 a3
57 1  1  2  1
92 0  1  2  1
   D a1 a2 a3
58 0  2  1  2
59 1  2  1  2
   D a1 a2 a3
60 0  2  1  3
93 1  2  1  3
   D a1 a2 a3
61 0  3  1  2
82 1  3  1  2
   D a1 a2 a3
61 0  3  1  2
95 0  3  1  2
   D a1 a2 a3
62 0  1  3  1
88 1  1  3  1
   D a1 a2 a3
62 0  1  3  1
89 0  1  3  1
   D a1 a2 a3
62 0  1  3  1
91 0  1  3  1
   D a1 a2 a3
63 1  2  2  1
71 0  2  2  1
   D a1 a2 a3
63 1  2  2  1
74 0  2  2  1
   D a1 a2 a3
63 1  2  2  1
75 0  2  2  1
   D a1 a2 a3
65 1  2  3  3
83 1  2  3  3
    D a1 a2 a3
65  1  2  3  3
100 0  2  3  3
   D a1 a2 a3
66 1  1  2  1
90 1  1  2  1
   D a1 a2 a3
66 1  1  2  1
92 0  1  2  1
   D a1 a2 a3
67 0  2  1  1
81 0  2  1  1
   D a1 a2 a3
67 0  2  1  1
97 1  2  1  1
   D a1 a2 a3
68 1  3  2  3
96 0  3  2  3
   D a1 a2 a3
70 0  3  2  1
77 0  3  2  1
   D a1 a2 a3
71 0  2  2  1
74 0  2  2  1
   D a1 a2 a3
71 0  2  2  1
75 0  2  2  1
   D a1 a2 a3
72 1  3  3  1
76 0  3  3  1
   D a1 a2 a3
72 1  3  3  1
85 0  3  3  1
   D a1 a2 a3
72 1  3  3  1
87 1  3  3  1
   D a1 a2 a3
72 1  3  3  1
94 1  3  3  1
   D a1 a2 a3
74 0  2  2  1
75 0  2  2  1
   D a1 a2 a3
76 0  3  3  1
85 0  3  3  1
   D a1 a2 a3
76 0  3  3  1
87 1  3  3  1
   D a1 a2 a3
76 0  3  3  1
94 1  3  3  1
   D a1 a2 a3
78 1  2  3  1
98 0  2  3  1
   D a1 a2 a3
81 0  2  1  1
97 1  2  1  1
   D a1 a2 a3
82 1  3  1  2
95 0  3  1  2
    D a1 a2 a3
83  1  2  3  3
100 0  2  3  3
   D a1 a2 a3
85 0  3  3  1
87 1  3  3  1
   D a1 a2 a3
85 0  3  3  1
94 1  3  3  1
   D a1 a2 a3
87 1  3  3  1
94 1  3  3  1
   D a1 a2 a3
88 1  1  3  1
89 0  1  3  1
   D a1 a2 a3
88 1  1  3  1
91 0  1  3  1
   D a1 a2 a3
89 0  1  3  1
91 0  1  3  1
   D a1 a2 a3
90 1  1  2  1
92 0  1  2  1
[1] "end of set"
> 
> 
> 
> cleanEx()
> nameEx("rsr")
> ### * rsr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rsr
> ### Title: Rating scale reduction
> ### Aliases: rsr
> 
> ### ** Examples
> 
> #creating the matrix of attributes and the decision vector
> #must be as.numeric()
> data(aSAH)
> attach(aSAH)
> is.numeric(aSAH)
[1] FALSE
> 
> attribute <-data.frame(as.numeric(gender), 
+ as.numeric(age), as.numeric(wfns), as.numeric(s100b), as.numeric(ndka))
> colnames(attribute) <-c("a1", "a2", "a3", "a4", "a5")
> decision <-as.numeric(outcome)
> 
> #rating scale reduction procedure
> rsred <-rsr(attribute, decision, plotRSR=TRUE)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpCnzu14/R.INSTALLf2ae5648afe6/RatingScaleReduction/R/rsr.R#68: 
 --- if/while statement is in package --- 
RatingScaleReduction
 --- call (currently evaluated) --- 
rsr(attribute, decision, plotRSR = TRUE)
 --- R stacktrace ---
where 1: rsr(attribute, decision, plotRSR = TRUE)

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function (currently evaluated)--- 
function(attribute, D, plotRSR = FALSE, method = c("Stop1Max", "StopGlobalMax")) {
    if (length(names(attribute)) == 0) {
        outlist <- list(message("names(attribute)==NULL Create attribute LABELS (e.g. using colnames)"))
    }
    
    if (nrow(attribute) != length(D)) {
        stop("Attributes and decision must have the same number of rows")
    } 
    else {
        # calculate AUC for every attribute
        
        start.auc <- vector(length = ncol(attribute))
        for (i in 1:(ncol(attribute))) {
            start.auc[i] <- roc(D, attribute[, i], plotROC = FALSE)$auc
        }
        
        mydata1 <- rbind(start.auc, attribute[, 1:(ncol(attribute))])
        s1 <- mydata1[, order(mydata1[1, ], decreasing = TRUE)]
        s <- s1[2:nrow(s1), ]
        
        # calculate running total AUC for attributes 1 to i
        ss <- c()
        ss[1] <- s1[1, 1]
        for (i in 2:ncol(s)) {
            ss[i] <- roc(D, rowSums(s[, 1:i]), plotROC = FALSE)$auc
        }
        
        # create reduced rating scale taking the criteria 'Stop first Max'
        auc1 <- c()

        if (method == "Stop1Max") 
            {
                i <- 1
                while (ss[i + 1] > ss[i]) {
                  auc1[i] <- ss[i]
                  i <- i + 1
                }
                auc.reduct <- c(auc1, ss[i])
            }  # create reduced rating scale taking the criteria 'Global Max'
        
        else {
            i = which.max(ss)
            auc.reduct <- ss[1:i]
        }
        
### create summary table
        if (length(auc.reduct) > 1) {
            tab <- t(rbind(s1[1, 1:length(auc.reduct)], auc.reduct))
            colnames(tab) <- c("AUC one variable", "AUC running total")
        }
        
        else {
            tab <- data.frame(names(s1)[1], auc.reduct)
            colnames(tab) <- c("Attribut", "AUC running total")
        }
        
### plot the ROC curve for reduced rating scale (sum of attributes in rsr)
        if (plotRSR == TRUE) {
            if (length(auc.reduct) == 1) {  # reduced to one attribute ??
                y <- s[, 1]
                p <- plot.roc(D, y, plotROC = TRUE)
                outlist <- list(rsr.auc = auc.reduct, rsr.label = names(s1)[1], summary = tab, p)
            } 
            else {
                p <- roc(D, rowSums(s[, 1:i]))
            ### prepared data for plotting
                x <- 1 - p$specificities
                y <- p$sensitivities
                dfr <- data.frame(x, y)  
### plot ROC curve of total AUC of reduced rating scale
                pp <- ggplot(dfr, aes(x, y)) + geom_line(col = "red", size = 1) + geom_abline(intercept = 0, 
                  slope = 1, size = 0.5) + geom_polygon(fill = "gray") + theme_bw() + theme(panel.border = element_blank(), 
                  panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + 
                  ggtitle("ROC curve of total AUC of reduced rating scale") + labs(x = "1-specificities", 
                  y = "sensitivities") + theme(plot.title = element_text(hjust = 0.5))
                
                outlist <- list(rsr.auc = auc.reduct, rsr.label = names(s1[1, 1:length(auc.reduct)]), 
                  summary = tab, pp)
            }

            } 
            else outlist = list(rsr.auc = auc.reduct, rsr.label = names(s1)[1], summary = tab)
    }
    
    class(outlist) = "RatingScaleReduction"
### the list includes ROC curve of total AUC of reduced rating scale, reduced rating scale label and result summary
    return(outlist)  
}
<environment: namespace:RatingScaleReduction>
 --- function (body) search ---
Function rsr in namespace RatingScaleReduction has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
