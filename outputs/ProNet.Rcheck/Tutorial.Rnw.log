
> options(width = 100)

> library("ProNet")
Loading required package: Rcpp
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: MCL
Loading required package: linkcomm
Loading required package: RColorBrewer

Welcome to linkcomm version 1.0-11

For a step-by-step guide to using linkcomm functions:
   > vignette(topic = "linkcomm", package = "linkcomm")
To run an interactive demo:
   > demo(topic = "linkcomm", package = "linkcomm")
To cite, see:
   > citation("linkcomm")
NOTE: To use linkcomm, you require read and write permissions in the current directory (see: help("getwd"), help("setwd"))


> nodes <- data.frame(c("1855", "1856", "1857"))

> network <- construction(input = nodes, db = "Biogrid", 
+     species = "human", ID.type = "Entrez Gene", hierarchy = 1)

> net1 <- extraction(network, mode = "sample", sample.number = 20)

> net2 <- extraction(network, mode = "exact", nodes = 1:20)

> net3 <- assemble(net1, net2, mode = "union")

> visualization(network, layout = "fruchterman.reingold", 
+     node.size = 8, node.fill.color = "red", node.border.color = "red", 
+     node.label. .... [TRUNCATED] 

> library("ProNet")

> iavPath <- file.path(system.file("example", package = "ProNet"), 
+     "iav.txt")

> iav <- read.table(iavPath, header = TRUE, sep = "\t")

> head(iav)
  Gene_name_1 Adscription_1 Interaction_type Gene_name_2 Adscription_2
1          M1   IAV protein               pp      GNB2L1    DHP of IAV
2          M1   IAV protein               pp       VPS28    DHP of IAV
3          M1   IAV protein               pp       CDC42    DHP of IAV
4          M1   IAV protein               pp        C1QA    DHP of IAV
5          M1   IAV protein               pp       PRKRA    DHP of IAV
6          M1   IAV protein               pp      SDCBP2    DHP of IAV

> g1 <- construction(iav[, c("Gene_name_1", "Gene_name_2")], 
+     local.net = TRUE)
Warning in graph.data.frame(input, directed = FALSE) :
  In `d' `NA' elements were replaced with string "NA"
Warning in `[<-.factor`(`*tmp*`, thisvar, value = "NA") :
  invalid factor level, NA generated
Warning in `[<-.factor`(`*tmp*`, thisvar, value = "NA") :
  invalid factor level, NA generated

> sp <- unique(cbind(c(as.vector(iav[, "Gene_name_1"]), 
+     as.vector(iav[, "Gene_name_2"])), c(as.vector(iav[, "Adscription_1"]), 
+     as.vector .... [TRUNCATED] 

> V(g1)$species <- sp[, 2]

> summary(g1)
IGRAPH c2324c0 UN-- 114 179 -- 
+ attr: name (v/c), species (v/c)

> hostPath <- file.path(system.file("example", package = "ProNet"), 
+     "host.txt")

> host <- read.table(hostPath, header = TRUE, sep = "\t")

> g2 <- construction(input = as.data.frame(unique(host[, 
+     "Protein.name"])), hierarchy = 1, db = "HPRD", species = "human", 
+     ID.type = "Ge ..." ... [TRUNCATED] 

> summary(g2)
IGRAPH f8c61f9 UN-- 687 3546 -- 
+ attr: name (v/c), vertex.hierarchy (v/n)

> hprd <- construction(db = "HPRD", ID.type = c("Gene symbol"))

> id <- match(unique(c(V(g1)$name, V(g2)$name)), V(hprd)$name)

> gtemp <- induced.subgraph(hprd, id[!is.na(id)])

> g3 <- assemble(g1, gtemp, mode = "union")
Warning in graph.data.frame(edgelist, directed = FALSE) :
  In `d' `NA' elements were replaced with string "NA"
Warning in `[<-.factor`(`*tmp*`, thisvar, value = "NA") :
  invalid factor level, NA generated
Warning in `[<-.factor`(`*tmp*`, thisvar, value = "NA") :
  invalid factor level, NA generated

> summary(g3)
IGRAPH 71281c9 UN-- 761 4026 -- 
+ attr: name (v/c), species (v/c)

> color <- rep(1, vcount(g3))

> color[V(g3)$species == "DHP of IAV"] <- "red"

> color[V(g3)$species == "IAV protein"] <- "black"

> color[is.na(V(g3)$species)] <- "green"

> visualization(g3, node.size = 3, node.fill.color = color, 
+     node.label = "", edge.color = "gray")

> legend("topleft", col = c("black", "red", "green"), 
+     legend = c("virus", "human_direct", "human_indirect"), pch = 19)

> V(g3)$expression <- rexp(vcount(g3), 1)

> location(g3, species = c("human"), vertex.size = 3, 
+     vertex.label.cex = 0.5, vertex.color = "expression", xlim = c(-1, 
+         1), ylim = c .... [TRUNCATED] 
Warning in location(g3, species = c("human"), vertex.size = 3, vertex.label.cex = 0.5,  :
  There are some 'NA' values in graph attribute 'category'!

> topology(g3, simple.parameters = TRUE)
Simple statistics of the network:
 Number of nodes :  761 ;
 Number of edges :  4026 ;
 Connected components :  1 ;
 Isolated nodes :  0 ;
 Number of self-loops :  590 ;
 Average number of neighbors :  8.980289 ;
 Average path length :  3.192119 ;
 Network diameter :  5 ;
 Density :  0.01392212 ;
 Cluster coefficient :  0.1231016 ;
$simple
             Number of nodes              Number of edges         Connected components 
                7.610000e+02                 4.026000e+03                 1.000000e+00 
              Isolated nodes         Number of self-loops Avgerage number of neighbors 
                0.000000e+00                 5.900000e+02                 8.980289e+00 
         Average path length             Network diameter                      Density 
                3.192119e+00                 5.000000e+00                 1.392212e-02 
         Cluster coefficient 
                1.231016e-01 


> tp <- topology(g2, degree.distribution = TRUE)

> head(as.data.frame(tp))
       degree.Node.name degree.Degree degree.Degree.Distribution
PIK3R2           PIK3R2            32        0.00582241630276565
HDAC1             HDAC1            36        0.00582241630276565
CBL                 CBL            30        0.00582241630276565
PLCG1             PLCG1            29        0.00436681222707424
TYK2               TYK2            16         0.0131004366812227
MAPK1             MAPK1            47        0.00145560407569141

> tp <- topology(g2, shortest.paths = TRUE)

> head(as.data.frame(tp))
  shortest.paths.Var1 shortest.paths.Freq
1                   1                2984
2                   2               38960
3                   3              101589
4                   4               77729
5                   5               13978
6                   6                 401

> net.comparing(g3, hprd, topology.parameters = TRUE)
$topology
                                   g3       hprd
Number of nodes              761.0000  9617.0000
Number of edges             4026.0000 39240.0000
Isolated nodes                 0.0000     0.0000
Connected components           1.0000   262.0000
Network diameter               5.0000    14.0000
Average path length            3.1921     4.2093
Avg. number of neighbors       8.9803     7.7028
Ave. degree                   10.5808     8.1605
Avg. clustering coefficient    0.2220     0.1381
Avg. betweenness             833.0053 14179.5208


> net.comparing(g3, hprd, topology.parameters = FALSE, 
+     degree = TRUE)
$dg.p.value
[1] 1.015416e-26


> net.comparing(g3, hprd, topology.parameters = FALSE, 
+     degree = TRUE)
$dg.p.value
[1] 1.015416e-26


> comp.rand.subnet(g3, hprd, nsim = 10000, ave.path.len = TRUE)
                   g3     hprd pvalue
Ave.path.len 3.192119 5.871739      1

> result <- cluster(g3, method = "FN")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpEEQgH4/R.INSTALL7278225f0f85/ProNet/R/visualization.R#39: 
 --- if/while statement is in package --- 
ProNet
 --- call (currently evaluated) --- 
visualization(graph = graph, layout = layout, node.fill.color = color, 
    ...)
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/RtmpEEQgH4/R.INSTALL7278225f0f85/ProNet/R/clustering.R#46: visualization(graph = graph, layout = layout, node.fill.color = color, 
    ...)
where 2: cluster(g3, method = "FN")
where 3: eval(ei, envir)
where 4: eval(ei, envir)
where 5: withVisible(eval(ei, envir))
where 6: source(output, echo = TRUE)
where 7: doTryCatch(return(expr), name, parentenv, handler)
where 8: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 9: tryCatchList(expr, classes, parentenv, handlers)
where 10: tryCatch({
    source(output, echo = TRUE)
}, error = function(e) {
    cat("\n  When sourcing ", sQuote(output), ":\n", sep = "")
    stop(conditionMessage(e), call. = FALSE, domain = NA)
})
where 11: tools:::.run_one_vignette("Tutorial.Rnw", "/var/scratch2/tomas/test/mine/R-ifc4/check/ProNet.Rcheck/00_pkg_src/ProNet/vignettes", 
    encoding = "UTF-8", pkgdir = "/var/scratch2/tomas/test/mine/R-ifc4/check/ProNet.Rcheck/00_pkg_src/ProNet")

 --- value of length: 7 type: logical ---
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 --- function (currently evaluated)--- 
function(graph,
                        layout=c("reingold.tilford","circle","random","fruchterman.reingold","sphere","kamada.kawai","lgl"),
                        node.fill.color="SkyBlue2",node.border.color="Black",
                        node.shape=c("circle","square","sphere","csquare","rectangle","crectangle","vrectangle","none","pie","raster"),
                        node.size=15,node.label="name",node.label.color=1,
                        node.label.size=0.8,node.label.position=0,edge.shape=1,
                        edge.width=1,edge.color="gray1",...)
{
	if(!is.igraph(graph)){
    stop("Not an igraph object")
	}
	if(missing(layout)){
    layout<-layout.fruchterman.reingold(graph)
	}else if(is.function(layout)){
    layout<-layout(graph)
	}else if(layout %in% c("reingold.tilford","circle","random","fruchterman.reingold","sphere","kamada.kawai","lgl")){
		layout<-eval(parse(text=paste("layout.",layout,"(graph)",sep="")))
	}
	layout<-layout.norm(layout,-1,1,-1,1)

	############################################
	## node.fill.color
	if(is.character(node.fill.color) & length(node.fill.color)==1){
		Expression<-get.vertex.attribute(graph,node.fill.color)
		if(!is.null(Expression)){
			node.fill.color<-Expression2color(Expression)
		}
	}
	############################################
	## node.size
	if(is.character(node.size) & length(node.size)==1){
		attrib<-get.vertex.attribute(graph,node.size)
		if(!is.null(attrib)){
			node.size<-attrib2Vs(attrib,method="unif",Vmax=15,Vmin=3)
		}
	}
	############################################
	## edge.width
	if(is.character(edge.width) & length(edge.width)==1){
		attrib<-get.edge.attribute(graph,edge.width)
		if(!is.null(attrib)){
			edge.width<-attrib2E(attrib,method="unif",Emax=6,Emin=1)
		}
	}	
	############################################
	## edge.color
	if(is.character(edge.color) & length(edge.color)==1){
		attrib<-get.edge.attribute(graph,edge.color)
		if(!is.null(attrib)){
			edge.color<-Expression2color(attrib)
		}
	}
	############################################
	## node.label
	if(is.character(node.label) & length(node.label)==1){
		attrib<-get.vertex.attribute(graph,node.label)
		if(!is.null(attrib)){
			node.label<-attrib
		}
	}
	############################################
	## node.label.position
	if(is.character(node.label.position) & length(node.label.position)==1){
		attrib<-get.vertex.attribute(node.label.position)
		if(!is.null(attrib)){
			node.label<-attrib2Vs(attrib,method="unif",Vmax=1,Vmin=-1)
		}
	}
	############################################
	## edge.shape	
	if(is.character(edge.shape) & length(edge.shape)==1){
		attrib<-get.vertex.attribute(edge.shape)
		if(!is.null(attrib)){
			edge.shape<-attrib2Vs(attrib,method="unif",Vmax=6,Vmin=0)
		}
	}
	###################################################
	##	node shape
	node.shape<-match.arg(node.shape)
	
	if(any(is.na(node.shape))){
		if(is.numeric(node.shape)){
			plot(graph,layout=layout,vertex.size=0,edge.lty=edge.shape,
           edge.width=edge.width,vertex.label=NULL,rescale=FALSE,...)

      par(new=T)
			points(layout,type="p",cex=node.size,col=node.border.color,pch=node.shape,bg=node.fill.color)

			par(new=T)
			plot(graph,layout=layout,vertex.size=0,vertex.label.color=node.label.color,
           vertex.label.cex=node.label.size,vertex.label.dist=node.label.position,
           edge.lty=0,vertex.label=node.label,rescale=FALSE,...)
      
			return(invisible(NULL))
		}
	}
  
	plot(graph,layout=layout,vertex.color=node.fill.color,vertex.frame.color=node.border.color,
       vertex.shape=node.shape,vertex.size=node.size,vertex.label.color=node.label.color,
       vertex.label.cex=node.label.size,vertex.label.dist=node.label.position,
       edge.lty=edge.shape,edge.width=edge.width,vertex.label=node.label,
       edge.color=edge.color,...)
  
	invisible(NULL)
}
<bytecode: 0x14962b68>
<environment: namespace:ProNet>
 --- function (body) search ---
Function visualization in namespace ProNet has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
