
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "pkmon"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('pkmon')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BaseNorm")
> ### * BaseNorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BaseNorm
> ### Title: Normalized spline basis
> ### Aliases: BaseNorm
> 
> ### ** Examples
> 
> # Computing 3-monotone splines with maximum support 8
> Q=BaseNorm(3, 8)
> matplot(Q, type="l", main="3-monotone splines with maximum support 8");
> 
> 
> 
> cleanEx()
> nameEx("Delta")
> ### * Delta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Delta
> ### Title: Discrete laplacian
> ### Aliases: Delta
> 
> ### ** Examples
> 
> p=dSpline(k=3, supp=20)
> M=Delta(3, 20, p)
> 
> 
> 
> cleanEx()
> nameEx("Spline")
> ### * Spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Spline
> ### Title: Random generation and distribution function of k-monotone
> ###   densities
> ### Aliases: rSpline dSpline rmixSpline dmixSpline
> 
> ### ** Examples
> 
> x=rSpline(n=100, 20, 3)
> p=dSpline(20, 3)
> xmix=rmixSpline(n=100, c(5, 20), 3, c(0.5, 0.5))
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpX18c5s/R.INSTALLab2b6d0aa012/pkmon/R/Simul_kmon.R#110: 
 --- if/while statement is in package --- 
pkmon
 --- call (currently evaluated) --- 
rmixSpline(n = 100, c(5, 20), 3, c(0.5, 0.5))
 --- R stacktrace ---
where 1: rmixSpline(n = 100, c(5, 20), 3, c(0.5, 0.5))

 --- value of length: 2 type: logical ---
[1] FALSE FALSE
 --- function (currently evaluated)--- 
function(n=1, supp, k, prob){
  # random generation for a mixture of splines
  #
  # INPUT
  # supp : vector containing the support of the mixture
  # prob : vector of the same length as supp, containing the
  #      probabilities of each spline of the mixture
  # n : the size of the sample
  # k : integer for the degree of the k-monotony of the splines
  #
  # OUTPUT
  # vector of length n
  
  # Checking input
  if(abs(supp - round(supp)) >= .Machine$double.eps^0.5 | supp<0){
    stop("supp should be a positive integer")
  }
  
  if(abs(k - round(k)) >= .Machine$double.eps^0.5 | k<2){
    stop("k should be an integer strictly larger than 1")
  }
  
  if(!is.numeric(prob)){
    stop("prob should be a numeric vector.")
  }
  
	if(length(supp)!=1){
		prob=prob/sum(prob);
		j=sample(supp, size=n, replace=TRUE, prob=prob);
		X=unlist(lapply(j, rSpline, n=1, k=k));
	} else {
		X=rSpline(n=n, k=k);
	}
	return(X);
}
<environment: namespace:pkmon>
 --- function (body) search ---
Function rmixSpline in namespace pkmon has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
