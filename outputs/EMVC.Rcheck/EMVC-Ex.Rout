
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EMVC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('EMVC')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("EMVC")
> ### * EMVC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EMVC
> ### Title: Entropy Minimization over Variable Clusters (EMVC) algorithm
> ### Aliases: EMVC
> ### Keywords: file
> 
> ### ** Examples
> 
>    ## Create random sparse annotation matrix for 50 variable groups 
>    ## and 100 variables
>    annotations = matrix(rbinom(5000,1,.1), nrow=50, ncol=100)
> 
>    ## Number of initial annotations
>    sum(annotations)
[1] 536
> 
>    ## Create random gene expression matrix for 50 observations and 100 variables 
>    data = matrix(rnorm(5000), nrow=50, ncol=100)
>  
>    ## Execute EMVC using k-means
>    EMVC.results = EMVC(data=data, annotations=annotations, 
+                        bootstrap.iter=30, k.range=2:10, clust.method="kmeans", 
+                        kmeans.nstart=3, kmeans.iter.max=10)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpGBuIHK/R.INSTALL13864f43151e/EMVC/R/EMVC.R#172: 
 --- if/while statement is in package --- 
EMVC
 --- call (currently evaluated) --- 
checkOptimizeAnnotationArgs(data, annotations, params)
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/RtmpGBuIHK/R.INSTALL13864f43151e/EMVC/R/EMVC.R#57: checkOptimizeAnnotationArgs(data, annotations, params)
where 2: EMVC(data = data, annotations = annotations, bootstrap.iter = 30, 
    k.range = 2:10, clust.method = "kmeans", kmeans.nstart = 3, 
    kmeans.iter.max = 10)

 --- value of length: 9 type: logical ---
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(data, annotations, params) {
  current.warn = getOption("warn")
  options(warn=-1)
  if (missing(data)) {
    stop("data matrix must be specified!")
  }
  if (missing(annotations)) {
    stop("annotation matrix must be specified!")
  }  
  if (nrow(data) < 2) {
    stop("data matrix must contain at least 2 observations")
  }    
  if (ncol(data) < 4) {
    stop("data matrix must contain at least 4 variables")
  }
  if (ncol(data) < 4) {
    stop("data matrix must contain at least 4 variables")
  }  
  if (ncol(data) != ncol(annotations)) {
    stop("data matrix and annotation matrix must have the same number of columns")
  }
  if (length(which(is.na(data))) > 0) {
    stop("data matrix cannot contain missing values: ", which(is.na(data)))
  }
  if (length(which(is.na(annotations))) > 0) {
    stop("annotation matrix cannot contain missing values")
  }
  if (is.na(params$k.range)) {
    stop("k.range must be specified!")
  }
  if (max(params$k.range) > ncol(data)) {
    stop("max of k.range cannot be larger than the number of variables!")
  }  
  if (min(params$k.range) < 2) {
    stop("min of k.range cannot be less than 2!")
  }  
  if (is.na(params$clust.method)) {
    stop("clust.method must be specified!")
  }
  if (params$clust.method == "kmeans") {
    # all params are optional
  } else if (params$clust.method == "hclust") {
    # all params are optional
  } else {
    stop("clust.method must be set to either 'kmeans' or 'hclust'!")    
  }
  if (params$hclust.cor.method == "spearman") {
  } else if (params$hclust.cor.method == "kendall") {
  } else if (params$hclust.cor.method == "pearson") {    
  } else {
    stop("hclust.cor.method must be set to 'pearson', 'kendall' or 'spearman'!")    
  }  
  
  options(warn=current.warn)  
}
<environment: namespace:EMVC>
 --- function (body) search ---
Function checkOptimizeAnnotationArgs in namespace EMVC has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
