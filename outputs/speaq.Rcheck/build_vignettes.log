 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpcMkDq5/R.INSTALL81f25051234e/speaq/R/getWaveletPeaks.R#202: 
 --- if/while statement is in package --- 
speaq
 --- call (currently evaluated) --- 
eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
 --- R stacktrace ---
where 1: eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
where 2: eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
where 3: doTryCatch(return(expr), name, parentenv, handler)
where 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 5: tryCatchList(expr, classes, parentenv, handlers)
where 6 at /var/scratch2/tomas/tmp/Rtmpefvvkw/R.INSTALL50e71e636ea/doSNOW/R/doSNOW.R#104: tryCatch(eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv), 
    error = function(e) e)
where 7: (function (args) 
{
    exportEnv <- .doSnowGlobals$exportenv
    lapply(names(args), function(n) assign(n, args[[n]], pos = .doSnowGlobals$exportenv))
    tryCatch(eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv), 
        error = function(e) e)
})(quote(list(Parcounter = 1L)))
where 8: do.call(msg$data$fun, msg$data$args, quote = TRUE)
where 9: doTryCatch(return(expr), name, parentenv, handler)
where 10: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 11: tryCatchList(expr, classes, parentenv, handlers)
where 12: tryCatch(do.call(msg$data$fun, msg$data$args, quote = TRUE), 
    error = handler)
where 13: doTryCatch(return(expr), name, parentenv, handler)
where 14: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 15: tryCatchList(expr, classes, parentenv, handlers)
where 16: tryCatch({
    msg <- recvData(master)
    if (msg$type == "DONE") {
        closeNode(master)
        break
    }
    else if (msg$type == "EXEC") {
        success <- TRUE
        handler <- function(e) {
            success <<- FALSE
            structure(conditionMessage(e), class = c("snow-try-error", 
                "try-error"))
        }
        t1 <- proc.time()
        value <- tryCatch(do.call(msg$data$fun, msg$data$args, 
            quote = TRUE), error = handler)
        t2 <- proc.time()
        value <- list(type = "VALUE", value = value, success = success, 
            time = t2 - t1, tag = msg$data$tag)
        msg <- NULL
        sendData(master, value)
        value <- NULL
    }
}, interrupt = function(e) NULL)
where 17: slaveLoop(makeSOCKmaster(master, port, timeout, useXDR))
where 18: parallel:::.slaveRSOCK()

 --- value of length: 5 type: logical ---
       peakIndex
9_114       TRUE
1_169       TRUE
11_224      TRUE
1_315       TRUE
1_421       TRUE
 --- function (currently evaluated)--- 
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpcMkDq5/R.INSTALL81f25051234e/speaq/R/getWaveletPeaks.R#202: 
 --- if/while statement is in package --- 
speaq
 --- call (currently evaluated) --- 
eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
 --- R stacktrace ---
where 1: eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
where 2: eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
where 3: doTryCatch(return(expr), name, parentenv, handler)
where 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 5: tryCatchList(expr, classes, parentenv, handlers)
where 6 at /var/scratch2/tomas/tmp/Rtmpefvvkw/R.INSTALL50e71e636ea/doSNOW/R/doSNOW.R#104: tryCatch(eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv), 
    error = function(e) e)
where 7: (function (args) 
{
    exportEnv <- .doSnowGlobals$exportenv
    lapply(names(args), function(n) assign(n, args[[n]], pos = .doSnowGlobals$exportenv))
    tryCatch(eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv), 
        error = function(e) e)
})(quote(list(Parcounter = 2L)))
where 8: do.call(msg$data$fun, msg$data$args, quote = TRUE)
where 9: doTryCatch(return(expr), name, parentenv, handler)
where 10: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 11: tryCatchList(expr, classes, parentenv, handlers)
where 12: tryCatch(do.call(msg$data$fun, msg$data$args, quote = TRUE), 
    error = handler)
where 13: doTryCatch(return(expr), name, parentenv, handler)
where 14: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 15: tryCatchList(expr, classes, parentenv, handlers)
where 16: tryCatch({
    msg <- recvData(master)
    if (msg$type == "DONE") {
        closeNode(master)
        break
    }
    else if (msg$type == "EXEC") {
        success <- TRUE
        handler <- function(e) {
            success <<- FALSE
            structure(conditionMessage(e), class = c("snow-try-error", 
                "try-error"))
        }
        t1 <- proc.time()
        value <- tryCatch(do.call(msg$data$fun, msg$data$args, 
            quote = TRUE), error = handler)
        t2 <- proc.time()
        value <- list(type = "VALUE", value = value, success = success, 
            time = t2 - t1, tag = msg$data$tag)
        msg <- NULL
        sendData(master, value)
        value <- NULL
    }
}, interrupt = function(e) NULL)
where 17: slaveLoop(makeSOCKmaster(master, port, timeout, useXDR))
where 18: parallel:::.slaveRSOCK()

 --- value of length: 11 type: logical ---
      peakIndex
1_83       TRUE
1_97       TRUE
1_178      TRUE
1_198      TRUE
1_218      TRUE
1_234      TRUE
1_262      TRUE
1_276      TRUE
1_290      TRUE
1_346      TRUE
1_414      TRUE
 --- function (currently evaluated)--- 
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
Quitting from lines 71-83 (speaq2_illustrations.Rmd) 
Error: processing vignette 'speaq2_illustrations.Rmd' failed with diagnostics:
error reading from connection
Execution halted
