
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "AlignStat"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('AlignStat')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("compare_alignments")
> ### * compare_alignments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_alignments
> ### Title: Compare alternative multiple sequence alignments
> ### Aliases: compare_alignments
> 
> ### ** Examples
> 
> data(reference_alignment)
> data(comparison_alignment)
> PAC <- compare_alignments(reference_alignment,comparison_alignment)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_SP_summary")
> ### * plot_SP_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_SP_summary
> ### Title: A line plot summary of sum of pairs score between two multiple
> ###   sequence alignments
> ### Aliases: plot_SP_summary
> 
> ### ** Examples
> 
> data(reference_alignment)
> data(comparison_alignment)
> PAC <- compare_alignments(reference_alignment, comparison_alignment, SP=TRUE)
> plot_SP_summary(PAC)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_dissimilarity_matrix")
> ### * plot_dissimilarity_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dissimilarity_matrix
> ### Title: A heatmap plot of the dissimilarity matrix of two multiple
> ###   sequence alignments
> ### Aliases: plot_dissimilarity_matrix
> 
> ### ** Examples
> 
> data(reference_alignment)
> data(comparison_alignment)
> PAC <- compare_alignments(reference_alignment,comparison_alignment)
> plot_dissimilarity_matrix(PAC)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_dissimilarity_summary")
> ### * plot_dissimilarity_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dissimilarity_summary
> ### Title: An area plot summary of the different causes of column
> ###   dissimilarity between two multiple sequence alignments
> ### Aliases: plot_dissimilarity_summary
> 
> ### ** Examples
> 
> data(reference_alignment)
> data(comparison_alignment)
> PAC <- compare_alignments(reference_alignment, comparison_alignment)
> plot_dissimilarity_summary(PAC, stack=TRUE)
Warning: Ignoring unknown aesthetics: data, ymax
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_similarity_heatmap")
> ### * plot_similarity_heatmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_similarity_heatmap
> ### Title: A heatmap plot of the column identities between two multiple
> ###   sequence alignments
> ### Aliases: plot_similarity_heatmap
> 
> ### ** Examples
> 
> data(reference_alignment)
> data(comparison_alignment)
> PAC <- compare_alignments(reference_alignment,comparison_alignment)
> plot_similarity_heatmap(PAC)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_similarity_summary")
> ### * plot_similarity_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_similarity_summary
> ### Title: A line plot summary of column similarity between two multiple
> ###   sequence alignments
> ### Aliases: plot_similarity_summary
> 
> ### ** Examples
> 
> data(reference_alignment)
> data(comparison_alignment)
> PAC <- compare_alignments(reference_alignment, comparison_alignment, CS=TRUE)
> plot_similarity_summary(PAC, CS=TRUE, cys=TRUE)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpU2F2mU/R.INSTALL3bb820478cd2/AlignStat/R/Plots.R#131: 
 --- if/while statement is in package --- 
AlignStat
 --- call (currently evaluated) --- 
plot_similarity_summary(PAC, CS = TRUE, cys = TRUE)
 --- R stacktrace ---
where 1: plot_similarity_summary(PAC, CS = TRUE, cys = TRUE)

 --- value of length: 2 type: logical ---
columnwise.column.score            column.score 
                   TRUE                    TRUE 
 --- function (currently evaluated)--- 
function(x, scale=TRUE, CS=FALSE, cys=FALSE, display=TRUE){
  
  identity       <- x$results_R[1,]
  if (scale){
    identity       <- x$results_R[1,]/(1-x$results_R[2,]) # Similarity, excluding conserved gaps
  }
  proportion_cys <- 0.2*(x$cys)-0.2
  if ( !is.na(x$column_score) ){
    columnwise.CS  <- x$column_score$columnwise.column.score==1
    sum.CS         <- x$column_score$column.score
  } else {
    columnwise.CS <- FALSE
    sum.CS <-  NA
  }
  score          <- x$similarity_score
  col            <- 1:ncol(x$results)
  plot_data      <- data.frame(Identity=identity,columnwise.CS=columnwise.CS,PropCys=proportion_cys,Position=col)

  p <- ggplot2::ggplot(plot_data,ggplot2::aes(x=Position))                 +
       ggplot2::geom_line(ggplot2::aes(y=identity,colour="Similarity"))    +
       ggplot2::labs(x = "Reference MSA column", y = "Proportion")         +
       ggplot2::scale_x_continuous(expand = c(0, 0))                       +
       ggplot2::scale_y_continuous(expand = c(0, 0),breaks=seq(0,1,1/10))  +
       ggplot2::theme_classic()                                            +
       ggplot2::theme(legend.title = ggplot2::element_text(face = "bold")) +
       ggplot2::scale_colour_discrete(breaks=c("Similarity","Cysteines"),
                                      name=paste("Score =",percent(score),
                                                 "\nCS score =",percent(sum.CS)))
  
  if(cys) {
    p  <- p + ggplot2::geom_line(ggplot2::aes(y=PropCys,colour="Cysteines")) +
              ggplot2::geom_line(ggplot2::aes(y=0))                          +
              ggplot2::geom_line(ggplot2::aes(y=0))
  }
  
  if(CS) {
    cs_data <- plot_data[which(plot_data$columnwise.CS),]
    if ( nrow(cs_data)>0){
      p  <- p + ggplot2::geom_point(data=cs_data, ggplot2::aes(y=0)) 
    }
  }
  
  if (display){
    print(p)
  }
  p
}
<environment: namespace:AlignStat>
 --- function (body) search ---
Function plot_similarity_summary in namespace AlignStat has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
