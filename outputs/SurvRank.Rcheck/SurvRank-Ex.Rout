
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SurvRank"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SurvRank')
Loading required package: survival
Loading required package: foreach
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CVrankSurv_fct")
> ### * CVrankSurv_fct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CVrankSurv_fct
> ### Title: Main function of SurvRank.
> ### Aliases: CVrankSurv_fct
> ### Keywords: SurvRank
> 
> ### ** Examples
> 
> ## Simulating a survival data set
> N=100; p=10; n=4
> x=data.frame(matrix(rnorm(N*p),nrow=N,p))
> beta=rnorm(n)
> mx=matrix(rnorm(N*n),N,n)
> fx=mx[,seq(n)]%*%beta/3
> hx=exp(fx)
> ty=rexp(N,hx)
> tcens=1-rbinom(n=N,prob=.3,size=1)
> y=Surv(ty,tcens)
> data=list()
> data$x<-x; data$y<-y
> ## Ranking the features according to their significance in the univariate cox models
> out.cox<-CVrankSurv_fct(data,2,3,3,fs.method="cox.rank")
  |                                                                              |==============                                                        |  20% ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp97VyvM/R.INSTALL85cc2c00dc76/SurvRank/R/innerAUC_fct.R#37: 
 --- if/while statement is in package --- 
SurvRank
 --- call (currently evaluated) --- 
NULL
 --- R stacktrace ---
where 1: innerAUC_fct(f = fsSurvRankCox, data = data, t = t, cv.out = cv.out, 
    cv.in = cv.in, i = i, fold = fold, data.out = data.out, nr.var = nr.var, 
    out.s = out.s, sd1 = sd1, c.time = c.time, ranking = ranking, 
    used.rank = used.rank, used.rank1se = used.rank1se, pred.in = pred.in, 
    pred.out = pred.out, pred.out1 = pred.out1, auc.out = auc.out, 
    auc.out1 = auc.out1)
where 2: eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
where 3: eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv)
where 4: doTryCatch(return(expr), name, parentenv, handler)
where 5: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 6: tryCatchList(expr, classes, parentenv, handlers)
where 7 at /var/scratch2/tomas/tmp/Rtmph3fewf/R.INSTALL4be312b082b/doParallel/R/doParallel.R#330: tryCatch(eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv), 
    error = function(e) e)
where 8: (function (args) 
{
    lapply(names(args), function(n) assign(n, args[[n]], pos = .doSnowGlobals$exportenv))
    tryCatch(eval(.doSnowGlobals$expr, envir = .doSnowGlobals$exportenv), 
        error = function(e) e)
})(quote(list(i = 1L)))
where 9: do.call(msg$data$fun, msg$data$args, quote = TRUE)
where 10: doTryCatch(return(expr), name, parentenv, handler)
where 11: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 12: tryCatchList(expr, classes, parentenv, handlers)
where 13: tryCatch(do.call(msg$data$fun, msg$data$args, quote = TRUE), 
    error = handler)
where 14: doTryCatch(return(expr), name, parentenv, handler)
where 15: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 16: tryCatchList(expr, classes, parentenv, handlers)
where 17: tryCatch({
    msg <- recvData(master)
    if (msg$type == "DONE") {
        closeNode(master)
        break
    }
    else if (msg$type == "EXEC") {
        success <- TRUE
        handler <- function(e) {
            success <<- FALSE
            structure(conditionMessage(e), class = c("snow-try-error", 
                "try-error"))
        }
        t1 <- proc.time()
        value <- tryCatch(do.call(msg$data$fun, msg$data$args, 
            quote = TRUE), error = handler)
        t2 <- proc.time()
        value <- list(type = "VALUE", value = value, success = success, 
            time = t2 - t1, tag = msg$data$tag)
        msg <- NULL
        sendData(master, value)
        value <- NULL
    }
}, interrupt = function(e) NULL)
where 18: slaveLoop(makeSOCKmaster(master, port, timeout, useXDR))
where 19: parallel:::.slaveRSOCK()

 --- value of length: 2 type: logical ---
  rank nrcoef 
 FALSE  FALSE 
 --- function (currently evaluated)--- 
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
Error in unserialize(socklist[[n]]) : error reading from connection
Calls: CVrankSurv_fct ... recvOneData -> recvOneData.SOCKcluster -> unserialize
Execution halted
