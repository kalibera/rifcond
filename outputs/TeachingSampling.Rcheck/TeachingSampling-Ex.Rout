
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "TeachingSampling"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('TeachingSampling')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BigLucy")
> ### * BigLucy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BigBigLucy
> ### Title: Full Business Population Database
> ### Aliases: BigLucy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(BigLucy)
> attach(BigLucy)
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> # The population totals
> colSums(estima)
   Income Employees     Taxes 
 36634733   5391992   1008426 
> # Some parameters of interest
> table(SPAM,Level)
     Level
SPAM    Big Medium Small
  no    910  10185 22260
  yes  1995  15610 34336
> xtabs(Income ~ Level+SPAM)
        SPAM
Level          no      yes
  Big     1116990  2512720
  Medium  6679820 10377465
  Small   6288497  9659241
> # Correlations among characteristics of interest
> cor(estima)
             Income Employees     Taxes
Income    1.0000000 0.6433037 0.9166732
Employees 0.6433037 1.0000000 0.6448609
Taxes     0.9166732 0.6448609 1.0000000
> # Some useful histograms
> hist(Income)
> hist(Taxes)
> hist(Employees)
> # Some useful plots
> boxplot(Income ~ Level)
> barplot(table(Level))
> pie(table(SPAM))
> 
> 
> 
> cleanEx()

detaching ‘BigLucy’

> nameEx("Deltakl")
> ### * Deltakl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Deltakl
> ### Title: Variance-Covariance Matrix of the Sample Membership Indicators
> ###   for Fixed Size Without Replacement Sampling Designs
> ### Aliases: Deltakl
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Vector U contains the label of a population of size N=5
> U <- c("Yves", "Ken", "Erik", "Sharon", "Leslie")
> N <- length(U)
> # The sample size is n=2
> n <- 2
> # p is the probability of selection of every sample. 
> p <- c(0.13, 0.2, 0.15, 0.1, 0.15, 0.04, 0.02, 0.06, 0.07, 0.08)
> # Note that the sum of the elements of this vector is one
> sum(p)
[1] 1
> # Computation of the Variance-Covariance matrix of the sample membership indicators
> Deltakl(N, n, p)
        [,1]    [,2]    [,3]    [,4]    [,5]
[1,]  0.2436 -0.0672 -0.0784 -0.0414 -0.0566
[2,] -0.0672  0.2244 -0.0132 -0.0722 -0.0718
[3,] -0.0784 -0.0132  0.2496 -0.0984 -0.0596
[4,] -0.0414 -0.0722 -0.0984  0.2211 -0.0091
[5,] -0.0566 -0.0718 -0.0596 -0.0091  0.1971
> 
> 
> 
> cleanEx()
> nameEx("Domains")
> ### * Domains
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Domains
> ### Title: Domains Indicator Matrix
> ### Aliases: Domains
> ### Keywords: survey
> 
> ### ** Examples
> 
> ############
> ## Example 1
> ############
> # This domain contains only two categories: "yes" and "no"
> x <- as.factor(c("yes","yes","yes","no","no","no","no","yes","yes"))
> Domains(x)
      no yes
 [1,]  0   1
 [2,]  0   1
 [3,]  0   1
 [4,]  1   0
 [5,]  1   0
 [6,]  1   0
 [7,]  1   0
 [8,]  0   1
 [9,]  0   1
> 
> ############
> ## Example 2
> ############
> # Uses the Lucy data to draw a random sample of units according 
> # to a SI design
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- sample(N,n)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variable SPAM is a domain of interest
> Doma <- Domains(SPAM)
> Doma
       no yes
  [1,]  0   1
  [2,]  1   0
  [3,]  0   1
  [4,]  1   0
  [5,]  0   1
  [6,]  0   1
  [7,]  0   1
  [8,]  0   1
  [9,]  1   0
 [10,]  0   1
 [11,]  0   1
 [12,]  0   1
 [13,]  0   1
 [14,]  0   1
 [15,]  0   1
 [16,]  0   1
 [17,]  1   0
 [18,]  0   1
 [19,]  1   0
 [20,]  0   1
 [21,]  0   1
 [22,]  0   1
 [23,]  0   1
 [24,]  0   1
 [25,]  0   1
 [26,]  0   1
 [27,]  0   1
 [28,]  0   1
 [29,]  0   1
 [30,]  0   1
 [31,]  0   1
 [32,]  0   1
 [33,]  0   1
 [34,]  1   0
 [35,]  0   1
 [36,]  0   1
 [37,]  1   0
 [38,]  0   1
 [39,]  0   1
 [40,]  1   0
 [41,]  0   1
 [42,]  0   1
 [43,]  0   1
 [44,]  1   0
 [45,]  0   1
 [46,]  0   1
 [47,]  0   1
 [48,]  0   1
 [49,]  1   0
 [50,]  0   1
 [51,]  1   0
 [52,]  1   0
 [53,]  1   0
 [54,]  0   1
 [55,]  0   1
 [56,]  0   1
 [57,]  0   1
 [58,]  1   0
 [59,]  0   1
 [60,]  1   0
 [61,]  0   1
 [62,]  1   0
 [63,]  1   0
 [64,]  0   1
 [65,]  0   1
 [66,]  1   0
 [67,]  1   0
 [68,]  0   1
 [69,]  1   0
 [70,]  1   0
 [71,]  0   1
 [72,]  1   0
 [73,]  0   1
 [74,]  0   1
 [75,]  1   0
 [76,]  0   1
 [77,]  1   0
 [78,]  0   1
 [79,]  1   0
 [80,]  0   1
 [81,]  0   1
 [82,]  1   0
 [83,]  1   0
 [84,]  1   0
 [85,]  0   1
 [86,]  0   1
 [87,]  1   0
 [88,]  0   1
 [89,]  1   0
 [90,]  0   1
 [91,]  1   0
 [92,]  0   1
 [93,]  1   0
 [94,]  1   0
 [95,]  1   0
 [96,]  0   1
 [97,]  1   0
 [98,]  1   0
 [99,]  0   1
[100,]  0   1
[101,]  0   1
[102,]  0   1
[103,]  0   1
[104,]  0   1
[105,]  1   0
[106,]  1   0
[107,]  0   1
[108,]  1   0
[109,]  0   1
[110,]  1   0
[111,]  1   0
[112,]  0   1
[113,]  0   1
[114,]  0   1
[115,]  0   1
[116,]  0   1
[117,]  0   1
[118,]  1   0
[119,]  0   1
[120,]  0   1
[121,]  1   0
[122,]  1   0
[123,]  0   1
[124,]  1   0
[125,]  0   1
[126,]  0   1
[127,]  0   1
[128,]  0   1
[129,]  0   1
[130,]  0   1
[131,]  1   0
[132,]  0   1
[133,]  1   0
[134,]  1   0
[135,]  1   0
[136,]  1   0
[137,]  0   1
[138,]  0   1
[139,]  0   1
[140,]  0   1
[141,]  1   0
[142,]  1   0
[143,]  0   1
[144,]  0   1
[145,]  0   1
[146,]  1   0
[147,]  1   0
[148,]  1   0
[149,]  1   0
[150,]  0   1
[151,]  0   1
[152,]  0   1
[153,]  0   1
[154,]  0   1
[155,]  0   1
[156,]  0   1
[157,]  0   1
[158,]  0   1
[159,]  0   1
[160,]  0   1
[161,]  0   1
[162,]  0   1
[163,]  1   0
[164,]  1   0
[165,]  0   1
[166,]  0   1
[167,]  1   0
[168,]  1   0
[169,]  1   0
[170,]  1   0
[171,]  0   1
[172,]  1   0
[173,]  1   0
[174,]  0   1
[175,]  1   0
[176,]  1   0
[177,]  0   1
[178,]  0   1
[179,]  0   1
[180,]  0   1
[181,]  0   1
[182,]  0   1
[183,]  0   1
[184,]  1   0
[185,]  0   1
[186,]  1   0
[187,]  0   1
[188,]  0   1
[189,]  0   1
[190,]  1   0
[191,]  0   1
[192,]  0   1
[193,]  0   1
[194,]  0   1
[195,]  1   0
[196,]  0   1
[197,]  1   0
[198,]  0   1
[199,]  0   1
[200,]  0   1
[201,]  0   1
[202,]  0   1
[203,]  1   0
[204,]  1   0
[205,]  0   1
[206,]  0   1
[207,]  1   0
[208,]  1   0
[209,]  0   1
[210,]  0   1
[211,]  0   1
[212,]  1   0
[213,]  1   0
[214,]  0   1
[215,]  1   0
[216,]  0   1
[217,]  1   0
[218,]  0   1
[219,]  0   1
[220,]  0   1
[221,]  0   1
[222,]  1   0
[223,]  0   1
[224,]  1   0
[225,]  0   1
[226,]  1   0
[227,]  1   0
[228,]  0   1
[229,]  0   1
[230,]  1   0
[231,]  1   0
[232,]  0   1
[233,]  0   1
[234,]  0   1
[235,]  1   0
[236,]  0   1
[237,]  0   1
[238,]  0   1
[239,]  0   1
[240,]  0   1
[241,]  1   0
[242,]  1   0
[243,]  0   1
[244,]  0   1
[245,]  0   1
[246,]  1   0
[247,]  1   0
[248,]  1   0
[249,]  0   1
[250,]  0   1
[251,]  0   1
[252,]  1   0
[253,]  1   0
[254,]  1   0
[255,]  0   1
[256,]  0   1
[257,]  0   1
[258,]  0   1
[259,]  1   0
[260,]  0   1
[261,]  0   1
[262,]  0   1
[263,]  1   0
[264,]  0   1
[265,]  0   1
[266,]  0   1
[267,]  0   1
[268,]  0   1
[269,]  0   1
[270,]  0   1
[271,]  0   1
[272,]  0   1
[273,]  0   1
[274,]  0   1
[275,]  0   1
[276,]  0   1
[277,]  0   1
[278,]  0   1
[279,]  0   1
[280,]  1   0
[281,]  0   1
[282,]  0   1
[283,]  0   1
[284,]  1   0
[285,]  0   1
[286,]  0   1
[287,]  0   1
[288,]  0   1
[289,]  0   1
[290,]  1   0
[291,]  0   1
[292,]  0   1
[293,]  0   1
[294,]  0   1
[295,]  0   1
[296,]  0   1
[297,]  1   0
[298,]  0   1
[299,]  1   0
[300,]  0   1
[301,]  0   1
[302,]  0   1
[303,]  0   1
[304,]  0   1
[305,]  1   0
[306,]  0   1
[307,]  0   1
[308,]  0   1
[309,]  0   1
[310,]  1   0
[311,]  1   0
[312,]  1   0
[313,]  1   0
[314,]  1   0
[315,]  0   1
[316,]  1   0
[317,]  1   0
[318,]  1   0
[319,]  1   0
[320,]  0   1
[321,]  0   1
[322,]  0   1
[323,]  1   0
[324,]  0   1
[325,]  1   0
[326,]  0   1
[327,]  1   0
[328,]  0   1
[329,]  1   0
[330,]  0   1
[331,]  0   1
[332,]  1   0
[333,]  1   0
[334,]  0   1
[335,]  0   1
[336,]  1   0
[337,]  1   0
[338,]  0   1
[339,]  0   1
[340,]  0   1
[341,]  0   1
[342,]  1   0
[343,]  0   1
[344,]  0   1
[345,]  0   1
[346,]  0   1
[347,]  1   0
[348,]  1   0
[349,]  1   0
[350,]  0   1
[351,]  1   0
[352,]  0   1
[353,]  0   1
[354,]  0   1
[355,]  0   1
[356,]  0   1
[357,]  1   0
[358,]  0   1
[359,]  0   1
[360,]  1   0
[361,]  0   1
[362,]  1   0
[363,]  0   1
[364,]  0   1
[365,]  0   1
[366,]  1   0
[367,]  0   1
[368,]  0   1
[369,]  1   0
[370,]  1   0
[371,]  0   1
[372,]  1   0
[373,]  1   0
[374,]  1   0
[375,]  0   1
[376,]  1   0
[377,]  1   0
[378,]  0   1
[379,]  0   1
[380,]  1   0
[381,]  1   0
[382,]  0   1
[383,]  1   0
[384,]  0   1
[385,]  1   0
[386,]  0   1
[387,]  0   1
[388,]  0   1
[389,]  1   0
[390,]  0   1
[391,]  1   0
[392,]  0   1
[393,]  1   0
[394,]  0   1
[395,]  0   1
[396,]  0   1
[397,]  1   0
[398,]  1   0
[399,]  1   0
[400,]  0   1
> # HT estimation of the absolute domain size for every category in the domain
> # of interest
> E.SI(N,n,Doma)
                  N         no         yes
Estimation     2396 868.550000 1527.450000
Standard Error    0  52.629752   52.629752
CVE               0   6.059496    3.445596
DEFF            NaN   1.000000    1.000000
> 
> ############
> ## Example 3
> ############
> # Following with Example 2... 
> # The variables of interest are: Income, Employees and Taxes
> # This function allows to estimate the population total of this variables for every 
> # category in the domain of interest SPAM 
> estima <- data.frame(Income, Employees, Taxes)
> SPAM.no <- estima*Doma[,1]
> SPAM.yes <- estima*Doma[,2]
> E.SI(N,n,SPAM.no)
                  N       Income    Employees      Taxes
Estimation     2396 3.713740e+05 55569.230000 9643.90000
Standard Error    0 2.768307e+04  3926.502741 1066.56190
CVE               0 7.454229e+00     7.065966   11.05945
DEFF            NaN 1.000000e+00     1.000000    1.00000
> E.SI(N,n,SPAM.yes)
                  N       Income    Employees        Taxes
Estimation     2396 6.964992e+05 1.012130e+05 21039.875000
Standard Error    0 3.538971e+04 4.727001e+03  1943.651796
CVE               0 5.081084e+00 4.670348e+00     9.237944
DEFF            NaN 1.000000e+00 1.000000e+00     1.000000
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.2SI")
> ### * E.2SI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.2SI
> ### Title: Estimation of the Population Total under Two Stage Simple Random
> ###   Sampling Without Replacement
> ### Aliases: E.2SI
> ### Keywords: survey
> 
> ### ** Examples
> 
> ############
> ## Example 1
> ############
> # Uses Lucy data to draw a twostage simple random sample 
> # accordind to a 2SI design. Zone is the clustering variable
> data(Lucy)
> attach(Lucy)
> summary(Zone)
  A   B   C   D   E 
307 727 974 223 165 
> # The population of clusters or Primary Sampling Units
> UI<-c("A","B","C","D","E")
> NI <- length(UI)
> # The sample size is nI=3
> nI <- 3
> # Selects the sample of PSUs
> samI<-S.SI(NI,nI)
> dataI<-UI[samI]
> dataI   
[1] "A" "B" "E"
> # The sampling frame of Secondary Sampling Unit is saved in Lucy1 ... Lucy3
> Lucy1<-Lucy[which(Zone==dataI[1]),]
> Lucy2<-Lucy[which(Zone==dataI[2]),]
> Lucy3<-Lucy[which(Zone==dataI[3]),]
> # The size of every single PSU
> N1<-dim(Lucy1)[1]
> N2<-dim(Lucy2)[1]
> N3<-dim(Lucy3)[1]
> Ni<-c(N1,N2,N3)
> # The sample size in every PSI is 135 Secondary Sampling Units
> n1<-135
> n2<-135
> n3<-135
> ni<-c(n1,n2,n3)
> # Selects a sample of Secondary Sampling Units inside the PSUs
> sam1<-S.SI(N1,n1)
> sam2<-S.SI(N2,n2)
> sam3<-S.SI(N3,n3)
> # The information about each Secondary Sampling Unit in the PSUs
> # is saved in data1 ... data3
> data1<-Lucy1[sam1,]
> data2<-Lucy2[sam2,]
> data3<-Lucy3[sam3,]
> # The information about each unit in the final selected sample is saved in data
> data<-rbind(data1, data2, data3)
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> # The clustering variable is Zone
> Cluster <- as.factor(as.integer(Zone))
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> # Estimation of the Population total
> E.2SI(NI,nI,Ni,ni,estima,Cluster)
                        N       Income    Employees        Taxes
Estimation     1998.33333 910118.02469 135580.33333 27943.055556
Standard Error  533.54579  93301.87927  25376.87375  2518.824838
CVE              26.69954     10.25162     18.71722     9.014135
DEFF                  Inf     11.86708     64.23849     1.736264
> 
> ########################################################
> ## Example 2 Total Census to the entire population
> ########################################################
> # Uses Lucy data to draw a cluster random sample
> # accordind to a SI design ...
> # Zone is the clustering variable
> data(Lucy)
> attach(Lucy)
The following objects are masked from data:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy (pos = 4):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> summary(Zone)
  A   B   C   D   E 
307 727 974 223 165 
> # The population of clusters
> UI<-c("A","B","C","D","E")
> NI <- length(UI)
> # The sample size equals to the population size of PSU
> nI <- NI
> # Selects every single PSU
> samI<-S.SI(NI,nI)
> dataI<-UI[samI]
> dataI   
[1] "A" "B" "C" "D" "E"
> # The sampling frame of Secondary Sampling Unit is saved in Lucy1 ... Lucy5
> Lucy1<-Lucy[which(Zone==dataI[1]),]
> Lucy2<-Lucy[which(Zone==dataI[2]),]
> Lucy3<-Lucy[which(Zone==dataI[3]),]
> Lucy4<-Lucy[which(Zone==dataI[4]),]
> Lucy5<-Lucy[which(Zone==dataI[5]),]
> # The size of every single PSU
> N1<-dim(Lucy1)[1]
> N2<-dim(Lucy2)[1]
> N3<-dim(Lucy3)[1]
> N4<-dim(Lucy4)[1]
> N5<-dim(Lucy5)[1]
> Ni<-c(N1,N2,N3,N4,N5)
> # The sample size of Secondary Sampling Units equals to the size of each PSU
> n1<-N1
> n2<-N2
> n3<-N3
> n4<-N4
> n5<-N5
> ni<-c(n1,n2,n3,n4,n5)
> # Selects every single Secondary Sampling Unit inside the PSU
> sam1<-S.SI(N1,n1)
> sam2<-S.SI(N2,n2)
> sam3<-S.SI(N3,n3)
> sam4<-S.SI(N4,n4)
> sam5<-S.SI(N5,n5)
> # The information about each unit in the cluster is saved in Lucy1 ... Lucy5
> data1<-Lucy1[sam1,]
> data2<-Lucy2[sam2,]
> data3<-Lucy3[sam3,]
> data4<-Lucy4[sam4,]
> data5<-Lucy5[sam5,]
> # The information about each Secondary Sampling Unit
> # in the sample (census) is saved in data
> data<-rbind(data1, data2, data3, data4, data5)
> attach(data)
The following objects are masked from Lucy (pos = 3):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from data (pos = 4):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy (pos = 5):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> # The clustering variable is Zone
> Cluster <- as.factor(as.integer(Zone))
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> # Estimation of the Population total
> E.2SI(NI,nI,Ni,ni,estima,Cluster)
                  N  Income Employees   Taxes
Estimation     2396 1035217    151950 28653.5
Standard Error    0       0         0     0.0
CVE               0       0         0     0.0
DEFF            NaN     NaN       NaN     NaN
> # Sampling error is null
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’, ‘data’, ‘Lucy’

> nameEx("E.BE")
> ### * E.BE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.BE
> ### Title: Estimation of the Population Total under Bernoulli Sampling
> ###   Without Replacement
> ### Aliases: E.BE
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a Bernoulli sample
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> n=400
> prob=n/N
> sam <- S.BE(N,prob)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.BE(estima,prob)
                         N       Income    Employees        Taxes
Estimation     2635.600000 1.122250e+06 1.671989e+05 30042.845000
Standard Error  114.680617 5.687462e+04 8.148725e+03  2185.275541
CVE               4.351215 5.067908e+00 4.873672e+00     7.273864
DEFF                   Inf 3.795996e+00 4.917137e+00     1.553709
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.Beta")
> ### * E.Beta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.Beta
> ### Title: Estimation of the population regression coefficients under SI
> ###   designs
> ### Aliases: E.Beta
> ### Keywords: survey
> 
> ### ** Examples
> 
> ######################################################################
> ## Example 1: Linear models involving continuous auxiliary information
> ######################################################################
> 
> # Draws a simple random sample without replacement
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- S.SI(N, n)
> # The information about the units in the sample 
> # is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> 
> ########### common mean model 
> 
> estima<-data.frame(Income, Employees, Taxes)
> x <- rep(1,n)
> E.Beta(N, n, estima,x,ck=1,b0=FALSE)
, , Income

                      [,1]
Beta estimation 410.002500
Standard Error   11.188753
CVE               2.728948

, , Employees

                     [,1]
Beta estimation 61.582500
Standard Error   1.417074
CVE              2.301098

, , Taxes

                      [,1]
Beta estimation 10.5650000
Standard Error   0.6767525
CVE              6.4056086

> 
> 
> ########### common ratio model 
> 
> estima<-data.frame(Income)
> x <- data.frame(Employees)
> E.Beta(N, n, estima,x,ck=x,b0=FALSE)
, , Income

                 Employees
Beta estimation   6.657776
Standard Error   10.686539
CVE             160.512134

> 
> ########### Simple regression model without intercept
> 
> estima<-data.frame(Income, Employees)
> x <- data.frame(Taxes)
> E.Beta(N, n, estima,x,ck=1,b0=FALSE)
, , Income

                    Taxes
Beta estimation 23.170018
Standard Error   2.229511
CVE              9.622396

, , Employees

                   Taxes
Beta estimation 2.848741
Standard Error  0.254068
CVE             8.918608

> 
> ########### Multiple regression model without intercept
> 
> estima<-data.frame(Income)
> x <- data.frame(Employees, Taxes)
> E.Beta(N, n, estima,x,ck=1,b0=FALSE)
, , Income

                Employees     Taxes
Beta estimation 3.8896202 12.089498
Standard Error  0.2787188  2.036145
CVE             7.1657080 16.842260

> 
> ########### Simple regression model with intercept
> 
> estima<-data.frame(Income, Employees)
> x <- data.frame(Taxes)
> E.Beta(N, n, estima,x,ck=1,b0=TRUE)
, , Income

                        1     Taxes
Beta estimation 249.27713 15.213003
Standard Error   13.80292  1.461046
CVE               5.53718  9.603930

, , Employees

                        1      Taxes
Beta estimation 47.506617 1.33231266
Standard Error   1.310484 0.05831019
CVE              2.758528 4.37661421

> 
> ########### Multiple regression model with intercept
> 
> estima<-data.frame(Income)
> x <- data.frame(Employees, Taxes)
> E.Beta(N, n, estima,x,ck=1,b0=TRUE)
, , Income

                         1  Employees     Taxes
Beta estimation 233.022630  0.3421522 14.757149
Standard Error   12.907393  0.1645111  1.555583
CVE               5.539116 48.0812583 10.541215

> 
> ###############################################################
> ## Example 2: Linear models with discrete auxiliary information
> ###############################################################
> 
> # Draws a simple random sample without replacement
> data(Lucy)
> attach(Lucy)
The following objects are masked from data:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy (pos = 4):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- S.SI(N,n)
> # The information about the sample units is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy (pos = 3):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from data (pos = 4):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy (pos = 5):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The auxiliary information
> Doma<-Domains(Level)
> 
> ########### Poststratified common mean model
> 
> estima<-data.frame(Income, Employees, Taxes)
> E.Beta(N, n, estima,Doma,ck=1,b0=FALSE)
, , Income

                       [,1]       [,2]       [,3]
Beta estimation 1241.411765 662.509804 283.014235
Standard Error    55.095261  11.579176   6.947453
CVE                4.438113   1.747774   2.454807

, , Employees

                      [,1]      [,2]     [,3]
Beta estimation 138.647059 77.598039 50.76157
Standard Error    8.465913  2.514241  1.38511
CVE               6.106089  3.240084  2.72866

, , Taxes

                     [,1]       [,2]      [,3]
Beta estimation 75.823529 22.2058824 3.9768683
Standard Error   8.265667  0.8398323 0.1803741
CVE             10.901190  3.7820261 4.5355826

> 
> ########### Poststratified common ratio model
> 
> estima<-data.frame(Income, Employees)
> x<-Doma*Taxes
> E.Beta(N, n, estima,x,ck=1,b0=FALSE)
, , Income

                     [,1]      [,2]       [,3]
Beta estimation 14.438832 27.445424 57.2296799
Standard Error   1.187318  0.564599  0.8157352
CVE              8.223090  2.057170  1.4253708

, , Employees

                     [,1]      [,2]      [,3]
Beta estimation 1.6199919 3.1611970 8.4026462
Standard Error  0.1293178 0.1338761 0.3197786
CVE             7.9826207 4.2349824 3.8056892

> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’, ‘data’, ‘Lucy’

> nameEx("E.PO")
> ### * E.PO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.PO
> ### Title: Estimation of the Population Total under Poisson Sampling
> ###   Without Replacement
> ### Aliases: E.PO
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a Poisson sample
> data(Lucy)
> attach(Lucy)
> N <- dim(Lucy)[1]
> # The population size is 2396. The expected sample size is 400
> # The inclusion probability is proportional to the variable Income
> n <- 400
> Pik<-n*Income/sum(Income)
> # The selected sample
> sam <- S.PO(N,Pik)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The inclusion probabilities of each unit in the selected smaple
> inclusion <- Pik[sam]
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.PO(estima,inclusion)
                         N       Income    Employees        Taxes
Estimation     2436.815438 1.102506e+06 1.585171e+05 3.089840e+04
Standard Error  134.576871 4.677439e+04 8.095709e+03 1.355754e+03
CVE               5.522653 4.242551e+00 5.107150e+00 4.387781e+00
DEFF                   Inf 1.902229e+00 3.758156e+00 2.051999e-01
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.PPS")
> ### * E.PPS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.PPS
> ### Title: Estimation of the Population Total under Probability
> ###   Proportional to Size Sampling With Replacement
> ### Aliases: E.PPS
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a random sample according to a
> # PPS with replacement design
> data(Lucy)
> attach(Lucy)
> # The selection probability of each unit is proportional to the variable Income
> m <- 400
> res <- S.PPS(m,Income)
> # The selected sample
> sam <- res[,1]
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # pk.s is the selection probability of each unit in the selected sample
> pk.s <- res[,2]
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.PPS(estima,pk.s)
                         N       Income    Employees        Taxes
Estimation     2349.260645 1.035217e+06 1.482933e+05 2.846042e+04
Standard Error   76.905757 2.438051e-12 4.106297e+03 8.589473e+02
CVE               3.273615 2.355111e-16 2.769038e+00 3.018041e+00
DEFF                   Inf 4.711940e-33 1.031758e+00 6.556795e-02
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.Quantile")
> ### * E.Quantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.Quantile
> ### Title: Estimation of a Population quantile
> ### Aliases: E.Quantile
> ### Keywords: survey
> 
> ### ** Examples
> 
> ############
> ## Example 1
> ############
> # Vector U contains the label of a population of size N=5
> U <- c("Yves", "Ken", "Erik", "Sharon", "Leslie")
> # Vectors y and x give the values of the variables of interest
> y<-c(32, 34, 46, 89, 35)
> x<-c(52, 60, 75, 100, 50)
> z<-cbind(y,x)
> # Inclusion probabilities for a design of size n=2
> Pik<-c(0.58, 0.34, 0.48, 0.33, 0.27)
> # Estimation of the sample median
> E.Quantile(y, 0.5)
[1] 35
> # Estimation of the sample Q1
> E.Quantile(x, 0.25)
[1] 52
> # Estimation of the sample Q3
> E.Quantile(z, 0.75)
[1] 39.4 66.0
> # Estimation of the sample median
> E.Quantile(z, 0.5, Pik)
[1] 35 60
> 
> ############
> ## Example 2
> ############
> # Uses the Lucy data to draw a PPS sample with replacement
> 
> data(Lucy)
> attach(Lucy)
> 
> # The selection probability of each unit is proportional to the variable Income
> # The sample size is m=400
> m=400
> res <- S.PPS(m,Income)
> # The selected sample
> sam <- res[,1]
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> # The vector of selection probabilities of units in the sample
> pk.s <- res[,2]
> # The vector of inclusion probabilities of units in the sample
> Pik.s<-1-(1-pk.s)^m
> # The information about the sample units is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from data (pos = 3):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> # Estimation of sample median
> E.Quantile(estima,0.5,Pik.s)
[1] 410  75  13
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘data’, ‘Lucy’

> nameEx("E.SI")
> ### * E.SI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.SI
> ### Title: Estimation of the Population Total under Simple Random Sampling
> ###   Without Replacement
> ### Aliases: E.SI
> ### Keywords: survey
> 
> ### ** Examples
> 
> ############
> ## Example 1
> ############
> # Uses the Lucy data to draw a random sample of units according to a SI design
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- S.SI(N,n)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.SI(N,n,estima)
                  N       Income    Employees        Taxes
Estimation     2396 9.823660e+05 1.475517e+05 25313.740000
Standard Error    0 2.680825e+04 3.395308e+03  1621.499105
CVE               0 2.728948e+00 2.301098e+00     6.405609
DEFF            NaN 1.000000e+00 1.000000e+00     1.000000
> 
> ############
> ## Example 2
> ############
> # Following with Example 1. The variable SPAM is a domain of interest
> Doma <- Domains(SPAM)
> # This function allows to estimate the size of each domain in SPAM
> estima <- data.frame(Doma)
> E.SI(N,n,Doma)
                  N         no         yes
Estimation     2396 910.480000 1485.520000
Standard Error    0  53.140406   53.140406
CVE               0   5.836526    3.577226
DEFF            NaN   1.000000    1.000000
> 
> ############
> ## Example 3
> ############
> # Following with Example 1. The variable SPAM is a domain of interest
> Doma <- Domains(SPAM)
> # This function allows to estimate the parameters of the variables of interest 
> # for every category in the domain SPAM
> estima <- data.frame(Income, Employees, Taxes)
> SPAM.no <-  cbind(Doma[,1], estima*Doma[,1])
> SPAM.yes <- cbind(Doma[,1], estima*Doma[,2])
> # Before running the following lines, notice that:
> # The first column always indicates the population size
> # The second column is an estimate of the size of the category in the domain SPAM
> # The remaining columns estimates the parameters of interest 
> # within the corresponding category in the domain SPAM
> E.SI(N,n,SPAM.no)
                  N  Doma[, 1]       Income    Employees      Taxes
Estimation     2396 910.480000 3.690559e+05 54790.530000 9697.81000
Standard Error    0  53.140406 2.747453e+04  3861.617253 1250.10728
CVE               0   5.836526 7.444544e+00     7.047965   12.89061
DEFF            NaN   1.000000 1.000000e+00     1.000000    1.00000
> E.SI(N,n,SPAM.yes)
                  N  Doma[, 1]       Income    Employees        Taxes
Estimation     2396 910.480000 6.133101e+05 92761.140000 15615.930000
Standard Error    0  53.140406 3.014943e+04  4223.602314  1303.404279
CVE               0   5.836526 4.915853e+00     4.553202     8.346632
DEFF            NaN   1.000000 1.000000e+00     1.000000     1.000000
> 
> ############
> ## Example 4
> ############
> # Following with Example 1. The variable SPAM is a domain of interest 
> # and the variable ISO is a populational subgroup of interest
> Doma <- Domains(SPAM)
> estima <- Domains(Zone)
> # Before running the following lines, notice that:
> # The first column indicates wheter the unit 
> # belongs to the first category of SPAM or not
> # The remaining columns indicates wheter the unit 
> # belogns to the categories of Zone
> SPAM.no <-  data.frame(SpamNO=Doma[,1], Zones=estima*Doma[,1])
> # Before running the following lines, notice that:
> # The first column indicates wheter the unit 
> # belongs to the second category of SPAM or not
> # The remaining columns indicates wheter the unit 
> # belogns to the categories of Zone
> SPAM.yes <- data.frame(SpamYES=Doma[,2], Zones=estima*Doma[,2])
> # Before running the following lines, notice that:
> # The first column always indicates the population size
> # The second column is an estimate of the size of the 
> # first category in the domain SPAM
> # The remaining columns estimates the size of the categories 
> # of Zone within the corresponding category of SPAM
> # Finnaly, note that the sum of the point estimates of the last 
> # two columns gives exactly the point estimate in the second column
> E.SI(N,n,SPAM.no)
                  N     SpamNO  Zones.A   Zones.B    Zones.C  Zones.D  Zones.E
Estimation     2396 910.480000 89.85000 233.61000 473.210000 65.89000 47.92000
Standard Error    0  53.140406 20.79952  32.47605  43.585627 17.90393 15.32729
CVE               0   5.836526 23.14916  13.90182   9.210631 27.17245 31.98515
DEFF            NaN   1.000000  1.00000   1.00000   1.000000  1.00000  1.00000
> # Before running the following lines, notice that:
> # The first column always indicates the population size
> # The second column is an estimate of the size of the 
> # second category in the domain SPAM
> # The remaining columns estimates the size of the categories 
> # of Zone within the corresponding category of SPAM
> # Finnaly, note that the sum of the point estimates of the last two 
> # columns gives exactly the point estimate in the second column
> E.SI(N,n,SPAM.yes)
                  N     SpamYES   Zones.A    Zones.B    Zones.C   Zones.D
Estimation     2396 1485.520000 203.66000 443.260000 616.970000 149.75000
Standard Error    0   53.140406  30.53214  42.511056  47.871173  26.50104
CVE               0    3.577226  14.99172   9.590546   7.759076  17.69685
DEFF            NaN    1.000000   1.00000   1.000000   1.000000   1.00000
                Zones.E
Estimation     71.88000
Standard Error 18.67599
CVE            25.98218
DEFF            1.00000
> 
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.STPPS")
> ### * E.STPPS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.STPPS
> ### Title: Estimation of the Population Total under Stratified Probability
> ###   Proportional to Size Sampling With Replacement
> ### Aliases: E.STPPS
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a stratified random sample 
> # according to a PPS design in each stratum
> 
> data(Lucy)
> attach(Lucy)
> # Level is the stratifying variable
> summary(Level)
   Big Medium  Small 
    83    737   1576 
> # Defines the sample size at each stratum
> m1<-70
> m2<-100
> m3<-200
> mh<-c(m1,m2,m3)
> # Draws a stratified sample
> res<-S.STPPS(Level, Income, mh)
> # The selected sample
> sam<-res[,1]
> # The selection probability of each unit in the selected sample
> pk <- res[,2]
> pk
  [1] 0.0155632268 0.0110890402 0.0096908568 0.0100283494 0.0105104816
  [6] 0.0104622683 0.0103851272 0.0125354367 0.0117640252 0.0107033344
 [11] 0.0126800764 0.0156210827 0.0184270920 0.0096715716 0.0097197848
 [16] 0.0112818930 0.0105490521 0.0179353171 0.0096715716 0.0100283494
 [21] 0.0098354965 0.0126800764 0.0123425838 0.0138275510 0.0155632268
 [26] 0.0102212022 0.0111372534 0.0096715716 0.0111951093 0.0107804756
 [31] 0.0145603919 0.0105394095 0.0145603919 0.0105490521 0.0135479143
 [36] 0.0125354367 0.0149557403 0.0106069080 0.0105490521 0.0155825121
 [41] 0.0135479143 0.0105104816 0.0100283494 0.0135479143 0.0098740671
 [46] 0.0104526257 0.0134032746 0.0096715716 0.0097390701 0.0107033344
 [51] 0.0096715716 0.0104911963 0.0142711126 0.0139818333 0.0100669199
 [56] 0.0106069080 0.0108094035 0.0131139953 0.0125354367 0.0155825121
 [61] 0.0117640252 0.0242030355 0.0143675390 0.0138854068 0.0123425838
 [66] 0.0155632268 0.0096715716 0.0097197848 0.0097969259 0.0111951093
 [71] 0.0013768311 0.0018200435 0.0014650632 0.0010464737 0.0010649409
 [76] 0.0011839516 0.0011080310 0.0013234814 0.0012024188 0.0013378448
 [81] 0.0011695882 0.0016620465 0.0020108710 0.0015389319 0.0012885990
 [86] 0.0011080310 0.0016620465 0.0011429134 0.0014794265 0.0020231825
 [91] 0.0016004892 0.0010916157 0.0012311455 0.0012188341 0.0011306020
 [96] 0.0012208860 0.0011367577 0.0013686234 0.0013645196 0.0019082756
[101] 0.0011080310 0.0016846175 0.0012311455 0.0010669928 0.0013337410
[106] 0.0014445441 0.0017030846 0.0012106264 0.0016210083 0.0013132219
[111] 0.0018261992 0.0012516646 0.0019759886 0.0010772523 0.0011490692
[116] 0.0015204647 0.0016640984 0.0016620465 0.0010669928 0.0011388096
[121] 0.0010669928 0.0011059791 0.0011860035 0.0013952983 0.0013132219
[126] 0.0011121348 0.0012311455 0.0010772523 0.0012516646 0.0010875119
[131] 0.0011490692 0.0012742356 0.0019185351 0.0012311455 0.0013009104
[136] 0.0010998233 0.0010464737 0.0013337410 0.0017728495 0.0010875119
[141] 0.0018877565 0.0014773746 0.0016004892 0.0019452099 0.0011675363
[146] 0.0011285501 0.0012516646 0.0016210083 0.0017892648 0.0011080310
[151] 0.0011285501 0.0012927028 0.0017646419 0.0011285501 0.0010464737
[156] 0.0012927028 0.0012106264 0.0012331974 0.0016825655 0.0014445441
[161] 0.0010875119 0.0014917380 0.0010669928 0.0011942112 0.0013747792
[166] 0.0011572768 0.0018508221 0.0012516646 0.0012311455 0.0012085745
[171] 0.0010356628 0.0002138869 0.0003872478 0.0003647334 0.0002949388
[176] 0.0006394092 0.0010356628 0.0010131484 0.0008465418 0.0005898775
[181] 0.0007407241 0.0003242075 0.0006866895 0.0009681196 0.0004232709
[186] 0.0004705512 0.0008848163 0.0008105187 0.0005583573 0.0002814301
[191] 0.0008893192 0.0002251441 0.0006529179 0.0007294669 0.0007182097
[196] 0.0009365994 0.0004750540 0.0001170749 0.0006731808 0.0009703710
[201] 0.0006033862 0.0005380944 0.0010018912 0.0006416607 0.0007542327
[206] 0.0011054575 0.0009005764 0.0005853746 0.0006529179 0.0010356628
[211] 0.0006934438 0.0007024496 0.0008825648 0.0007384726 0.0008127702
[216] 0.0004097622 0.0011032061 0.0006371578 0.0006371578 0.0004953170
[221] 0.0005290886 0.0005628602 0.0005448487 0.0003489733 0.0004525396
[226] 0.0009456052 0.0005178314 0.0007767471 0.0007182097 0.0004097622
[231] 0.0002386527 0.0005516030 0.0002949388 0.0010806916 0.0004030079
[236] 0.0009838797 0.0009838797 0.0009906340 0.0007880043 0.0006979467
[241] 0.0009163365 0.0010806916 0.0004975684 0.0007880043 0.0011032061
[246] 0.0004277738 0.0007384726 0.0005651117 0.0008780620 0.0006078890
[251] 0.0010356628 0.0006866895 0.0010536744 0.0010131484 0.0011032061
[256] 0.0007654899 0.0005853746 0.0010581772 0.0004728026 0.0007137068
[261] 0.0002904359 0.0005966318 0.0007182097 0.0010649316 0.0011054575
[266] 0.0005628602 0.0007047010 0.0008105187 0.0008330331 0.0006529179
[271] 0.0007429755 0.0007654899 0.0004705512 0.0006529179 0.0005651117
[276] 0.0006326549 0.0005583573 0.0007542327 0.0010131484 0.0008015130
[281] 0.0007519813 0.0008780620 0.0003782421 0.0004728026 0.0011099604
[286] 0.0006529179 0.0006078890 0.0005403458 0.0006776837 0.0004682997
[291] 0.0006529179 0.0005516030 0.0011032061 0.0005561059 0.0009005764
[296] 0.0009906340 0.0006078890 0.0006979467 0.0010581772 0.0007722442
[301] 0.0007880043 0.0010806916 0.0008172731 0.0007227125 0.0003061960
[306] 0.0011077089 0.0007654899 0.0011009546 0.0007429755 0.0003849964
[311] 0.0007632385 0.0008397875 0.0003219561 0.0010739373 0.0006033862
[316] 0.0009906340 0.0010806916 0.0004345281 0.0006844380 0.0010964517
[321] 0.0008037644 0.0006304035 0.0010851945 0.0010806916 0.0003782421
[326] 0.0006371578 0.0008082673 0.0001440922 0.0006844380 0.0010356628
[331] 0.0009456052 0.0007407241 0.0003264589 0.0008082673 0.0010131484
[336] 0.0004210195 0.0010131484 0.0008330331 0.0008127702 0.0010356628
[341] 0.0011032061 0.0007654899 0.0007880043 0.0002949388 0.0010356628
[346] 0.0007564841 0.0009906340 0.0007902558 0.0003332133 0.0008037644
[351] 0.0009230908 0.0009365994 0.0010244056 0.0007182097 0.0011032061
[356] 0.0005178314 0.0003332133 0.0010806916 0.0006866895 0.0011032061
[361] 0.0007654899 0.0003804935 0.0002521614 0.0005088256 0.0009005764
[366] 0.0003467219 0.0011032061 0.0011054575 0.0003219561 0.0010356628
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.STPPS(estima,pk,mh,Level)
, , N

                     Big     Medium       Small   Population
Estimation     85.590454 764.558883 1654.072624 2504.2219609
Standard Error  1.797980  13.528396   68.185688    9.1384935
CVE             2.100678   1.769438    4.122291    0.1207159
DEFF                 Inf        Inf         Inf          Inf

, , Income

                        Big       Medium        Small   Population
Estimation     1.037060e+05 4.873510e+05 4.441600e+05 1.035217e+06
Standard Error 6.944531e-13 3.204226e-12 1.868231e-12 2.401439e-06
CVE            6.696364e-16 6.574781e-16 4.206211e-16 1.496940e-07
DEFF           3.386613e-31 1.149536e-31 2.273637e-32 1.107348e-15

, , Employees

                        Big       Medium        Small   Population
Estimation     11314.809874 5.848108e+04 86420.845174 1.562167e+05
Standard Error   265.314343 1.956195e+03  4140.141091 7.975995e+01
CVE                2.344841 3.345005e+00     4.790674 5.716957e-03
DEFF               2.134062 9.796186e-01     2.105986 2.965361e-06

, , Taxes

                       Big       Medium        Small   Population
Estimation     6090.516425 1.554608e+04 5786.3787392 2.742297e+04
Standard Error  188.763266 3.513107e+02  177.5264076 2.678806e+01
CVE               3.099298 2.259803e+00    3.0680053 1.887366e-02
DEFF              1.009099 2.580779e-01    0.2435834 1.650675e-06

> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.STSI")
> ### * E.STSI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.STSI
> ### Title: Estimation of the Population Total under Stratified Simple
> ###   Random Sampling Without Replacement
> ### Aliases: E.STSI
> ### Keywords: survey
> 
> ### ** Examples
> 
> ############
> ## Example 1
> ############
> # Uses the Lucy data to draw a stratified random sample 
> # according to a SI design in each stratum
> 
> data(Lucy)
> attach(Lucy)
> # Level is the stratifying variable
> summary(Level)
   Big Medium  Small 
    83    737   1576 
> # Defines the size of each stratum
> N1<-summary(Level)[[1]]
> N2<-summary(Level)[[2]]
> N3<-summary(Level)[[3]]
> N1;N2;N3
[1] 83
[1] 737
[1] 1576
> Nh <- c(N1,N2,N3)
> # Defines the sample size at each stratum
> n1<-70
> n2<-100
> n3<-200
> nh<-c(n1,n2,n3)
> # Draws a stratified sample
> sam <- S.STSI(Level, Nh, nh)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.STSI(Level,Nh,nh,estima)
, , N

               Big Medium Small Population
Estimation      83    737  1576       2396
Standard Error   0      0     0          0
CVE              0      0     0          0
DEFF           NaN    NaN   NaN        NaN

, , Income

                        Big       Medium        Small   Population
Estimation     1.043452e+05 4.940258e+05 4.210993e+05 1.019470e+06
Standard Error 1.029330e+03 9.466614e+03 1.276586e+04 1.592619e+04
CVE            9.864663e-01 1.916218e+00 3.031556e+00 1.562202e+00
DEFF           1.000000e+00 1.000000e+00 1.000000e+00 1.150504e-01

, , Employees

                       Big       Medium        Small   Population
Estimation     11412.50000 61944.850000 81755.000000 1.551124e+05
Standard Error   168.33776  1831.428610  2457.080257 3.069155e+03
CVE                1.47503     2.956547     3.005419 1.978666e+00
DEFF               1.00000     1.000000     1.000000 3.807613e-01

, , Taxes

                       Big       Medium       Small   Population
Estimation     6338.828571 16840.450000 5559.340000 2.873862e+04
Standard Error  163.753246   690.649768  318.014064 7.777822e+02
CVE               2.583336     4.101136    5.720356 2.706401e+00
DEFF              1.000000     1.000000    1.000000 4.179413e-02

> 
> ############
> ## Example 2
> ############
> # Following with Example 1. The variable SPAM is a domain of interest
> Doma <- Domains(SPAM)
> # This function allows to estimate the parameters of the variables of interest
> # for every category in the domain SPAM
> SPAM.no <- estima*Doma[,1]
> SPAM.yes <- estima*Doma[,2]
> E.STSI(Level, Nh, nh, Doma)
, , N

               Big Medium Small Population
Estimation      83    737  1576       2396
Standard Error   0      0     0          0
CVE              0      0     0          0
DEFF           NaN    NaN   NaN        NaN

, , no

                     Big    Medium     Small Population
Estimation     24.900000 339.02000 543.72000 907.640000
Standard Error  1.812157  34.32114  49.62391  60.363539
CVE             7.277739  10.12363   9.12674   6.650604
DEFF            1.000000   1.00000   1.00000   1.191511

, , yes

                     Big     Medium       Small  Population
Estimation     58.100000 397.980000 1032.280000 1488.360000
Standard Error  1.812157  34.321136   49.623910   60.363539
CVE             3.119031   8.623834    4.807214    4.055708
DEFF            1.000000   1.000000    1.000000    1.191511

> E.STSI(Level, Nh, nh, SPAM.no)
, , N

               Big Medium Small Population
Estimation      83    737  1576       2396
Standard Error   0      0     0          0
CVE              0      0     0          0
DEFF           NaN    NaN   NaN        NaN

, , Income

                        Big       Medium        Small   Population
Estimation     30469.300000 221321.10000 143179.60000 3.949700e+05
Standard Error  2254.383233  23363.01573  15230.56989 2.798005e+04
CVE                7.398868     10.55616     10.63739 7.084094e+00
DEFF               1.000000      1.00000      1.00000 5.020198e-01

, , Employees

                       Big      Medium       Small   Population
Estimation     3333.042857 28433.46000 27674.56000 5.944106e+04
Standard Error  255.106641  3164.82456  2824.67606 4.249705e+03
CVE               7.653866    11.13063    10.20676 7.149442e+00
DEFF              1.000000     1.00000     1.00000 7.337932e-01

, , Taxes

                       Big     Medium      Small   Population
Estimation     1770.271429 7355.26000 1906.96000 1.103249e+04
Standard Error  140.002114  885.73866  259.89659 9.336379e+02
CVE               7.908511   12.04225   13.62884 8.462621e+00
DEFF              1.000000    1.00000    1.00000 1.923887e-01

> E.STSI(Level, Nh, nh, SPAM.yes)
, , N

               Big Medium Small Population
Estimation      83    737  1576       2396
Standard Error   0      0     0          0
CVE              0      0     0          0
DEFF           NaN    NaN   NaN        NaN

, , Income

                        Big       Medium        Small   Population
Estimation     73875.928571 2.727047e+05 2.779197e+05 6.245004e+05
Standard Error  2489.247410 2.444677e+04 1.673826e+04 2.973231e+04
CVE                3.369497 8.964557e+00 6.022694e+00 4.760975e+00
DEFF               1.000000 1.000000e+00 1.000000e+00 3.457989e-01

, , Employees

                       Big       Medium        Small   Population
Estimation     8079.457143 33511.390000 54080.440000 9.567129e+04
Standard Error  292.427663  3158.409107  3345.344788 4.610032e+03
CVE               3.619397     9.424882     6.185868 4.818616e+00
DEFF              1.000000     1.000000     1.000000 5.938808e-01

, , Taxes

                      Big     Medium       Small   Population
Estimation     4568.55714 9485.19000 3652.380000 1.770613e+04
Standard Error  209.59808  954.27580  307.738450 1.024342e+03
CVE               4.58784   10.06069    8.425696 5.785240e+00
DEFF              1.00000    1.00000    1.000000 8.142248e-02

> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.STpiPS")
> ### * E.STpiPS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.STpiPS
> ### Title: Estimation of the Population Total under Stratified Probability
> ###   Proportional to Size Sampling Without Replacement
> ### Aliases: E.STpiPS
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a stratified random sample 
> # according to a PPS design in each stratum
> 
> data(Lucy)
> attach(Lucy)
> # Level is the stratifying variable
> summary(Level)
   Big Medium  Small 
    83    737   1576 
> 
> # Defines the size of each stratum
> N1<-summary(Level)[[1]]
> N2<-summary(Level)[[2]]
> N3<-summary(Level)[[3]]
> N1;N2;N3
[1] 83
[1] 737
[1] 1576
> 
> # Defines the sample size at each stratum
> n1<-70
> n2<-100
> n3<-200
> nh<-c(n1,n2,n3)
> nh
[1]  70 100 200
> # Draws a stratified sample
> S <- Level
> x <- Employees
> 
> res <- S.STpiPS(S, x, nh)
> sam <- res[,1]
> pik <- res[,2]
> 
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> 
> estima <- data.frame(Income, Employees, Taxes)
> E.STpiPS(estima,pik,Level)
, , N

                     Big    Medium       Small   Population
Estimation     81.936780 729.46835 1401.418315 2212.8234425
Standard Error  0.801617  24.53384   52.566861    8.8262291
CVE             0.978336   3.36325    3.750976    0.1342582
DEFF                 Inf       Inf         Inf          Inf

, , Income

                        Big       Medium        Small   Population
Estimation     1.025835e+05 4.806279e+05 3.937429e+05 9.769543e+05
Standard Error 7.707570e+02 1.473351e+04 1.760129e+04 1.819493e+02
CVE            7.513457e-01 3.065472e+00 4.470249e+00 1.380705e-03
DEFF           6.039716e-01 3.109872e+00 2.199036e+00 9.941622e-08

, , Employees

                        Big       Medium        Small   Population
Estimation     1.146100e+04 5.964300e+04 8.084600e+04 1.519500e+05
Standard Error 3.596463e-14 3.143568e-13 4.163898e-13 8.756205e-07
CVE            3.138001e-16 5.270641e-16 5.150407e-16 6.158249e-07
DEFF           5.846594e-32 3.417708e-32 4.866891e-32 5.077052e-14

, , Taxes

                        Big       Medium       Small   Population
Estimation     6.183781e+03 1.597517e+04 5623.567802 2.778252e+04
Standard Error 4.156950e+01 5.960597e+02  374.507755 3.181410e+01
CVE            6.722344e-01 3.731163e+00    6.659611 2.030197e-02
DEFF           6.900761e-02 9.685404e-01    1.524283 2.532599e-06

> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.SY")
> ### * E.SY
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.SY
> ### Title: Estimation of the Population Total under Systematic Sampling
> ###   Without Replacement
> ### Aliases: E.SY
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a Systematic sample
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> # The population is divided in 6 groups
> # The selected sample
> sam <- S.SY(N,6)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.SY(N,6,estima)
                  N       Income    Employees        Taxes
Estimation     2400 1.035168e+06 1.501260e+05 29085.000000
Standard Error    0 2.981237e+04 3.650124e+03  2049.338661
CVE               0 2.879955e+00 2.431374e+00     7.046033
DEFF            NaN 1.000000e+00 1.000000e+00     1.000000
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.WR")
> ### * E.WR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.WR
> ### Title: Estimation of the Population Total under Simple Random Sampling
> ###   With Replacement
> ### Aliases: E.WR
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a random sample according to a WR design
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> m <- 400
> sam <- S.WR(N,m)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.WR(N,m,estima)
                  N       Income    Employees        Taxes
Estimation     2396 1.054557e+06 1.512655e+05 29258.155000
Standard Error    0 3.136248e+04 3.900000e+03  2014.409801
CVE               0 2.973994e+00 2.578248e+00     6.884952
DEFF            NaN 1.200401e+00 1.200401e+00     1.200401
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("E.piPS")
> ### * E.piPS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E.piPS
> ### Title: Estimation of the Population Total under Probability
> ###   Proportional to Size Sampling Without Replacement
> ### Aliases: E.piPS
> ### Keywords: survey
> 
> ### ** Examples
> 
> # Uses the Lucy data to draw a sample according to a piPS
> # without replacement design
> data(Lucy)
> attach(Lucy)
> # The inclusion probability of each unit is proportional to the variable Income
> # The selected sample of size n=400
> n <- 400
> res <- S.piPS(n, Income)
> sam <- res[,1]
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # Pik.s is the inclusion probability of every single unit in the selected sample
> Pik.s <- res[,2]
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> E.piPS(estima,Pik.s)
                         N       Income    Employees        Taxes
Estimation     2294.186905 1.035217e+06 1.471796e+05 2.840797e+04
Standard Error   66.559577 3.261458e-12 3.605064e+03 6.210818e+02
CVE               2.901227 3.150506e-16 2.449432e+00 2.186294e+00
DEFF                   Inf 1.005965e-32 7.766944e-01 4.816185e-02
> # Same results than HT function
> HT(estima, Pik.s)
                [,1]
Income    1035217.00
Employees  147179.59
Taxes       28407.97
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘Lucy’

> nameEx("GREG.SI")
> ### * GREG.SI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GREG.SI
> ### Title: The Generalized Regression Estimator under SI sampling design
> ### Aliases: GREG.SI
> ### Keywords: survey
> 
> ### ** Examples
> 
> ######################################################################
> ## Example 1: Linear models involving continuous auxiliary information
> ######################################################################
> 
> # Draws a simple random sample without replacement
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- S.SI(N,n)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> 
> ########### common mean model
> 
> estima<-data.frame(Income, Employees, Taxes)
> x <- rep(1,n)
> model <- E.Beta(N, n, estima, x, ck=1,b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- c(N)
> GREG.SI(N,n,estima,x,tx, b, b0=FALSE)
                     Income    Employees        Taxes
Estimation     9.823660e+05 1.475517e+05 25313.740000
Standard Error 2.680825e+04 3.395308e+03  1621.499105
CVE            2.728948e+00 2.301098e+00     6.405609
> 
> ########### common ratio model
> 
> estima<-data.frame(Income)
> x <- data.frame(Employees)
> model <- E.Beta(N, n, estima, x, ck=x,b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- sum(Lucy$Employees)
> GREG.SI(N,n,estima,x,tx, b, b0=FALSE)
                     Income
Estimation     1.011649e+06
Standard Error 2.210925e+04
CVE            2.185466e+00
> 
> ########### Simple regression model without intercept
> 
> estima<-data.frame(Income, Employees)
> x <- data.frame(Taxes)
> model <- E.Beta(N, n, estima, x, ck=1,b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- sum(Lucy$Taxes)
> GREG.SI(N,n,estima,x,tx, b, b0=FALSE)
                     Income    Employees
Estimation     1.059748e+06 1.570658e+05
Standard Error 1.663273e+04 3.592653e+03
CVE            1.569498e+00 2.287356e+00
> 
> ########### Multiple regression model without intercept
> 
> estima<-data.frame(Income)
> x <- data.frame(Employees, Taxes)
> model <- E.Beta(N, n, estima, x, ck=1, b0=FALSE)
> b <- as.matrix(model[1,,])
> tx <- c(sum(Lucy$Employees), sum(Lucy$Taxes))
> GREG.SI(N,n,estima,x,tx, b, b0=FALSE) 
                     Income
Estimation     1.039850e+06
Standard Error 1.438268e+04
CVE            1.383150e+00
> 
> ########### Simple regression model with intercept
> 
> estima<-data.frame(Income, Employees)
> x <- data.frame(Taxes)
> model <- E.Beta(N, n, estima, x, ck=1,b0=TRUE) 
> b <- as.matrix(model[1,,])
> tx <- c(N, sum(Lucy$Taxes))
> GREG.SI(N,n,estima,x,tx, b, b0=TRUE) 
                     Income    Employees
Estimation     1.033174e+06 1.520013e+05
Standard Error 1.049660e+04 2.619357e+03
CVE            1.015957e+00 1.723247e+00
> 
> ########### Multiple regression model with intercept
> 
> estima<-data.frame(Income)                               
> x <- data.frame(Employees, Taxes)
> model <- E.Beta(N, n, estima, x, ck=1,b0=TRUE)
> b <- as.matrix(model[1,,])
> tx <- c(N, sum(Lucy$Employees), sum(Lucy$Taxes))            
> GREG.SI(N,n,estima,x,tx, b, b0=TRUE) 
                     Income
Estimation     1.033156e+06
Standard Error 1.045827e+04
CVE            1.012264e+00
> 
> ####################################################################
> ## Example 2: Linear models with discrete auxiliary information
> ####################################################################
> 
> # Draws a simple random sample without replacement
> data(Lucy)
> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- S.SI(N,n)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from data (pos = 3):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> 
> # The auxiliary information is discrete type
> Doma<-Domains(Level)
> 
> ########### Poststratified common mean model
> 
> estima<-data.frame(Income, Employees, Taxes)
> model <- E.Beta(N, n, estima, Doma, ck=1,b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- colSums(Domains(Lucy$Level))
> GREG.SI(N,n,estima,Doma,tx, b, b0=FALSE) 
                     Income    Employees       Taxes
Estimation     9.935289e+05 1.418942e+05 28623.81897
Standard Error 2.201368e+04 1.245566e+04  4724.61201
CVE            2.215706e+00 8.778128e+00    16.50588
> 
> ########### Poststratified common ratio model 
> 
> estima<-data.frame(Income, Employees)
> x <- Doma*Taxes
> model <- E.Beta(N, n, estima, x ,ck=1,b0=FALSE)
> b <- as.matrix(model[1,,])
> tx <- colSums(Domains(Lucy$Level)*Lucy$Taxes)
> GREG.SI(N,n,estima,x,tx, b, b0=FALSE) 
                     Income    Employees
Estimation     1.027699e+06 1.482955e+05
Standard Error 1.216921e+04 3.560627e+03
CVE            1.184122e+00 2.401035e+00
> 
> ######################################################################
> ## Example 3: Domains estimation trough the postestratified estimator
> ######################################################################
> 
> # Draws a simple random sample without replacement
> data(Lucy)
> 
> N <- dim(Lucy)[1]
> n <- 400
> sam <- S.SI(N,n)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from data (pos = 3):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from data (pos = 4):

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> 
> # The auxiliary information is discrete type
> Doma<-Domains(Level)
> 
> ########### Poststratified common mean model for the 
>   # Income total in each poststratum ###################
> 
> estima<-Doma*Income
> model <- E.Beta(N, n, estima, Doma, ck=1, b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- colSums(Domains(Lucy$Level))
> GREG.SI(N,n,estima,Doma,tx, b, b0=FALSE) 
                        Big       Medium        Small
Estimation     1.038589e+05 4.928816e+05 450643.29412
Standard Error 5.593119e+03 7.700646e+03  11138.23637
CVE            5.385303e+00 1.562372e+00      2.47163
> 
> ########### Poststratified common mean model for the 
>   # Employees total in each poststratum ###################
> 
> estima<-Doma*Employees
> model <- E.Beta(N, n, estima, Doma, ck=1,b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- colSums(Domains(Lucy$Level))
> GREG.SI(N,n,estima,Doma,tx, b, b0=FALSE) 
                        Big       Medium        Small
Estimation     12009.062500 58782.891473 81735.686275
Standard Error  1029.924555  1598.975064  2250.287391
CVE                8.576228     2.720137     2.753127
> 
> ########### Poststratified common mean model for the 
>   # Taxes total in each poststratum ###################
> 
> estima<-Doma*Taxes
> model <- E.Beta(N, n, estima, Doma, ck=1, b0=FALSE)
> b <- t(as.matrix(model[1,,]))
> tx <- colSums(Domains(Lucy$Level))
> GREG.SI(N,n,estima,Doma,tx, b, b0=FALSE) 
                      Big       Medium       Small
Estimation     6525.87500 16648.201550 6368.894118
Standard Error  933.82777   565.317252  287.937016
CVE              14.30962     3.395666    4.520989
> 
> 
> 
> 
> cleanEx()

detaching ‘data’, ‘data’, ‘data’, ‘Lucy’

> nameEx("HH")
> ### * HH
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HH
> ### Title: The Hansen-Hurwitz Estimator
> ### Aliases: HH
> ### Keywords: survey
> 
> ### ** Examples
> 
> ############
> ## Example 1
> ############
> # Vector U contains the label of a population of size N=5
> U <- c("Yves", "Ken", "Erik", "Sharon", "Leslie")
> # Vectors y1 and y2 give the values of the variables of interest
> y1<-c(32, 34, 46, 89, 35)
> y2<-c(1,1,1,0,0)
> y3<-cbind(y1,y2)
> # The population size is N=5
> N <- length(U)
> # The sample size is m=2
> m <- 2
> # pk is the probability of selection of every single unit
> pk <- c(0.35, 0.225, 0.175, 0.125, 0.125)
> # Selection of a random sample with replacement
> sam <- sample(5,2, replace=TRUE, prob=pk)
> # The selected sample is
> U[sam]
[1] "Yves" "Ken" 
> # The values of the variables of interest for the units in the sample
> y1[sam]
[1] 32 34
> y2[sam]
[1] 1 1
> y3[sam,]
     y1 y2
[1,] 32  1
[2,] 34  1
> # The Hansen-Hurwitz estimator
> HH(y1[sam],pk[sam])
                       y
Estimation     121.26984
Standard Error  29.84127
CVE             24.60733
> HH(y2[sam],pk[sam])
                        y
Estimation      3.6507937
Standard Error  0.7936508
CVE            21.7391304
> HH(y3[sam,],pk[sam])
                      y1         y2
Estimation     121.26984  3.6507937
Standard Error  29.84127  0.7936508
CVE             24.60733 21.7391304
> 
> 
> ############
> ## Example 2
> ############
> # Uses the Lucy data to draw a simple random sample with replacement
> data(Lucy)
> attach(Lucy)
> 
> N <- dim(Lucy)[1]
> m <- 400
> sam <- sample(N,m,replace=TRUE)
> # The vector of selection probabilities of units in the sample
> pk <- rep(1/N,m)
> # The information about the units in the sample is stored in an object called data
> data <- Lucy[sam,]
> attach(data)
The following objects are masked from Lucy:

    Employees, ID, Income, Level, SPAM, Taxes, Ubication, Zone

> names(data)
[1] "ID"        "Ubication" "Level"     "Zone"      "Income"    "Employees"
[7] "Taxes"     "SPAM"     
> # The variables of interest are: Income, Employees and Taxes
> # This information is stored in a data frame called estima
> estima <- data.frame(Income, Employees, Taxes)
> HH(estima, pk)
                     Income    Employees        Taxes
Estimation     1.004235e+06 1.496002e+05 26966.980000
Standard Error 3.128381e+04 3.715376e+03  1779.232304
CVE            3.115187e+00 2.483536e+00     6.597818
> 
> ################################################################
> ## Example 3 HH is unbiased for with replacement sampling designs
> ################################################################
> 
> # Vector U contains the label of a population of size N=5
> U <- c("Yves", "Ken", "Erik", "Sharon", "Leslie")
> # Vector y1 and y2 are the values of the variables of interest
> y<-c(32, 34, 46, 89, 35)
> # The population size is N=5
> N <- length(U)
> # The sample size is m=2
> m <- 2
> # pk is the probability of selection of every single unit
> pk <- c(0.35, 0.225, 0.175, 0.125, 0.125)
> # p is the probability of selection of every possible sample
> p <- p.WR(N,m,pk)
> p
 [1] 0.122500 0.157500 0.122500 0.087500 0.087500 0.050625 0.078750 0.056250
 [9] 0.056250 0.030625 0.043750 0.043750 0.015625 0.031250 0.015625
> sum(p)
[1] 1
> # The sample membership matrix for random size without replacement sampling designs
> Ind <- nk(N,m)
> Ind
      [,1] [,2] [,3] [,4] [,5]
 [1,]    2    0    0    0    0
 [2,]    1    1    0    0    0
 [3,]    1    0    1    0    0
 [4,]    1    0    0    1    0
 [5,]    1    0    0    0    1
 [6,]    0    2    0    0    0
 [7,]    0    1    1    0    0
 [8,]    0    1    0    1    0
 [9,]    0    1    0    0    1
[10,]    0    0    2    0    0
[11,]    0    0    1    1    0
[12,]    0    0    1    0    1
[13,]    0    0    0    2    0
[14,]    0    0    0    1    1
[15,]    0    0    0    0    2
> # The support with the values of the elements
> Qy <- SupportWR(N,m, ID=y)                 
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpIvC5ri/R.INSTALL41c01a05689f/TeachingSampling/R/SupportWR.r#32: 
 --- if/while statement is in package --- 
TeachingSampling
 --- call (currently evaluated) --- 
SupportWR(N, m, ID = y)
 --- R stacktrace ---
where 1: SupportWR(N, m, ID = y)

 --- value of length: 5 type: logical ---
[1] FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(N, m, ID=FALSE){
S=0
a=rep(1,m)
P1<-a
S=S+1
k=m
while(k>0){
while(a[k]<N){
a[k]=a[k]+1
P1<-rbind(P1,a)
S=S+1
}
if(k>1)
k=k-1
if(a[k]<N){
a[k]=a[k]+1
k1=k+1
a[k1:m]=a[k]
P1<-rbind(P1,a)
S=S+1
k=m
}
else
if(k==1)
k=0
}

nr <- choose(N+m-1,m)
P1 <- matrix(P1, nrow=nr)
sam <- matrix(ID[P1], nrow=nr)

if (ID==FALSE) {return(P1)}
else {return(sam)}
}
<bytecode: 0x6aea6d8>
<environment: namespace:TeachingSampling>
 --- function (body) search ---
Function SupportWR in namespace TeachingSampling has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
