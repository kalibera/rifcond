
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "colourvision"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('colourvision')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CTTKhexagon")
> ### * CTTKhexagon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTTKhexagon
> ### Title: Chittka (1992) colour hexagon
> ### Aliases: CTTKhexagon
> 
> ### ** Examples
> 
> ##Honeybee photoreceptor sensitivity curves
> data("bee")
> 
> ##Grey background:
> ## with 7 percent reflectance from 300 to 700nm:
> Rb <- data.frame(300:700, rep(7, length(300:700)))
> 
> ## Read CIE D65 standard illuminant already converted to quantum flux:
> data("D65")
> 
> ##Reflectance data
> ## with a sigmoid spectrum and midpoint at 500nm and 550 nm
> R1<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
> R2<-logistic(x=seq(300,700,1), x0=550, L=50, k=0.04)
> R<-cbind(R1, R2[,2])
> 
> ## Run colour vision model:
> model<-CTTKmodel(photo="tri", R=R, I=D65, Rb=Rb,
+ C=bee)
> 
> ##plot data in the colour space
> CTTKhexagon(x=model[,"X1"], y=model[,"X2"])
> 
> 
> 
> cleanEx()
> nameEx("CTTKhexagon3D")
> ### * CTTKhexagon3D
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTTKhexagon3D
> ### Title: Chittka (1992) colour space for tetrachromatic animals.
> ### Aliases: CTTKhexagon3D
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(rgl)
> ##D CTTKhexagon3D(x=0,y=0,z=0)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("CTTKmodel")
> ### * CTTKmodel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CTTKmodel
> ### Title: Chittka (1992) colour vision model
> ### Aliases: CTTKmodel
> 
> ### ** Examples
> 
> ##Photoreceptor sensitivity curves
> ##with lambda max at 350nm, 450nm and 550nm:
> C<-photor(lambda.max=c(350,450,550))
> 
> ## Grey background
> ## with 10 percent reflectance from 300 to 700nm:
> Rb <- data.frame(300:700, rep(10, length(300:700)))
> 
> ## Read CIE D65 standard illuminant
> data("D65")
> 
> ## Reflectance data
> ## with a sigmoid spectrum and midpoint at 500nm
> R<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
> 
> ## Run model 
> model<-CTTKmodel(photo=3, R=R, I=D65,
+     Rb=Rb, C=C)
>  
> #plot   
> plot(model)
> 
> 
> 
> cleanEx()
> nameEx("D65")
> ### * D65
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: D65
> ### Title: CIE Standard Illuminant D65 in quantum flux (umol/m2/s)
> ### Aliases: D65
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("D65")
> plot(D65, type="l")
> 
> 
> 
> cleanEx()
> nameEx("EMline")
> ### * EMline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EMline
> ### Title: Endler and Mielke (2005) 1-D colour space
> ### Aliases: EMline
> 
> ### ** Examples
> 
> EMline(x=0.1, pch=16, col="red")
> 
> 
> 
> cleanEx()
> nameEx("EMmodel")
> ### * EMmodel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EMmodel
> ### Title: Endler and Mielke (2005) colour vision model
> ### Aliases: EMmodel
> 
> ### ** Examples
> 
> ##Photoreceptor sensitivity curves
> ##with lambda max at 350nm, 450nm and 550nm:
> C<-photor(lambda.max=c(350,450,550))
> 
> ##Gray background
> ##with 7 percent reflectance from 300 to 700nm:
> Rb <- data.frame(300:700, rep(7, length(300:700)))
> 
> ## Read CIE D65 standard illuminant
> data("D65")
> 
> ##Reflectance data
> ## with a sigmoid spectrum and midpoint at 500nm and 550 nm
> R1<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
> R2<-logistic(x=seq(300,700,1), x0=550, L=50, k=0.04)
> R<-cbind(R1, R2[,2])
> R[,2]<-R[,2]+10
> R[,3]<-R[,3]+10
> 
> ## Run model 
> model<-EMmodel(photo=3, type="edge",
+        R=R, I=D65, Rb=Rb, C=C)
> 
> plot(model)
> 
> 
> 
> cleanEx()
> nameEx("EMtetrahedron")
> ### * EMtetrahedron
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EMtetrahedron
> ### Title: Endler and Mielke (2005) tetrahedron colour space
> ### Aliases: EMtetrahedron
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(rgl)
> ##D EMtetrahedron(x=0,y=0,z=0)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("EMtriangle")
> ### * EMtriangle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EMtriangle
> ### Title: Endler and Mielke (2005) triangle colour space
> ### Aliases: EMtriangle
> 
> ### ** Examples
> 
> EMtriangle(x=0,y=0, pch=16, col="red")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpZ4ri1G/R.INSTALL247a40347854/colourvision/R/colourvision_package.R#929: 
 --- if/while statement is in package --- 
colourvision
 --- call (currently evaluated) --- 
EMtriangle(x = 0, y = 0, pch = 16, col = "red")
 --- R stacktrace ---
where 1: EMtriangle(x = 0, y = 0, pch = 16, col = "red")

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function (currently evaluated)--- 
function (x, y, type=c("length","edge"), vnames=c("u","s","m"),
                        ylim=c(-0.9,0.9),
                        xlim=c(-0.9,0.9),
                        pch=16, bty="n",yaxt="n",xaxt="n",
                        col="black", asp=1, ann=FALSE, vectors=FALSE, ...) {
  
  graphics::plot(x=x,y=y, pch=pch, bty=bty,yaxt=yaxt,xaxt=xaxt, col=col,
       ylim=ylim, xlim=xlim, asp=asp, ann=ann, ...)

  
  if (type=="length") {
  u<-c(-0.6495191, -0.3750000)
  s<-c(0.6495191, -0.3750000)
  m<-c(0.00, 0.75)
  }
  if (type=="edge") {
    u<-c(-0.6123724, -0.3535534)
    s<-c(0.6123724, -0.3535534)
    m<-c(0.00, 0.7071068)
  }
    
  if (vectors == TRUE) {
    arrows(x0=0,y0=0,x1=u[[1]],y1=u[[2]], length = 0.10)
    arrows(x0=0,y0=0,x1=s[[1]],y1=s[[2]], length = 0.10)
    arrows(x0=0,y0=0,x1=m[[1]],y1=m[[2]], length = 0.10)
  }
  
    graphics::polygon(x=c(u[[1]],s[[1]],m[[1]]),
                      y=c(u[[2]],s[[2]],m[[2]]))
    
    graphics::text(x=u[[1]],
                 y=u[[2]],
                 labels = vnames[[1]],
                 pos=1)
    graphics::text(x=s[[1]],
                 y=s[[2]],
                 labels = vnames[[2]],
                 pos=1)
    graphics::text(x=m[[1]],
                 y=m[[2]],
                 labels = vnames[[3]],
                 pos=3)
}
<bytecode: 0x10729b00>
<environment: namespace:colourvision>
 --- function (body) search ---
Function EMtriangle in namespace colourvision has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
