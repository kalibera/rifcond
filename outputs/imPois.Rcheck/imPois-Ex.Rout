
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "imPois"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('imPois')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("iprior")
> ### * iprior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iprior
> ### Title: Characterizing Imprecise Prior
> ### Aliases: iprior
> 
> ### ** Examples
> 
> ## 2-dims (xi2=0, xi1, xi0)
> lc0 <- list(lhs=rbind(diag(2), -diag(2)), rhs=c(0,0,-1,-1))
> op <- iprior(ui=rbind(diag(2), -diag(2)), ci=c(0,0,-1,-1)) 
> op <- iprior(ui=rbind(c(1,0),c(0,1),c(-1,-1)), ci=c(0,0,-5)) 
> op <- iprior(ui=rbind(c(1,0),c(0,1),c(0,-1),c(1,1),c(-2,-1)), 
+              ci=c(1,2,-8,5,-14)) # (3,8),(1,8), (1,4),(3,2)(6,2)
> 
> ## 3-dimes (xi2, xi1, xi0)
> op <- iprior(ui=rbind(c(1,0,0), c(-1,0,0), c(0,1,0), c(0,-1,0), c(0,0,1)), 
+              ci=c(-0.5, -1, -2, -2, 0))
> op <- iprior(ui=rbind(c(1,0), c(-1,0), c(0,1), c(0,-1)), 
+              ci=c(0.5, -1, -2, -2))
> lc0 <- cbind(rbind(c(1,0,0), c(-1,0,0), c(0,1,0), c(0,-1,0), c(0,0,1), 
+              c(0,0,-1)), c(0.5, -1, -2, -2,0,-1))
> iprior(pmat=lc0)
$vtx
   d1 d2 d3   d4
p1  1  0  0  0.5
p2 -1  0  0 -1.0
p3  0  1  0 -2.0
p4  0 -1  0 -2.0
p5  0  0  1  0.0
p6  0  0 -1 -1.0

attr(,"class")
[1] "iprior" "impinf"
> lc0 <- rbind(c(-2,1,0), c(2,1,0), c(-2,0.5,0), c(2,0.5,0))
> lc0 <- rbind(c(1,2,0), c(1,-2,0), c(0.5,-2,0), c(0.5,2,0)) 
> iprior(pmat=lc0)
$vtx
    d1 d2 d3
p1 1.0  2  0
p2 1.0 -2  0
p3 0.5 -2  0
p4 0.5  2  0

attr(,"class")
[1] "iprior" "impinf"
> 
> 
> 
> 
> cleanEx()
> nameEx("update")
> ### * update
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update.impinf
> ### Title: Applying Bayes Rule
> ### Aliases: update.impinf update2.impinf
> 
> ### ** Examples
> 
> 
> # 2-dimensions
> lc0 <- list(lhs=rbind(diag(2), -diag(2)), rhs=c(0,0,-1,-1))
> op <- iprior(ui=rbind(diag(2), -diag(2)), ci=c(0,0,-1,-1)) 
> op <- iprior(ui=rbind(c(1,0),c(0,1),c(-1,-1)), ci=c(0,0,-5)) 
> op <- iprior(ui=rbind(c(1,0),c(0,1),c(0,-1),c(1,1),c(-2,-1)), 
+              ci=c(1,2,-8,5,-14)) # (3,8),(1,8), (1,4),(3,2)(6,2)
> op1 <- update(op, y=NULL)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmprhAdc2/R.INSTALL2ed439036107/imPois/R/imTools.R#155: 
 --- if/while statement is in package --- 
imPois
 --- call (currently evaluated) --- 
FUN(newX[, i], ...)
 --- R stacktrace ---
where 1: FUN(newX[, i], ...)
where 2 at /var/scratch2/tomas/tmp/RtmprhAdc2/R.INSTALL2ed439036107/imPois/R/imTools.R#150: apply(vtx, 1, function(x) {
    if (length(x) == 2) {
        if (wrt == "canonical") {
            tryCatch(et.pdf(y = y, pars = c(0, x[1], x[2])), 
                error = function(e) {
                  robj <- list(y = y, pars = c(0, x[1], x[2]), 
                    pars1 = c(0, x[1] + sum(y), x[2] + length(y)), 
                    value = NA)
                  return(robj)
                })
        }
        else if (wrt == "mean") {
            tryCatch(em.pdf(y = y, pars = c(0, x[1], x[2])), 
                error = function(e) {
                  robj <- list(y = y, pars = c(0, x[1], x[2]), 
                    pars1 = c(0, x[1] + sum(y), x[2] + length(y)), 
                    value = NA)
                  return(robj)
                })
        }
    }
    else if (length(x) == 3) {
        if (wrt == "canonical") {
            tryCatch(et.pdf(y = y, pars = c(x[1], x[2], x[3])), 
                error = function(e) {
                  robj <- list(y = y, pars = c(x[1], x[2], x[3]), 
                    pars1 = c(x[1], x[2] + sum(y), x[3] + length(y)), 
                    value = NA)
                  return(robj)
                })
        }
        else if (wrt == "mean") {
            tryCatch(em.pdf(y = y, pars = c(x[1], x[2], x[3])), 
                error = function(e) {
                  robj <- list(y = y, pars = c(x[1], x[2], x[3]), 
                    pars1 = c(x[1], x[2] + sum(y), x[3] + length(y)), 
                    value = NA)
                  return(robj)
                })
        }
    }
})
where 3: update.impinf(op, y = NULL)
where 4: update(op, y = NULL)

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function (currently evaluated)--- 
function(x){
	# TODO: optimize code here in terms of 'pars' and 'pars1'
		
		if (length(x) == 2) {  # TODO: iprior <- "lgamma"

			if (wrt == "canonical") {
			
				tryCatch(et.pdf(y=y, pars=c(0, x[1],x[2])), 
					error=function(e) {
						robj <- list(y=y, pars=c(0, x[1],x[2]), pars1=c(0, x[1]+sum(y),x[2]+length(y)), value=NA)
						return(robj)
						}) 

			} else if (wrt == "mean") { 
				
				tryCatch(em.pdf(y=y, pars=c(0, x[1],x[2])), 
					error=function(e) {
			 			robj <- list(y=y, pars=c(0, x[1],x[2]), pars1=c(0, x[1]+sum(y),x[2]+length(y)), value=NA)
						return(robj)
			 		}) 

			}

		} else if (length(x) == 3) {  # TODO: iprior <- "normal"

			if (wrt == "canonical") { 

				tryCatch(et.pdf(y=y, pars=c(x[1],x[2],x[3])), 
					error=function(e) {
						robj <- list(y=y, pars=c(x[1],x[2],x[3]), pars1=c(x[1],x[2]+sum(y),x[3]+length(y)), value=NA)
						return(robj)
					} ) 

			} else if (wrt == "mean") { 
				tryCatch(em.pdf(y=y, pars=c(x[1],x[2],x[3])), 
					error=function(e) {
						robj <- list(y=y, pars=c(x[1],x[2],x[3]), pars1=c(x[1],x[2]+sum(y),x[3]+length(y)), value=NA)
					return(robj)
					} ) 
	
			}

		}
	
	}
<environment: 0x6f332d0>
 --- function (body) search ---
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
