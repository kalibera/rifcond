 --- srcref --- 
 at /tmp/Rtmpttjrj2/R.INSTALL2d6d75ce35902/biovizBase/R/crunch-method.R#295: 
 --- call (function) --- 
.local(obj, ...)
 --- stacktrace ---
where 1: .local(obj, ...)
where 2 at /tmp/Rtmpttjrj2/R.INSTALL2d6d75ce35902/biovizBase/R/crunch-method.R#1: crunch(edb, which = gr)
where 3: crunch(edb, which = gr)

 --- value of length: 45 type: logical ---
                 1                 10                 11                 12 
             FALSE              FALSE              FALSE              FALSE 
                13                 14                 15                 16 
             FALSE              FALSE              FALSE              FALSE 
                17       17_ctg5_hap1 17_gl000205_random                 18 
             FALSE              FALSE              FALSE              FALSE 
                19 19_gl000209_random  1_gl000191_random                  2 
             FALSE              FALSE              FALSE              FALSE 
                20                 21                 22                  3 
             FALSE              FALSE              FALSE              FALSE 
                 4        4_ctg9_hap1  4_gl000194_random                  5 
             FALSE              FALSE              FALSE              FALSE 
                 6         6_apd_hap1         6_cox_hap2         6_dbb_hap3 
             FALSE              FALSE              FALSE              FALSE 
       6_mann_hap4         6_mcf_hap5         6_qbl_hap6        6_ssto_hap7 
             FALSE              FALSE              FALSE              FALSE 
                 7                  8                  9        Un_gl000211 
             FALSE              FALSE              FALSE              FALSE 
       Un_gl000212        Un_gl000218        Un_gl000219        Un_gl000220 
             FALSE              FALSE              FALSE              FALSE 
       Un_gl000222        Un_gl000223        Un_gl000228                  X 
             FALSE              FALSE              FALSE              FALSE 
                 Y 
             FALSE 
 --- function --- 
function(obj, which,
                                      columns = c("tx_id",
                                                  "gene_name",
                                                  "gene_id"),
                                      type = c("all", "reduce"),
                                      truncate.gaps = FALSE,
                                      truncate.fun = NULL,
                                      ratio = 0.0025){
    type <- match.arg(type)
    ## which can be a single (!) GRanges an object extending BasicFilter or
    ## a list of BasicFilter objects.
    if(is(which, "list")){
        ## Has to be a list of objects extending BasicFilter.
        if(!all(vapply(which, is, logical(1L), "BasicFilter"))){
            stop("Which should be either a GRanges object, an object extending ",
                 "BasicFilter or a list of objects extending BasicFilter!")
        }
        exFilter <- which
    }else{
        if(!is(which, "GenomicRanges") & !is(which, "BasicFilter"))
                stop("Which should be either a GRanges object, an object extending ",
                     "BasicFilter or a list of objects extending BasicFilter!")
    }
    if(is(which, "GenomicRanges")){
        if(length(which) == 0){
            message("No transcripts found at this region.")
            return(GRanges())
        }
        if(length(which) > 1)
            stop("'which' has to be a single GRanges object.")
        if(!is.na(genome(which))){
            if(unname(genome(which)) != unique(unname(genome(obj))))
                stop("Genome versions do not fit! Argument 'which' has ",
                     unname(genome(which)), " argument 'obj' ",
                     unname(unique(genome(which))), "!")
        }
        ## Check if we've got the seqnames.
        if(!(seqlevels(which) %in% seqlevels(obj)))
            stop(seqlevels(which), " does not match any seqlevel in argument 'obj'!")
        exFilter <- GRangesFilter(which, condition="overlapping")
    }
    if(is(which, "BasicFilter"))
        exFilter <- which
    ## Check input argument 'columns':
    notAvailable <- !(columns %in% listColumns(obj))
    if(any(notAvailable)){
        if(all(notAvailable))
            stop("None of the columns specified by arguments 'columns' are available!",
                 " Allowed values are:", paste(listColumns(obj), collapse=", "), ".")
        ## Reducing to those which are allowed...
        warning("Columns ", paste(columns[notAvailable], collapse=", "), " are not",
                " available in the database and have been removed.")
        columns <- columns[!notAvailable]
    }
    ## Approach:
    ## 1) Get all exons in that region and retrieve also the tx_coding_seq_start.
    ## We're fetching the data just once and calculating everything we need from that,
    ## i.e. cds, utr and introns.
    message("Fetching data...", appendLF=FALSE)
    requiredCols <- c("tx_cds_seq_start", "tx_cds_seq_end", "exon_id", "tx_id")
    ## Forcing tx_id on the columns:
    columns <- unique(c(columns, "tx_id"))
    ## In order to solve also the "overlapping" condition I have first to fetch the transcripts
    ## in the region and their exons. That way we get, for a GRangesFilter or GRanges all
    ## transcripts that have an exon or an intron at the specified region.
    txInRegion <- transcripts(obj, filter=exFilter)
    if(length(txInRegion) == 0){
        message("No transcripts found at this region.")
        return(GRanges())
    }
    regExons <- exons(obj, filter=TxidFilter(unique(txInRegion$tx_id)),
                      columns=unique(c(requiredCols, columns)))
    ## Simple sanitizing: check if what we got is on the same chromosome!
    if(length(unique(as.character(seqnames(regExons)))) > 1)
        stop("Got features from different chromosomes! Please adjust argument",
             " 'which' in order to fetch only features from a single chromosome.")
    message("OK")
    if(length(regExons) > 0){
        message("Parsing exons...", appendLF=FALSE)
        ## Get an DataFrame that we can use as mcols for the GRanges:
        mDf <- unique(mcols(regExons)[, columns])
        ## Actually, with this I have all I need.
        ## 2) Define introns.
        regExonsList <- split(regExons, regExons$tx_id)
        message("OK\nDefining introns...", appendLF=FALSE)
        ints <- gaps(ranges(regExonsList))
        ints <- unlist(ints)
        if(length(ints) > 0){
            regIntrons <- GRanges(seqnames=unique(seqnames(regExons)), ranges=ints,
                                  strand="*",
                                  mDf[match(names(ints), mDf$tx_id), ])
            regIntrons$type <- "gap"
        }else{
            regIntrons <- GRanges()
        }
        message("OK\nDefining UTRs...", appendLF=FALSE)
        ## 3) Define UTRs.
        codingTx <- regExons[!is.na(regExons$tx_cds_seq_end)]
        if(length(codingTx) > 0){
            ## Define the whole CDS region per tx
            codingReg <- GRanges(seqnames=seqnames(codingTx),
                                 ranges=IRanges(codingTx$tx_cds_seq_start,
                                                codingTx$tx_cds_seq_end),
                                 strand=strand(codingTx),
                                 tx_id=codingTx$tx_id)
            codingTx <- split(codingTx, codingTx$tx_id)
            ## Subset to one CDS region per tx and split
            codingReg <- codingReg[match(names(codingTx), codingReg$tx_id)]
            codingReg <- split(codingReg, codingReg$tx_id)
            regUTRs <- unlist(setdiff(codingTx, codingReg))
            mcols(regUTRs) <- mDf[match(names(regUTRs), mDf$tx_id), ]
            regUTRs$type <- "utr"
            message("OK\nDefining CDS...", appendLF=FALSE)
            ## 4) Define CDS
            regCDSs <- unlist(intersect(codingTx, codingReg))
            mcols(regCDSs) <- mDf[match(names(regCDSs), mDf$tx_id), ]
            regCDSs$type <- "cds"
        }else{
            regUTRs <- GRanges()
            regCDSs <- GRanges()
        }
        message("OK\n", appendLF=FALSE)
        regExons <- regExons[, columns]
        regExons$type <- "exon"
        ensRes <- c(regExons, regIntrons, regUTRs, regCDSs)
    }else{
        warning("Did not find any transcript at the specified region!")
        return(GRanges())
    }
    return(reduceNtruncate(ensRes, type=type, truncate.gaps=truncate.gaps,
                           truncate.fun=truncate.fun, ratio=ratio))

}
<environment: namespace:biovizBase>
 --- function (body) search ---
