
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # test.ISOpureS2.model_optimize.theta_functions.R #################################################
> # Testing script for functions needed in the optimilzation of mm in Step 2
> # Test theta separately since it takes a while...
> #
> # The functions are of the form ISOpureS2.model_optimize.---
> # (theta)
> #   theta_loglikelihood
> #   theta_deriv_loglikelihood
> 
> # LOAD DATA #######################################################################################
> # load library 
> library(ISOpureR);
> 
> # load the data from that path
> data.path <-  paste0(file.path(system.file(package = "ISOpureR"), 'extdata', 'Beer'));  
> load(file.path(data.path , 'beer.tumordata.250.transcripts.30.patients.RData'));
> load(file.path(data.path, 'beer.ISOpureS2model.250.transcripts.30.patients.RData'));
> 
> # the normaldata and tumourdata should be matrices
> beer.tumordata <- as.matrix(beer.tumordata);
> 
> # TEST THETA FUNCTIONS ############################################################################
> 
> # inputs needed for theta functions
> # initial value of theta (this is testing just patient 1)
> ww <- t(ISOpureS2model$theta_weights[1, ,drop=F])
> 
> # test theta functions (just for patient 1, that's the third entry)
> ISOpureS2.model_optimize.theta.theta_loglikelihood(ww, beer.tumordata, 1, ISOpureS2model);
[1] 1499714
> ISOpureS2.model_optimize.theta.theta_deriv_loglikelihood(ww, beer.tumordata, 1, ISOpureS2model);
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp0iMCP1/R.INSTALL58eb9a39036/ISOpureR/R/ISOpureS2.model_optimize.theta.theta_deriv_loglikelihood.R#76: 
 --- if/while statement is in package --- 
ISOpureR
 --- call (currently evaluated) --- 
ISOpureS2.model_optimize.theta.theta_deriv_loglikelihood(ww, 
    beer.tumordata, 1, ISOpureS2model)
 --- R stacktrace ---
where 1: ISOpureS2.model_optimize.theta.theta_deriv_loglikelihood(ww, 
    beer.tumordata, 1, ISOpureS2model)

 --- value of length: 10 type: logical ---
       [,1]
 [1,] FALSE
 [2,] FALSE
 [3,] FALSE
 [4,] FALSE
 [5,] FALSE
 [6,] FALSE
 [7,] FALSE
 [8,] FALSE
 [9,] FALSE
[10,] FALSE
 --- function (currently evaluated)--- 
function(ww, tumordata, dd, model) {

	# K = number of normal profiles + 1 
	K <- ncol(model$theta); 
	# G = number of genes
	G <- ncol(model$log_BBtranspose); 
	
	# theta for patient dd, omitting last column
	# changed the definition of 'remaining' to match Gerald's for numerical stability
	# remaining <- 1-model$theta[dd, K]; 
	remaining <- sum(model$theta[dd,1:(K-1)]);

	ww <- matrix(ww, nrow=1, ncol=length(ww));
	expww <- exp(ww); 
	theta <- remaining*expww / sum(expww);
	
	# all the thetas (including last column which contains tumour purities, i.e.
	# the fraction of cancer cells in the tumour)
	alltheta <- cbind(theta, model$theta[dd,K]);
	
	log_all_rates <- rbind(model$log_BBtranspose, model$log_cc[dd,]);
	log_P_t_given_theta <- ISOpure.util.logsum(t(ISOpure.util.repmat(ISOpure.util.matlab_log(alltheta),G, 1)) + log_all_rates,1);

	# This part is the same as for ISOpureS2.model_optimize.theta.theta_deriv_loglikelihood.R from step 1, except that the last entry in theta is ommitted from the calculation.
	# the first term is d/dtheta log p(theta_d | vv) = log Dirichlet( theta_d | vv ) = d/dtheta (vv-1) log(theta), ignoring the vv term
	# the second term is d/dtheta log p(t_d | B, theta_d, t_d) = d/dtheta log Multinomial (t_d | alpha_d*mm + sum(theta_d_k*B_d_k) )
	dLdtheta <- (model$vv[1:(length(model$vv)-1)]-1)/theta + rowSums(exp(log_all_rates[1:(nrow(log_all_rates)-1),] - ISOpure.util.repmat(log_P_t_given_theta, K-1, 1)) * t(ISOpure.util.repmat(tumordata[,dd],1,K-1)));

	# The dtheta/dw term is similar to the domega/dww term in ISOpureS2.model_optimize.omega.omega_deriv_loglikelihood, where this term is explained in more detail.
	# change of variables
	dthetadw <- -(t(expww)%*%expww)/(sum(expww)^2);

	# code for subdiag from "IShouldBuyABoat" on stackoverflow, accessed Jan 2014: 
	# http://stackoverflow.com/questions/7745363/r-equivalent-to-diagx-k-in-matlab
	subdiag <- function(vec, size, offset=0){ 
	  M <- matrix(0, size, size)
	  M[row(M)-offset == col(M)] <- vec
	  return(M)
	}

	# note offset for subdiag is 0, so the terms expww/sum(expww) are on the diagonal
	dthetadw <- dthetadw + subdiag(expww/sum(expww), length(ww));
	dthetadw <- dthetadw*remaining;
	deriv_loglikelihood <- t(dLdtheta%*%dthetadw);	


	# set the first derivative to be zero, to set the scale of the w's
	deriv_loglikelihood[1] = 0;

	# Rasmussen's conjugate gradient method minimizes, so we take the negative of the derivative
	deriv_loglikelihood <- -deriv_loglikelihood;

	if (is.finite(deriv_loglikelihood)==FALSE) {
		stop('something non-finite returned from ISOpure.model_optimize.cg_code.rminimize in the theta derivative');
	}

	return(as.matrix(deriv_loglikelihood));
}
<environment: namespace:ISOpureR>
 --- function (body) search ---
Function ISOpureS2.model_optimize.theta.theta_deriv_loglikelihood in namespace ISOpureR has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
