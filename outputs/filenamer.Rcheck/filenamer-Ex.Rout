
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "filenamer"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('filenamer')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.character.filename")
> ### * as.character.filename
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.filename
> ### Title: Coerce a character to a filename
> ### Aliases: as.character.filename
> 
> ### ** Examples
> 
> x <- "data_post_2011-01-02.txt"
> fn <- as.filename(x)
> print(as.character(fn))
[1] "data_post_2011-01-02.txt"
> 
> 
> 
> 
> cleanEx()
> nameEx("as.filename")
> ### * as.filename
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.filename
> ### Title: Coerce to a filename
> ### Aliases: as.filename as.filename.filename as.filename.character
> 
> ### ** Examples
> 
> fn <- as.filename("data_raw_2011-01-01.txt")
> str(fn)
List of 5
 $ fstem: chr "data"
 $ tag  : chr "raw"
 $ ext  : chr "txt"
 $ date : chr "2011-01-01"
 $ time : logi NA
 - attr(*, "class")= chr "filename"
> 
> 
> 
> 
> cleanEx()
> nameEx("filename")
> ### * filename
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filename
> ### Title: Utilities for managing file names.
> ### Aliases: filename filename-package filename
> 
> ### ** Examples
> 
> # file name is date-time stamped and put in subdirectory by default
> fn <- filename("data", tag="qc", ext="txt")
> print(as.character(fn))
[1] "2018-01-24/data_qc_20180124T161715.txt"
> 
> # disable date-time stamping and subdirectory insertion
> fn2 <- filename("data", tag="qc", date=NA, time=NA, subdir=FALSE)
> print(as.character(fn2))
[1] "data_qc"
> 
> # creating a new file name from an existing one yields a new time stamp
> fn3 <- filename(fn)
> print(as.character(fn3))
[1] "2018-01-24/data_qc_20180124T161715.txt"
> 
> 
> 
> 
> cleanEx()
> nameEx("insert")
> ### * insert
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: insert
> ### Title: Insert tag or extension into a file name
> ### Aliases: insert insert.filename insert.character
> 
> ### ** Examples
> 
> f <- as.filename("data_expr_2014-05-01.tsv")
> 
> # new file name with inserted tags for saving normalized data
> g <- insert(f, tag=c("mod", "norm"))
> print(as.character(g))
[1] "data_expr_mod_norm_2014-05-01.tsv"
> 
> # new file name with inserted extension for saving sorted data
> h <- insert(f, ext="sorted")
> print(as.character(h))
[1] "data_expr_2014-05-01.sorted.tsv"
> 
> # new file name with different extension for saving in different format
> i <- insert(f, ext="csv", replace=TRUE)
> print(as.character(i))
[1] "data_expr_2014-05-01.csv"
> 
> # insert another tag
> j <- insert(g, tag="qc", tag.pos=2)
> print(as.character(j))
[1] "data_expr_qc_mod_norm_2014-05-01.tsv"
> 
> 
> 
> 
> cleanEx()
> nameEx("make_path")
> ### * make_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_path
> ### Title: Create directory structure for a file path
> ### Aliases: make_path make_path.filename make_path.character
> 
> ### ** Examples
> 
> ## Not run: 
> ##D fn <- as.filename("path/to/file.txt")
> ##D make_path(fn)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("set_fdate")
> ### * set_fdate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_fdate
> ### Title: Set date stamp in a file name
> ### Aliases: set_fdate
> 
> ### ** Examples
> 
> x <- "data_norm_2011-01-03.txt"
> print(set_fdate(x, "2011-01-05"))
[1] "data_norm_2011-01-05.txt"
> 
> 
> 
> 
> cleanEx()
> nameEx("set_fext")
> ### * set_fext
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_fext
> ### Title: Set file extension
> ### Aliases: set_fext
> 
> ### ** Examples
> 
> x <- "data_norm_2011-01-03.txt"
> print(set_fext(x, "csv"))
[1] "data_norm_2011-01-03.csv"
> 
> 
> 
> 
> cleanEx()
> nameEx("set_fpath")
> ### * set_fpath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_fpath
> ### Title: Set path in a file name
> ### Aliases: set_fpath
> 
> ### ** Examples
> 
> x <- "path/data_norm.txt"
> print(set_fpath(x, "new_path"))
[1] "new_path/data_norm.txt"
> 
> 
> 
> 
> cleanEx()
> nameEx("set_ftime")
> ### * set_ftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_ftime
> ### Title: Set time stamp in a file name
> ### Aliases: set_ftime
> 
> ### ** Examples
> 
> x <- "data_norm_20110103T093015.txt"
> # change the time to 30 seconds past 2:45 p.m. 
> print(set_ftime(x, "144530"))
[1] "data_norm_20110103T144530.txt"
> # to change the date, time must be specified as well
> print(set_ftime(x, "20110505T101500"))
[1] "data_norm_20110505T101500.txt"
> 
> 
> 
> 
> cleanEx()
> nameEx("tag")
> ### * tag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tag
> ### Title: Insert tag or extension and coerce to character
> ### Aliases: tag
> 
> ### ** Examples
> 
> x <- "data.txt"
> y <- tag(x, "qc")
> print(y)
[1] "data_qc.txt"
> f <- as.filename(x)
> g <- tag(f, "qc")
> print(g)
[1] "data_qc.txt"
> 
> 
> 
> 
> cleanEx()
> nameEx("trim_ext")
> ### * trim_ext
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trim_ext
> ### Title: Trim extensions from a file name
> ### Aliases: trim_ext
> 
> ### ** Examples
> 
> x <- "path/data.txt.gz"
> print(trim_ext(x))
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpmGg6rm/R.INSTALL1c3e70fc1308/filenamer/R/filename.R#205: 
 --- if/while statement is in package --- 
filenamer
 --- call (currently evaluated) --- 
as.filename.character(x)
 --- R stacktrace ---
where 1 at /var/scratch2/tomas/tmp/RtmpmGg6rm/R.INSTALL1c3e70fc1308/filenamer/R/filename.R#125: as.filename.character(x)
where 2 at /var/scratch2/tomas/tmp/RtmpmGg6rm/R.INSTALL1c3e70fc1308/filenamer/R/trim.R#18: as.filename(x)
where 3 at /var/scratch2/tomas/tmp/RtmpmGg6rm/R.INSTALL1c3e70fc1308/filenamer/R/trim.R#28: trim_ext.filename(as.filename(x), n)
where 4 at /var/scratch2/tomas/tmp/RtmpmGg6rm/R.INSTALL1c3e70fc1308/filenamer/R/trim.R#14: trim_ext.character(x)
where 5: trim_ext(x)
where 6: print(trim_ext(x))

 --- value of length: 2 type: logical ---
[1] TRUE TRUE
 --- function (currently evaluated)--- 
function(
  x, tag.char=NULL, ...
) {
	tag.char <- .get_tag_char(tag.char);
	ext.char <- .get_ext_char();

	fn <- filename("");
	fn$date <- NA;
	fn$time <- NA;

	# split path into character vectors
	y <- strsplit(x, .Platform$file.sep, fixed=TRUE)[[1]];
	if (substr(x, nchar(x), nchar(x)) == .Platform$file.sep) {
		# filepath ends with "/": target is a directory (file name is empty)
		fn$path <- y;
		x <- "";
	} else {
		# target is a file
		if (length(y) > 1) {
			fn$path <- y[1:(length(y)-1)];
			# proceed with the last part (file name)
			x <- y[length(y)];
		} else {
			# file name has no filepath
			fn$path <- NULL;
		}
	}

	if (nchar(x) == 0) return(fn);

	# split file name by the tag character
	# x[1] is the file stem
	# of the remaining elements of x, all but the final is a file name tag
	# the last element of x will need to be split further
	x <- strsplit(x, tag.char, fixed=TRUE)[[1]];

	if (length(x) > 1) {
		# tag are found
		fn$fstem <- x[1];
		if (length(x) > 2) {
			# add all but the final tag, which will be added later
			fn$tag <- x[2:(length(x)-1)];
		}
		
	}

	# split the last element of x by the extension character
	# last[1] could be a date stamp, date-time stamp, or a file name tag
	last <- strsplit(x[length(x)], ext.char, fixed=TRUE)[[1]];

	if (.grepl_date(last[1])) {
		# first token matches date format
		fn$date <- last[1];
	} else if (.grepl_datetime(last[1])) {
		# first token matches date-time format
		fn <- .set_fdatetime(fn, last[1]);
	} else if (length(x) == 1) {
		# no tags are found, and first token is neither date nor timestmp: 
		# use token as file name stem
		fn$fstem <- last[1];
	} else {
		# first token is the final tag: append it
		fn$tag <- c(fn$tag, last[1]);
	}

	if (length(last) > 1) {
		# all remaining elements of `last` are extensions
		ext <- last[2:length(last)];
		if (ext != "") {
			fn$ext <- ext;
		}
	}

	fn
}
<bytecode: 0x75db1e8>
<environment: namespace:filenamer>
 --- function (body) search ---
Function as.filename.character in namespace filenamer has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
