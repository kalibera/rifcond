
R Under development (unstable) (2018-01-22 r74151) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mvtnorm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mvtnorm')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Mvnorm")
> ### * Mvnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mvnorm
> ### Title: Multivariate Normal Density and Random Deviates
> ### Aliases: dmvnorm rmvnorm
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> dmvnorm(x=c(0,0))
[1] 0.1591549
> dmvnorm(x=c(0,0), mean=c(1,1))
[1] 0.05854983
> 
> sigma <- matrix(c(4,2,2,3), ncol=2)
> x <- rmvnorm(n=500, mean=c(1,2), sigma=sigma)
> colMeans(x)
[1] 0.9492868 1.9916602
> var(x)
         [,1]     [,2]
[1,] 4.276371 2.105874
[2,] 2.105874 3.186058
> 
> x <- rmvnorm(n=500, mean=c(1,2), sigma=sigma, method="chol")
> colMeans(x)
[1] 0.8724731 1.9804160
> var(x)
         [,1]     [,2]
[1,] 4.804847 2.430442
[2,] 2.430442 3.148344
> 
> plot(x)
> 
> 
> 
> cleanEx()
> nameEx("Mvt")
> ### * Mvt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mvt
> ### Title: The Multivariate t Distribution
> ### Aliases: dmvt rmvt
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> ## basic evaluation
> dmvt(x = c(0,0), sigma = diag(2))
[1] -1.837877
> 
> ## check behavior for df=0 and df=Inf
> x <- c(1.23, 4.56)
> mu <- 1:2
> Sigma <- diag(2)
> x0 <- dmvt(x, delta = mu, sigma = Sigma, df = 0) # default log = TRUE!
> x8 <- dmvt(x, delta = mu, sigma = Sigma, df = Inf) # default log = TRUE!
> xn <- dmvnorm(x, mean = mu, sigma = Sigma, log = TRUE)
> stopifnot(identical(x0, x8), identical(x0, xn))
> 
> ## X ~ t_3(0, diag(2))
> x <- rmvt(100, sigma = diag(2), df = 3) # t_3(0, diag(2)) sample
> plot(x)
> 
> ## X ~ t_3(mu, Sigma)
> n <- 1000
> mu <- 1:2
> Sigma <- matrix(c(4, 2, 2, 3), ncol=2)
> set.seed(271)
> x <- rep(mu, each=n) + rmvt(n, sigma=Sigma, df=3)
> plot(x)
> 
> ## Note that the call rmvt(n, mean=mu, sigma=Sigma, df=3) does *not*
> ## give a valid sample from t_3(mu, Sigma)! [and thus throws an error]
> try(rmvt(n, mean=mu, sigma=Sigma, df=3))
Error in rmvt(n, mean = mu, sigma = Sigma, df = 3) : 
  Providing 'mean' does *not* sample from a multivariate t distribution!
> 
> ## df=Inf correctly samples from a multivariate normal distribution
> set.seed(271)
> x <- rep(mu, each=n) + rmvt(n, sigma=Sigma, df=Inf)
> set.seed(271)
> x. <- rmvnorm(n, mean=mu, sigma=Sigma)
> stopifnot(identical(x, x.))
> 
> 
> 
> cleanEx()
> nameEx("pmvnorm")
> ### * pmvnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pmvnorm
> ### Title: Multivariate Normal Distribution
> ### Aliases: pmvnorm
> ### Keywords: distribution
> 
> ### ** Examples
> 
> 
> n <- 5
> mean <- rep(0, 5)
> lower <- rep(-1, 5)
> upper <- rep(3, 5)
> corr <- diag(5)
> corr[lower.tri(corr)] <- 0.5
> corr[upper.tri(corr)] <- 0.5
> prob <- pmvnorm(lower, upper, mean, corr)
> print(prob)
[1] 0.5800051
attr(,"error")
[1] 0.0002696831
attr(,"msg")
[1] "Normal Completion"
> 
> stopifnot(pmvnorm(lower=-Inf, upper=3, mean=0, sigma=1) == pnorm(3))
> 
> a <- pmvnorm(lower=-Inf,upper=c(.3,.5),mean=c(2,4),diag(2))
> 
> stopifnot(round(a,16) == round(prod(pnorm(c(.3,.5),c(2,4))),16))
> 
> a <- pmvnorm(lower=-Inf,upper=c(.3,.5,1),mean=c(2,4,1),diag(3))
> 
> stopifnot(round(a,16) == round(prod(pnorm(c(.3,.5,1),c(2,4,1))),16))
> 
> # Example from R News paper (original by Genz, 1992):
> 
> m <- 3
> sigma <- diag(3)
> sigma[2,1] <- 3/5
> sigma[3,1] <- 1/3
> sigma[3,2] <- 11/15
> pmvnorm(lower=rep(-Inf, m), upper=c(1,4,2), mean=rep(0, m), corr=sigma)
[1] 0.8279847
attr(,"error")
[1] 2.658133e-07
attr(,"msg")
[1] "Normal Completion"
> 
> # Correlation and Covariance
> 
> a <- pmvnorm(lower=-Inf, upper=c(2,2), sigma = diag(2)*2)
> b <- pmvnorm(lower=-Inf, upper=c(2,2)/sqrt(2), corr=diag(2))
> stopifnot(all.equal(round(a,5) , round(b, 5)))
> 
> 
> 
> 
> cleanEx()
> nameEx("pmvt")
> ### * pmvt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pmvt
> ### Title: Multivariate t Distribution
> ### Aliases: pmvt
> ### Keywords: distribution
> 
> ### ** Examples
> 
> 
> n <- 5
> lower <- -1
> upper <- 3
> df <- 4
> corr <- diag(5)
> corr[lower.tri(corr)] <- 0.5
> delta <- rep(0, 5)
> prob <- pmvt(lower=lower, upper=upper, delta=delta, df=df, corr=corr)
> print(prob)
[1] 0.5063832
attr(,"error")
[1] 0.0002426557
attr(,"msg")
[1] "Normal Completion"
> 
> pmvt(lower=-Inf, upper=3, df = 3, sigma = 1) == pt(3, 3)
upper 
 TRUE 
> 
> # Example from R News paper (original by Edwards and Berry, 1987)
> 
> n <- c(26, 24, 20, 33, 32)
> V <- diag(1/n)
> df <- 130
> C <- c(1,1,1,0,0,-1,0,0,1,0,0,-1,0,0,1,0,0,0,-1,-1,0,0,-1,0,0)
> C <- matrix(C, ncol=5)
> ### scale matrix
> cv <- C %*% V %*% t(C)
> ### correlation matrix
> dv <- t(1/sqrt(diag(cv)))
> cr <- cv * (t(dv) %*% dv)
> delta <- rep(0,5)
> 
> myfct <- function(q, alpha) {
+   lower <- rep(-q, ncol(cv))
+   upper <- rep(q, ncol(cv))
+   pmvt(lower=lower, upper=upper, delta=delta, df=df,
+        corr=cr, abseps=0.0001) - alpha
+ }
> 
> ### uniroot for this simple problem
> round(uniroot(myfct, lower=1, upper=5, alpha=0.95)$root, 3)
[1] 2.561
> 
> # compare pmvt and pmvnorm for large df:
> 
> a <- pmvnorm(lower=-Inf, upper=1, mean=rep(0, 5), corr=diag(5))
> b <- pmvt(lower=-Inf, upper=1, delta=rep(0, 5), df=rep(300,5),
+           corr=diag(5))
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpKgtXXe/R.INSTALL7a3334348897/mvtnorm/R/mvt.R#160: 
 --- if/while statement is in package --- 
mvtnorm
 --- call (currently evaluated) --- 
pmvt(lower = -Inf, upper = 1, delta = rep(0, 5), df = rep(300, 
    5), corr = diag(5))
 --- R stacktrace ---
where 1: pmvt(lower = -Inf, upper = 1, delta = rep(0, 5), df = rep(300, 
    5), corr = diag(5))

 --- value of length: 5 type: logical ---
[1] FALSE FALSE FALSE FALSE FALSE
 --- function (currently evaluated)--- 
function(lower=-Inf, upper=Inf, delta=rep(0, length(lower)),
                 df=1, corr=NULL, sigma=NULL,
                 algorithm = GenzBretz(),
                 type = c("Kshirsagar", "shifted"), ...)
{
    type <- match.arg(type)
    carg <- checkmvArgs(lower=lower, upper=upper, mean=delta, corr=corr,
                        sigma=sigma)
    if (type == "shifted") { # can be handled by integrating over central t
      if(!is.null(carg$corr)){ # using transformed integration bounds
        d <- 1
      } else {
        if(!is.null(carg$sigma)){
          d <- sqrt(diag(carg$sigma))
          carg$corr <- cov2cor(carg$sigma)
        }
      }
      carg$lower <- (carg$lower - carg$mean)/d
      carg$upper <- (carg$upper - carg$mean)/d
      carg$mean <- rep(0, length(carg$mean))
    }

    if (is.null(df))
        stop(sQuote("df"), " not specified")
    if (df < 0) # MH: was any(..)
        stop("cannot compute multivariate t distribution with ",
             sQuote("df"), " < 0")
    if(is.finite(df) && (df != as.integer(df))) # MH: was !isTRUE(all.equal(as.integer(df), df))
        stop(sQuote("df"), " is not an integer")
    if (carg$uni) {
        if (df > 0) # df = Inf is taken care of by pt()
            RET <- list(value = pt(carg$upper, df=df, ncp=carg$mean) -
                                pt(carg$lower, df=df, ncp=carg$mean),
                       error = 0, msg="univariate: using pt")
        else
            RET <- list(value = pnorm(carg$upper, mean = carg$mean) -
                                pnorm(carg$lower, mean=carg$mean),
                       error = 0, msg="univariate: using pnorm")
    } else { # mvt() takes care of df = 0 || df = Inf
        if (!is.null(carg$corr)) {
            RET <- mvt(lower=carg$lower, upper=carg$upper, df=df, corr=carg$corr,
                       delta=carg$mean,  algorithm = algorithm, ...)
        } else { # need to transform integration bounds and delta
            d <- sqrt(diag(carg$sigma))
            lower <- carg$lower/d
            upper <- carg$upper/d
            corr <- cov2cor(carg$sigma)
            RET <- mvt(lower=lower, upper=upper, df=df, corr=corr,
                       delta=carg$mean/d, algorithm = algorithm, ...)
        }
    }
    attr(RET$value, "error") <- RET$error
    attr(RET$value, "msg") <- RET$msg
    return(RET$value)
}
<bytecode: 0x4fea608>
<environment: namespace:mvtnorm>
 --- function (body) search ---
Function pmvt in namespace mvtnorm has this body.
 ----------- END FAILURE REPORT -------------- 
Fatal error: the condition has length > 1 and only the first element will be used XXXXXX
