 --- srcref --- 
 at /tmp/RtmpMx7UJ2/R.INSTALLb73334f304d2/quantmod/R/Defaults.R#8: 
 --- call (function) --- 
importDefaults("getSymbols")
 --- stacktrace ---
where 1 at /tmp/RtmpMx7UJ2/R.INSTALLb73334f304d2/quantmod/R/getSymbols.R#26: importDefaults("getSymbols")
where 2: quantmod::getSymbols(Symbols = ticker, src = src, from = first.date, 
    to = last.date, auto.assign = F)
where 3: doTryCatch(return(expr), name, parentenv, handler)
where 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 5: tryCatchList(expr, classes, parentenv, handlers)
where 6: tryCatch(expr, error = function(e) {
    call <- conditionCall(e)
    if (!is.null(call)) {
        if (identical(call[[1L]], quote(doTryCatch))) 
            call <- sys.call(-4L)
        dcall <- deparse(call)[1L]
        prefix <- paste("Error in", dcall, ": ")
        LONG <- 75L
        msg <- conditionMessage(e)
        sm <- strsplit(msg, "\n")[[1L]]
        w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
        if (is.na(w)) 
            w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], 
                type = "b")
        if (w > LONG) 
            prefix <- paste0(prefix, "\n  ")
    }
    else prefix <- "Error : "
    msg <- paste0(prefix, conditionMessage(e), "\n")
    .Internal(seterrmessage(msg[1L]))
    if (!silent && identical(getOption("show.error.messages"), 
        TRUE)) {
        cat(msg, file = outFile)
        .Internal(printDeferredWarnings())
    }
    invisible(structure(msg, class = "try-error", condition = e))
})
where 7 at /tmp/RtmpMgyUa9/R.INSTALLfb1c657708a2/BatchGetSymbols/R/myGetSymbols.R#38: try(temp.df <- quantmod::getSymbols(Symbols = ticker, src = src, 
    from = first.date, to = last.date, auto.assign = F), silent = T)
where 8: withCallingHandlers(expr, warning = function(w) invokeRestart("muffleWarning"))
where 9 at /tmp/RtmpMgyUa9/R.INSTALLfb1c657708a2/BatchGetSymbols/R/myGetSymbols.R#37: suppressWarnings({
    try(temp.df <- quantmod::getSymbols(Symbols = ticker, src = src, 
        from = first.date, to = last.date, auto.assign = F), 
        silent = T)
})
where 10: withCallingHandlers(expr, message = function(c) invokeRestart("muffleMessage"))
where 11 at /tmp/RtmpMgyUa9/R.INSTALLfb1c657708a2/BatchGetSymbols/R/myGetSymbols.R#36: suppressMessages({
    suppressWarnings({
        try(temp.df <- quantmod::getSymbols(Symbols = ticker, 
            src = src, from = first.date, to = last.date, auto.assign = F), 
            silent = T)
    })
})
where 12 at /tmp/RtmpMgyUa9/R.INSTALLfb1c657708a2/BatchGetSymbols/R/BatchGetSymbols.R#103: myGetSymbols(ticker = bench.ticker, src = bench.src, first.date = first.date, 
    last.date = last.date)
where 13: BatchGetSymbols(tickers = tickers, first.date = first.date, last.date = last.date)

 --- value of length: 3 type: logical ---
[1]  TRUE  TRUE FALSE
 --- function --- 
function(calling.fun=NULL) {
  sc <- sys.call(-1)
  if(is.null(calling.fun)) calling.fun <- as.character(sc[[1]])
  if(is.function(calling.fun)) calling.fun <- deparse(substitute(calling.fun))
  if(is.null(sc)) 
    stop("importDefaults is only valid inside a function call") 
  if(as.character(sc[[1]]) != calling.fun) return()
  #calling.fun <- as.character(match.call(call=as.call(sys.call(-1)))[1])
  all.defaults <- getDefaults(calling.fun)
  if(is.null(all.defaults)) return()
  envir <- as.environment(-1)
  #passed.args <- names(sapply(match.call(call=as.call(sys.call(-1)))[-1],deparse))
  passed.args <- names(as.list(match.call(
                       definition=eval(parse(text=calling.fun)),
                       call=as.call(sys.call(-1)))))[-1]
  formal.args <- names(formals(as.character(sys.call(-1))))
  default.args <- names(which(sapply(all.defaults,function(x) !is.null(x))==TRUE))
  for(arg in formal.args) {
    if(!arg %in% passed.args) {
      if(arg %in% default.args) {
        if(typeof(all.defaults[arg][[1]])=='list') {
          assign(arg, as.vector(all.defaults[arg][[1]]),envir=envir)
        } 
        else if(typeof(all.defaults[arg][[1]]) %in% c('symbol','language')) {
          assign(arg, all.defaults[arg][[1]],envir=envir)
        }
        else if(typeof(all.defaults[arg][[1]])=="character") {
           if(length(all.defaults[arg][[1]])==1) {
             assign(arg, eval(parse(text=all.defaults[arg][[1]])),envir=envir)
           } else {
             assign(arg, as.character(parse(text=all.defaults[arg][[1]])),envir=envir)
           }
        }
        else {
          assign(arg, as.vector(unlist(all.defaults[arg][[1]])),envir=envir)
        }
      }
    }
  }
}
<environment: namespace:quantmod>
 --- function (body) search ---
Function importDefaults in namespace quantmod has this body.
