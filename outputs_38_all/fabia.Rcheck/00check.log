* using log directory ‘/var/scratch2/tomas/test/mine/R-75396/check/fabia.Rcheck’
* using R Under development (unstable) (2018-10-04 r75396)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘fabia/DESCRIPTION’ ... OK
* this is package ‘fabia’ version ‘2.27.0’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘fabia’ can be installed ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... NOTE
File ‘fabia/R/zzz.R’:
  .onLoad calls:
    packageStartupMessage("+----------------------------+                                          \n",     "|............................|                                          \n",     "|............................|                                          \n",     "|..............########......|  #######    #    ######    ###      #    \n",     "|..............########......|  #         # #   #     #    #      # #   \n",     "|.....####.....########......|  #        #   #  #     #    #     #   #  \n",     "|.....####.....########......|  #####   #     # ######     #    #     # \n",     "|.....####...................|  #       ####### #     #    #    ####### \n",     "|.....####...........###.....|  #       #     # #     #    #    #     # \n",     "|....................###.....|  #       #     # ######    ###   #     # \n",     "|....................###.....|                                          \n",     "|............................|                                          \n",     "+----------------------------+                                          \n")
    packageStartupMessage("Citation: S. Hochreiter et al.,", "\n",     "FABIA: Factor Analysis for Bicluster Acquisition,", "\n",     "Bioinformatics 26(12):1520-1527, 2010.", "\n", "BibTex: enter 'toBibtex(citation(\"fabia\"))'",     "\n\n", "Homepage: http://www.bioinf.jku.at/software/fabia/fabia.html",     "\n\n", "FABIA Package Version ", version, "\n")

See section ‘Good practice’ in '?.onAttach'.

plot,Factorization-missing: warning in symbols(ll[isel, 1], ll[isel,
  2], circle = sqs[isel], inches = FALSE, lwd = 3, add = TRUE, fg =
  colors[2]): partial argument match of 'circle' to 'circles'
  (/var/scratch2/tomas/tmp/RtmpD0fW0O/R.INSTALL41bc5132f9f6/fabia/R/methods-Factorization-class.R:814-815)
plot,Factorization-missing: warning in symbols(zz[ii, 1], zz[ii, 2],
  square = sqs, inches = FALSE, lwd = 3, add = TRUE, fg = colors[2 +
  iGroup[i]]): partial argument match of 'square' to 'squares'
  (/var/scratch2/tomas/tmp/RtmpD0fW0O/R.INSTALL41bc5132f9f6/fabia/R/methods-Factorization-class.R:830-831)
plot,Factorization-missing: no visible global function definition for
  ‘dev.new’
  (/var/scratch2/tomas/tmp/RtmpD0fW0O/R.INSTALL41bc5132f9f6/fabia/R/methods-Factorization-class.R:589)
Undefined global functions or variables:
  dev.new
Consider adding
  importFrom("grDevices", "dev.new")
to your NAMESPACE file.
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking line endings in shell scripts ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... OK
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking include directives in Makefiles ... NOTE
Found the following Makefile(s) with an include directive with a pathname using R_HOME:
  src/Makefile.win
Even though not recommended, variable R_HOME may contain spaces.
Makefile directives use space as a separator and there is no portable
way to quote/escape the space in Make rules and directives.  However,
one can and should quote pathnames when passed from Makefile to the
shell, and this can be done specifically when invoking Make recursively.
It is therefore recommended to use the Make '-f' option to include files
in directories specified using R_HOME.  This option can be specified
multiple times to include multiple Makefiles.  Note that 'Makeconf' is
included automatically into top-level makefile of a package.
More information can be found in 'Writing R Extensions'.
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking sizes of PDF files under ‘inst/doc’ ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘fabia-Ex.R’ failed
The error most likely occurred in:

> ### Name: plotBicluster
> ### Title: Plotting of a bicluster
> ### Aliases: plotBicluster
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> #---------------
> # TEST
> #---------------
> 
> dat <- makeFabiaDataBlocks(n = 100,l= 50,p = 3,f1 = 5,f2 = 5,
+   of1 = 5,of2 = 10,sd_noise = 3.0,sd_z_noise = 0.2,mean_z = 2.0,
+   sd_z = 1.0,sd_l_noise = 0.2,mean_l = 3.0,sd_l = 1.0)
> 
> X <- dat[[1]]
> Y <- dat[[2]]
> 
> 
> resEx <- fabia(X,3,0.01,20)
Running FABIA on a 100x50 matrix with
   Number of biclusters ---------------- p: 3
   Sparseness factor --------------- alpha: 0.01
   Number of iterations -------------- cyc: 20
   Loading prior parameter ----------- spl: 0
   Factor prior parameter ------------ spz: 0.5
   Initialization loadings--------- random: 1 = interval
   Nonnegative Loadings and Factors ------: 0 = No
   Centering ---------------------- center: 2 = median
   Quantile scaling (0.75-0.25): ---- norm: 1 = Yes
   Scaling loadings per iteration -- scale: 0 = No
   Constraint variational parameter -- lap: 1
   Max. number of biclusters per row -- nL: 0 = no limit
   Max. number of row elements / biclu. lL: 0 = no limit
Cycle: 0
Cycle: 20
> 
> rEx <- extractBic(resEx)
> 
> plotBicluster(rEx,p=1)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpD0fW0O/R.INSTALL41bc5132f9f6/fabia/R/fabia.R#1504: 
 --- package (from environment) --- 
fabia
 --- call from context --- 
plotBicluster(rEx, p = 1)
 --- call from argument --- 
if (is(r) == "Factorization") {
    stop("First argument is of the class Factorization but must be the result of the function extractBic() (a list). Stopped.")
}
 --- R stacktrace ---
where 1: plotBicluster(rEx, p = 1)

 --- value of length: 3 type: logical ---
[1] FALSE FALSE FALSE
 --- function from context --- 
function(r,p,opp=FALSE,zlim=NULL,title=NULL,which=c(1, 2)){



        if (missing(r)) {
            stop("r (= the result of extractBic) is missing. Stopped.")
        }
        if (missing(p)) {
            stop("The bicluster to plot is missing. Stopped.")
        }

        if (is(r) == "Factorization") {
            stop("First argument is of the class Factorization but must be the result of the function extractBic() (a list). Stopped.")
        }






        x <- r$X
        if (!is.matrix(x)) {
            x <- as.matrix(x)
        }

        if (!is.numeric(x)) {
            stop("Data matrix X must be numeric. Stopped.")
        }
        if (!is.numeric(r$np)) {
            stop("Number of biclusters must be numeric. Stopped.")
        }


        if (p>r$np) {
            stop("Bicluster number is too large. Stopped.")
        }

        if ((nrow(x)<2)||(ncol(x)<2)) {
            stop("Data matrix X too small or missing. Stopped.")
        }


     devAskNewPage(ask = FALSE)

   if (length(which) > 1 && dev.interactive()) {
        devAskNewPage(ask = TRUE)
    }

   showf <- c(FALSE, FALSE)
    showf[which] <- TRUE




     n <- nrow(x)

     np <- r$np

     l <- ncol(x)

     if (!opp) {
         if (r$bic[[p]][1]<1) {
            stop("No genes in bicluster. Stopped.")
         }
         if (r$bic[[p]][2]<1) {
            stop("No samples in bicluster. Stopped.")
         }

        observations <- unlist(r$bic[p,3])
         samples <- unlist(r$bic[p,5])
     } else {
         if (r$bicopp[[p]][1]<1) {
            stop("No genes in bicluster. Stopped.")
         }
         if (r$bicopp[[p]][2]<1) {
            stop("No samples in bicluster. Stopped.")
         }
         observations <- unlist(r$bicopp[p,3])
         samples <- unlist(r$bicopp[p,5])
     }

     if (length(observations)<1) {
         stop("No genes in bicluster. Stopped.")
     }

     if (length(samples)<1) {
         stop("No samples in bicluster. Stopped.")
     }

     min <- min(x)
     max <- max(x)

   if( !is.null(zlim) ){
       min <- zlim[1]
       max <- zlim[2]
    }

    yLabels <- rownames(x)
    xLabels <- colnames(x)


     if( is.null(title) ){
     title <- c()
    }



 # Reverse Y axis
 reverse <- n : 1
 yLabels <- yLabels[reverse]
 x <- x[reverse,]

     obs <- match(observations,yLabels)
     samp <- match(samples,xLabels)

    ybl <- length(obs)
    if (ybl == 0) {
      obs <- match(observations,as.character(n:1))
      ybl <- length(obs)

    }
    if (ybl == 0) {
      obs <- match(observations,c(n:1))
      ybl <- length(obs)

    }

    xbl <- length(samp)
    if (xbl == 0) {
      samp <- match(samples,as.character(1:l))
      xbl <- length(samp)

    }
    if (xbl == 0) {
      samp <- match(samples,c(1:l))
      xbl <- length(samp)

    }



    pmL <- diag(n)
    for (i in 1:ybl){
        ii <- n-i+1
        pmL[ii,ii] <- 0
        pmL[ii,obs[i]] <- 1
        pmL[obs[i],obs[i]] <- 0
        pmL[obs[i],ii] <- 1
        tmp <- yLabels[ii]
        yLabels[ii] <- yLabels[obs[i]]
        yLabels[obs[i]] <- tmp
    }

    pmZ <- diag(l)
    for (i in 1:xbl){
        pmZ[i,i] <- 0
        pmZ[i,samp[i]] <- 1
        pmZ[samp[i],samp[i]] <- 0
        pmZ[samp[i],i] <- 1
        tmp <- xLabels[i]
        xLabels[i] <- xLabels[samp[i]]
        xLabels[samp[i]] <- tmp
   }

    x <- pmL%*%x%*%pmZ

    rownames(x) <-  yLabels
    colnames(x) <-  xLabels


    if (n>100)
    {
        lll <- 12

        yl <- c(1,round(n*(1:lll)/lll))

        yll <- rep("",n)

        yll[yl] <- rownames(x)[yl]

        yLabels <- yll
    }
    for (i in 1:ybl){
        ii <- n-i+1
        yLabels[ii] <- rownames(x)[ii]
    }

if (showf[1]){

 layout(matrix(data=c(2,1), nrow=1, ncol=2), widths=c(7,1), heights=c(1,1))

 # Red and green range from 0 to 1 while Blue ranges from 1 to 0
 ColorRamp <- rgb( seq(0,1,length=256),  # Red
                   seq(0,1,length=256),  # Green
                   seq(1,0,length=256))  # Blue
 ColorLevels <- seq(min, max, length=length(ColorRamp))

 # Color Scale
 par(mar = c(3,2,2.5,1))
 image(1, ColorLevels,
      matrix(data=ColorLevels, ncol=length(ColorLevels),nrow=1),
      col=ColorRamp,
      xlab="",ylab="",
      xaxt="n")




 # Data Map
 par(mar = c(3,5,2.5,1))
 image(1:length(xLabels), 1:length(yLabels), t(x), col=ColorRamp, xlab="",
 ylab="", axes=FALSE, zlim=c(min,max))
 if( !is.null(title) ){
    title(main=title)
 }
axis(BELOW<-1, at=1:length(xLabels), labels=xLabels, cex.axis=0.7)
 axis(LEFT <-2, at=1:length(yLabels), labels=yLabels, las= HORIZONTAL<-1,
 cex.axis=0.7)

#rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45,
#     col = NA, border = NULL, lty = par("lty"), lwd = par("lwd"),
#     ...)

rect(xleft=0.6, ybottom= n-ybl, xright=xbl+1, ytop=n+0.3,lwd=3,border="red")

layout(1)

}


if (showf[2]){

layout(matrix(data=c(2,1), nrow=1, ncol=2), widths=c(7,1), heights=c(1,1))

 ColorRamp <- rgb( seq(0,1,length=256),  # Red
                   seq(0,1,length=256),  # Green
                   seq(1,0,length=256))  # Blue
 ColorLevels <- seq(min, max, length=length(ColorRamp))

# Color Scale
 par(mar = c(3,2,2.5,1))
 image(1, ColorLevels,
      matrix(data=ColorLevels, ncol=length(ColorLevels),nrow=1),
      col=ColorRamp,
      xlab="",ylab="",
      xaxt="n")


 # Data Map
 par(mar = c(3,5,2.5,1))
 image(1:xbl, 1:ybl, t(x[(n-ybl+1):n,1:xbl]), col=ColorRamp, xlab="",
 ylab="", axes=FALSE, zlim=c(min,max))
 if( !is.null(title) ){
    title(main=title)
 }
axis(BELOW<-1, at=1:xbl, labels=xLabels[1:xbl], cex.axis=0.7)
 axis(LEFT <-2, at=1:ybl, labels=yLabels[(n-ybl+1):n], las= HORIZONTAL<-1,
 cex.axis=0.7)

 layout(1)

}
devAskNewPage(ask = FALSE)
}
<bytecode: 0x686df88>
<environment: namespace:fabia>
 --- function search by body ---
Function plotBicluster in namespace fabia has this body.
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... OK
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE
Status: 1 ERROR, 3 NOTEs
