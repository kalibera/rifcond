
R Under development (unstable) (2018-10-04 r75396) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "biovizBase"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('biovizBase')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CRC")
> ### * CRC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CRC
> ### Title: CRC
> ### Aliases: CRC crc.gr hg19sub mut.gr
> ### Keywords: datasets
> 
> ### ** Examples
> data(CRC)
> 
> 
> cleanEx()
> nameEx("GCcontent")
> ### * GCcontent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GCcontent
> ### Title: GC content computation for BSgenome
> ### Aliases: GCcontent
> 
> ### ** Examples
> 
> library(BSgenome.Hsapiens.UCSC.hg19)
Loading required package: BSgenome
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector

Attaching package: 'Biostrings'

The following object is masked from 'package:base':

    strsplit

Loading required package: rtracklayer
> GCcontent(Hsapiens, GRanges("chr1", IRanges(1e6, 1e6 + 1000)))
           C|G
[1,] 0.7162837
> 
> 
> 
> cleanEx()

detaching 'package:BSgenome.Hsapiens.UCSC.hg19', 'package:BSgenome',
  'package:rtracklayer', 'package:Biostrings', 'package:XVector',
  'package:GenomicRanges', 'package:GenomeInfoDb', 'package:IRanges',
  'package:S4Vectors', 'package:stats4', 'package:BiocGenerics',
  'package:parallel'

> nameEx("addStepping-method")
> ### * addStepping-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addStepping-method
> ### Title: Adding disjoint levels to a GenomicRanges object
> ### Aliases: addStepping addStepping,GenomicRanges-method
> 
> ### ** Examples
> 
> library(GenomicRanges)
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: 'S4Vectors'

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
> set.seed(1)
> N <- 500
> ## sample GRanges
> gr <- GRanges(seqnames =
+               sample(c("chr1", "chr2", "chr3", "chrX", "chrY"),
+                      size = N, replace = TRUE),
+               IRanges(
+                       start = sample(1:300, size = N, replace = TRUE),
+                       width = sample(70:75, size = N,replace = TRUE)),
+               strand = sample(c("+", "-", "*"), size = N,
+                 replace = TRUE),
+               value = rnorm(N, 10, 3), score = rnorm(N, 100, 30),
+               group = sample(c("Normal", "Tumor"),
+                 size = N, replace = TRUE),
+               pair = sample(letters, size = N,
+                 replace = TRUE))
> 
> ## grouping and extending
> head(addStepping(gr))
GRanges object with 6 ranges and 5 metadata columns:
       seqnames    ranges strand |            value            score
          <Rle> <IRanges>  <Rle> |        <numeric>        <numeric>
  chr1     chr1   241-313      * |   8.120638567773 102.319093682108
  chr1     chr1    54-126      + | 7.49311416276986 64.5027327870199
  chr1     chr1   273-343      - | 13.3747927544293  87.887896195059
  chr1     chr1   138-207      * | 9.95142921070316 87.3288277621976
  chr1     chr1     25-99      + | 12.8315086320559 111.223551840859
  chr1     chr1    33-103      * | 12.3464089021932 108.719999363178
             group        pair  stepping
       <character> <character> <numeric>
  chr1       Tumor           n         2
  chr1       Tumor           w        29
  chr1      Normal           m         9
  chr1      Normal           p        18
  chr1      Normal           z        20
  chr1       Tumor           m        21
  -------
  seqinfo: 5 sequences from an unspecified genome; no seqlengths
> head(addStepping(gr, group.name = "pair"))
GRanges object with 6 ranges and 5 metadata columns:
       seqnames    ranges strand |            value            score
          <Rle> <IRanges>  <Rle> |        <numeric>        <numeric>
  chr1     chr1   241-313      * |   8.120638567773 102.319093682108
  chr1     chr1    54-126      + | 7.49311416276986 64.5027327870199
  chr1     chr1   273-343      - | 13.3747927544293  87.887896195059
  chr1     chr1   138-207      * | 9.95142921070316 87.3288277621976
  chr1     chr1     25-99      + | 12.8315086320559 111.223551840859
  chr1     chr1    33-103      * | 12.3464089021932 108.719999363178
             group        pair  stepping
       <character> <character> <numeric>
  chr1       Tumor           n        14
  chr1       Tumor           w        22
  chr1      Normal           m        13
  chr1      Normal           p        16
  chr1      Normal           z        25
  chr1       Tumor           m        13
  -------
  seqinfo: 5 sequences from an unspecified genome; no seqlengths
> gr.close <- GRanges(c("chr1", "chr1"), IRanges(c(10, 20), width = 9))
> addStepping(gr.close)
GRanges object with 2 ranges and 1 metadata column:
       seqnames    ranges strand |  stepping
          <Rle> <IRanges>  <Rle> | <numeric>
  chr1     chr1     10-18      * |         1
  chr1     chr1     20-28      * |         1
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> addStepping(gr.close, extend.size = 5)
GRanges object with 2 ranges and 1 metadata column:
       seqnames    ranges strand |  stepping
          <Rle> <IRanges>  <Rle> | <numeric>
  chr1     chr1     10-18      * |         1
  chr1     chr1     20-28      * |         2
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> 
> 
> 
> cleanEx()

detaching 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:BiocGenerics',
  'package:parallel', 'package:stats4'

> nameEx("aes-utils")
> ### * aes-utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parseArgsForAes
> ### Title: Utils for parsing (un)evaluated arguments
> ### Aliases: parseArgsForAes parseArgsForNonAes
> 
> ### ** Examples
> 
> args <- alist(a = color, b = "b")
> # parseArgsForAes(args)
> 
> 
> 
> cleanEx()
> nameEx("colorBlindSafePal")
> ### * colorBlindSafePal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorBlindSafePal
> ### Title: Color blind safe palette generator
> ### Aliases: colorBlindSafePal genBrewerBlindPalInfo genDichromatPalInfo
> ###   genBlindPalInfo blind.pal.info brewer.pal.blind.info
> ###   dichromat.pal.blind.info
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(scales)
> ##D ## brewer subse of only color blind palette
> ##D brewer.pal.blind.info
> ##D genBrewerBlindPalInfo()
> ##D ## dichromat info
> ##D dichromat.pal.blind.info
> ##D genDichromatPalInfo()
> ##D ## all color blind palette, adding id/pkg.
> ##D blind.pal.info
> ##D ## with no parameters, just return blind.pal.info
> ##D colorBlindSafePal()
> ##D mypal <- colorBlindSafePal(20)
> ##D ## or pass character name
> ##D mypal <- colorBlindSafePal("Set2")
> ##D mypal12 <- colorBlindSafePal(22)
> ##D show_col(mypal(12, repeatable = FALSE)) # warning
> ##D show_col(mypal(11, repeatable = TRUE))  # no warning, and repeat
> ##D show_col(mypal12(12))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("containLetters")
> ### * containLetters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: containLetters
> ### Title: Checking if string contains letters or not
> ### Aliases: containLetters
> 
> ### ** Examples
> containLetters("XYZ123")
[1] TRUE
> containLetters("XYZ123", TRUE)
[1] FALSE
> 
> 
> cleanEx()
> nameEx("crc1.GeRL")
> ### * crc1.GeRL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crc1.GeRL
> ### Title: crc1.GeRL
> ### Aliases: crc1.GeRL crc1.GeRL
> ### Keywords: datasets
> 
> ### ** Examples
> data(crc1.GeRL)
> crc1.GeRL
GenomicRangesList of length 6
names(6): gr.crc gr.crc mut.gr hg19Ideo hg19Ideo hg19Ideo
> 
> 
> 
> cleanEx()
> nameEx("crunch-method")
> ### * crunch-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crunch
> ### Title: Fetching GRanges from various data source
> ### Aliases: crunch crunch,TxDb-method crunch,EnsDb-method
> ###   crunch,GAlignments-method crunch,BamFile-method
> 
> ### ** Examples
> 
> library(biovizBase)
> library(TxDb.Hsapiens.UCSC.hg19.knownGene)
Loading required package: GenomicFeatures
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> data(genesymbol, package = "biovizBase")
> txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
> obj <- txdb
> temp <- crunch(txdb, which = genesymbol["BRCA1"], type = "all")
Parsing transcripts...
Parsing exons...
Parsing cds...
Parsing utrs...
------exons...
------cdss...
------introns...
------utr...
aggregating...
Done
> temp <- crunch(txdb, which = genesymbol["BRCA1"], type = "reduce")
Parsing transcripts...
Parsing exons...
Parsing cds...
Parsing utrs...
------exons...
------cdss...
------introns...
------utr...
aggregating...
Done
> 
> ## Fetching data from a EnsDb object.
> library(EnsDb.Hsapiens.v75)
Loading required package: ensembldb
Loading required package: AnnotationFilter

Attaching package: 'ensembldb'

The following object is masked from 'package:stats':

    filter

> edb <- EnsDb.Hsapiens.v75
> gr <- genesymbol["BRCA1"]
> seqlevels(gr) <- sub(seqlevels(gr), pattern="chr", replacement="")
> temp <- crunch(edb, which = gr)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpC9nNBK/R.INSTALL2424ba92f88/biovizBase/R/crunch-method.R#284: 
 --- package (from environment) --- 
biovizBase
 --- call from context --- 
.local(obj, ...)
 --- call from argument --- 
if (!is.na(genome(which))) {
    if (unname(genome(which)) != unique(unname(genome(obj)))) 
        stop("Genome versions do not fit! Argument 'which' has ", 
            unname(genome(which)), " argument 'obj' ", unname(unique(genome(which))), 
            "!")
}
 --- R stacktrace ---
where 1: .local(obj, ...)
where 2 at /var/scratch2/tomas/tmp/RtmpC9nNBK/R.INSTALL2424ba92f88/biovizBase/R/crunch-method.R#1: crunch(edb, which = gr)
where 3: crunch(edb, which = gr)

 --- value of length: 45 type: logical ---
                 1                 10                 11                 12 
             FALSE              FALSE              FALSE              FALSE 
                13                 14                 15                 16 
             FALSE              FALSE              FALSE              FALSE 
                17       17_ctg5_hap1 17_gl000205_random                 18 
             FALSE              FALSE              FALSE              FALSE 
                19 19_gl000209_random  1_gl000191_random                  2 
             FALSE              FALSE              FALSE              FALSE 
                20                 21                 22                  3 
             FALSE              FALSE              FALSE              FALSE 
                 4        4_ctg9_hap1  4_gl000194_random                  5 
             FALSE              FALSE              FALSE              FALSE 
                 6         6_apd_hap1         6_cox_hap2         6_dbb_hap3 
             FALSE              FALSE              FALSE              FALSE 
       6_mann_hap4         6_mcf_hap5         6_qbl_hap6        6_ssto_hap7 
             FALSE              FALSE              FALSE              FALSE 
                 7                  8                  9        Un_gl000211 
             FALSE              FALSE              FALSE              FALSE 
       Un_gl000212        Un_gl000218        Un_gl000219        Un_gl000220 
             FALSE              FALSE              FALSE              FALSE 
       Un_gl000222        Un_gl000223        Un_gl000228                  X 
             FALSE              FALSE              FALSE              FALSE 
                 Y 
             FALSE 
 --- function from context --- 
function(obj, which,
                                      columns = c("tx_id",
                                                  "gene_name",
                                                  "gene_id"),
                                      type = c("all", "reduce"),
                                      truncate.gaps = FALSE,
                                      truncate.fun = NULL,
                                      ratio = 0.0025){
    type <- match.arg(type)
    ## If which is a GRanges convert that to a GRangesFilter, otherwise just
    ## pass on the "which" parameter as argument "filter" to the ensembldb
    ## methods.
    if(is(which, "GRanges")) {
        if(length(which) == 0) {
            message("No transcripts found at this region.")
            return(GRanges())
        }
        if(length(which) > 1)
            stop("'which' has to be a single GRanges object.")
        if(!is.na(genome(which))){
            if(unname(genome(which)) != unique(unname(genome(obj))))
                stop("Genome versions do not fit! Argument 'which' has ",
                     unname(genome(which)), " argument 'obj' ",
                     unname(unique(genome(which))), "!")
        }
        ## Check if we've got the seqnames.
        if(!(seqlevels(which) %in% seqlevels(obj)))
            stop(seqlevels(which), " does not match any seqlevel in argument 'obj'!")
        exFilter <- GRangesFilter(which, type = "any")
    } else exFilter <- which
    ## Check input argument 'columns':
    notAvailable <- !(columns %in% listColumns(obj))
    if(any(notAvailable)){
        if(all(notAvailable))
            stop("None of the columns specified by arguments 'columns' are available!",
                 " Allowed values are:", paste(listColumns(obj), collapse=", "), ".")
        ## Reducing to those which are allowed...
        warning("Columns ", paste(columns[notAvailable], collapse=", "), " are not",
                " available in the database and have been removed.")
        columns <- columns[!notAvailable]
    }
    ## Approach:
    ## 1) Get all exons in that region and retrieve also the
    ##    tx_coding_seq_start. We're fetching the data just once and
    ##    calculating everything we need from that, i.e. cds, utr and introns.
    message("Fetching data...", appendLF=FALSE)
    requiredCols <- c("tx_cds_seq_start", "tx_cds_seq_end", "exon_id", "tx_id")
    ## Forcing tx_id on the columns:
    columns <- unique(c(columns, "tx_id"))
    ## In order to solve also the "overlapping" condition I have first to fetch
    ## the transcripts in the region and their exons. That way we get, for a
    ## GRangesFilter or GRanges all transcripts that have an exon or an intron
    ## at the specified region.
    txInRegion <- transcripts(obj, filter = exFilter)
    if(length(txInRegion) == 0){
        message("No transcripts found at this region.")
        return(GRanges())
    }
    regExons <- exons(obj, filter = TxIdFilter(unique(txInRegion$tx_id)),
                      columns = unique(c(requiredCols, columns)))
    ## Simple sanitizing: check if what we got is on the same chromosome!
    if(length(unique(as.character(seqnames(regExons)))) > 1)
        stop("Got features from different chromosomes! Please adjust argument",
             " 'which' in order to fetch only features from a single chromosome.")
    message("OK")
    if(length(regExons) > 0){
        message("Parsing exons...", appendLF=FALSE)
        ## Get an DataFrame that we can use as mcols for the GRanges:
        mDf <- unique(mcols(regExons)[, columns])
        ## Actually, with this I have all I need.
        ## 2) Define introns.
        regExonsList <- split(regExons, regExons$tx_id)
        message("OK\nDefining introns...", appendLF=FALSE)
        ints <- gaps(ranges(regExonsList))
        ints <- unlist(ints)
        if(length(ints) > 0){
            regIntrons <- GRanges(seqnames=unique(seqnames(regExons)), ranges=ints,
                                  strand="*",
                                  mDf[match(names(ints), mDf$tx_id), ])
            regIntrons$type <- "gap"
        }else{
            regIntrons <- GRanges()
        }
        message("OK\nDefining UTRs...", appendLF=FALSE)
        ## 3) Define UTRs.
        codingTx <- regExons[!is.na(regExons$tx_cds_seq_end)]
        if(length(codingTx) > 0){
            ## Define the whole CDS region per tx
            codingReg <- GRanges(seqnames=seqnames(codingTx),
                                 ranges=IRanges(codingTx$tx_cds_seq_start,
                                                codingTx$tx_cds_seq_end),
                                 strand=strand(codingTx),
                                 tx_id=codingTx$tx_id)
            codingTx <- split(codingTx, codingTx$tx_id)
            ## Subset to one CDS region per tx and split
            codingReg <- codingReg[match(names(codingTx), codingReg$tx_id)]
            codingReg <- split(codingReg, codingReg$tx_id)
            regUTRs <- unlist(setdiff(codingTx, codingReg))
            mcols(regUTRs) <- mDf[match(names(regUTRs), mDf$tx_id), ]
            regUTRs$type <- "utr"
            message("OK\nDefining CDS...", appendLF=FALSE)
            ## 4) Define CDS
            regCDSs <- unlist(intersect(codingTx, codingReg))
            mcols(regCDSs) <- mDf[match(names(regCDSs), mDf$tx_id), ]
            regCDSs$type <- "cds"
        }else{
            regUTRs <- GRanges()
            regCDSs <- GRanges()
        }
        message("OK\n", appendLF=FALSE)
        regExons <- regExons[, columns]
        regExons$type <- "exon"
        ensRes <- c(regExons, regIntrons, regUTRs, regCDSs)
    }else{
        warning("Did not find any transcript at the specified region!")
        return(GRanges())
    }
    return(reduceNtruncate(ensRes, type=type, truncate.gaps=truncate.gaps,
                           truncate.fun=truncate.fun, ratio=ratio))

}
<environment: namespace:biovizBase>
 --- function search by body ---
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1
