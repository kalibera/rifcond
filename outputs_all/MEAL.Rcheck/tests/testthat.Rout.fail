
R Under development (unstable) (2018-10-04 r75396) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(MEAL)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: MultiDataSet
Setting options('download.file.method.GEOquery'='auto')
Setting options('GEOquery.inmemory.gpl'=FALSE)


> 
> test_check("MEAL")
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/RtmpFjBl8w/R.INSTALLb5544f02c040/DMRcate/R/cpg.annotate.R#4: 
 --- package (from environment) --- 
DMRcate
 --- call from context --- 
(function(datatype = c("array", "sequencing"), object, what=c("Beta", "M"), arraytype=c("EPIC", "450K"), analysis.type = c("differential", "variability", "ANOVA", "diffVar"), 
                         design, contrasts = FALSE, cont.matrix = NULL, fdr = 0.05, coef, ...) 
{
  if (datatype == "array") {
    stopifnot(class(object) %in% c("matrix", "GenomicRatioSet"))
    if(class(object) == "matrix"){
      if(arraytype=="450K"){grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylation450k", annotation = "ilmn12.hg19", mergeManifest = TRUE, what = what)}
      if(arraytype=="EPIC"){grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylationEPIC", annotation = "ilm10b2.hg19", mergeManifest = TRUE, what = what)}
    } else {
	grset <- object
    }
    object <- getM(grset)
    analysis.type <- match.arg(analysis.type)
    switch(analysis.type, differential = {
      stopifnot(is.matrix(design))
      if (!contrasts) {
        stopifnot(colnames(design)[1] == "(Intercept)")
      } else {
        stopifnot(!is.null(cont.matrix))
      }
      fit <- lmFit(object, design, ...)
      if (contrasts) {
        stopifnot(coef %in% colnames(cont.matrix))
        fit <- contrasts.fit(fit, cont.matrix)
      }
      fit <- eBayes(fit)
      tt <- topTable(fit, coef = coef, number = nrow(object))
      nsig <- sum(tt$adj.P.Val < fdr)
      if (nsig == 0) {
        message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
      }
      betafit <- lmFit(ilogit2(object), design, ...)
      if (contrasts) {
        betafit <- contrasts.fit(betafit, cont.matrix)
      }
      betafit <- eBayes(betafit)
      betatt <- topTable(betafit, coef = coef, number = nrow(object))
      m <- match(rownames(tt), rownames(betatt))
      tt$betafc <- betatt$logFC[m]
      m <- match(rownames(object), rownames(tt))
      tt <- tt[m, ]
      
      anno <- getAnnotation(grset)
      stat <- tt$t
      annotated <- data.frame(ID = rownames(tt), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = tt$betafc, 
                              indfdr = tt$adj.P.Val, is.sig=tt$adj.P.Val < fdr)
    }, variability = {
      RSanno <- getAnnotation(grset)
      wholevar <- var(object)
      weights <- apply(object, 1, var)
      weights <- weights/mean(weights)
      annotated <- data.frame(ID = rownames(object), stat = weights, CHR = RSanno$chr, pos = RSanno$pos, 
                              betafc = rep(0, nrow(object)), indfdr = rep(0, nrow(object)), is.sig=weights > quantile(weights, 0.95))
    }, ANOVA = {
      message("You are annotating in ANOVA mode: consider making the value of fdr quite small, e.g. 0.001")
      stopifnot(is.matrix(design))
      fit <- lmFit(object, design, ...)
      fit <- eBayes(fit)
      sqrtFs <- sqrt(fit$F)
      sqrtfdrs <- p.adjust(fit$F.p.value, method="BH")
      nsig <- sum(sqrtfdrs < fdr)
      if (nsig == 0) {
        message("Your design returned no individually significant probes for ANOVA. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your design returned", nsig, 
                      "individually significant probes for ANOVA; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your design returned", nsig, 
                      "individually significant probes for ANOVA. We recommend the default setting of pcutoff in dmrcate(). Large numbers (e.g. > 100000) may warrant a smaller value of the argument passed to fdr"))
      }
      
      anno <- getAnnotation(grset)
      stat <- sqrtFs
      annotated <- data.frame(ID = rownames(object), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = 0, 
                              indfdr = sqrtfdrs, is.sig=sqrtfdrs < fdr)
    }, diffVar={
      stopifnot(is.matrix(design))
      if (!contrasts) {
        stopifnot(colnames(design)[1] == "(Intercept)")
      } else {
        stopifnot(!is.null(cont.matrix))
      }
      fitvar <- varFit(object, design = design, ...)
      if (contrasts) {
        stopifnot(coef %in% colnames(cont.matrix))
        fitvar <- contrasts.varFit(fitvar, cont.matrix)
      }
      tt <- topVar(fitvar, coef=coef, number = nrow(object))
      nsig <- sum(tt$Adj.P.Value < fdr)
      if (nsig == 0) {
        message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DVMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DVMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
      }
      m <- match(rownames(object), rownames(tt))
      tt <- tt[m, ]
      
      anno <- getAnnotation(grset)
      stat <- tt$t
      annotated <- data.frame(ID = rownames(tt), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = 0, 
                              indfdr = tt$Adj.P.Value, is.sig=tt$Adj.P.Value < fdr)
      
      

      
    })
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
    return(annotated)
  }
  if (datatype == "sequencing") {
    if (!all(c("stat", "chr", "pos", "diff", "fdr") %in% 
             colnames(object))) 
      stop("Error: object does not contain all required columns, was it created by DSS::DMLtest()? Must contain colNames 'stat', 'chr', 'pos', 'diff' and 'fdr'.")
    if(analysis.type != "differential")
      stop("Error: only differential analysis.type available for sequencing assays")
    annotated <- data.frame(ID = rownames(object), stat = object$stat, 
                            CHR = object$chr, pos = object$pos, betafc = object$diff, 
                            indfdr = object$fdr, is.sig=object$fdr < fdr)
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
  }
  else {
    message("Error: datatype must be one of 'array' or 'sequencing'")
  }
  return(annotated)
})(object = new("GenomicRatioSet", preprocessMethod = c(rg.norm = "Raw (no normalization or bg correction)", 
minfi = "1.21.2", manifest = "0.4.0"), annotation = c(array = "IlluminaHumanMethylation450k", 
annotation = "ilmn12.hg19"), rowRanges = new("GRanges", seqnames = new("Rle", 
    values = 1:2, lengths = c(905L, 95L), elementMetadata = NULL, 
    metadata = list()), ranges = new("IRanges", start = c(2715058L, 
2747136L, 2847354L, 2847478L, 2847510L, 2882294L, 2883307L, 3264725L, 
3265089L, 3631575L, 3762130L, 5821720L, 7066183L, 7070451L, 7811760L, 
8434367L, 8700319L, 8700341L, 8751557L, 9431250L, 9433103L, 9435372L, 
9754594L, 9754927L, 9983462L, 10085204L, 10126668L, 11129626L, 
11157142L, 11683125L, 11776368L, 11777709L, 12155999L, 12809548L, 
12992795L, 12993156L, 12993214L, 13063132L, 13587678L, 13707135L, 
13707511L, 13752698L, 13752933L, 13956720L, 14027171L, 14048147L, 
14048197L, 14547147L, 15353772L, 15511530L, 15683403L, 15683427L, 
15693595L, 15808235L, 15809023L, 16730380L, 16730881L, 16804334L, 
16804380L, 16804461L, 16888211L, 16888596L, 16888622L, 16889152L, 
16964684L, 16964808L, 16964882L, 16964965L, 17393426L, 17393449L, 
17755081L, 17755541L, 17755642L, 17878715L, 17879424L, 18372696L, 
18372736L, 18373515L, 18443256L, 18443708L, 18443714L, 18443723L, 
19002006L, 19002442L, 19002482L, 19002582L, 19002980L, 19140359L, 
19140658L, 19533456L, 19533458L, 19904979L, 19989310L, 20134399L, 
20160007L, 20284697L, 20285056L, 20287610L, 21393306L, 21676483L, 
21676593L, 21676994L, 21857632L, 21857796L, 21875563L, 21958619L, 
21958684L, 21959700L, 22290866L, 22290916L, 23350313L, 23761484L, 
23926141L, 24040675L, 24043059L, 24043392L, 24168272L, 24380421L, 
24480790L, 24483092L, 24483231L, 24483234L, 24483478L, 24665544L, 
24711994L, 25022847L, 25023562L, 25030643L, 25031338L, 26210529L, 
26576402L, 27827716L, 30233575L, 30233581L, 30265185L, 30265188L, 
30265350L, 30327625L, 30671305L, 31089464L, 31090306L, 31284813L, 
31285029L, 31285105L, 31285129L, 34148917L, 34405983L, 34406213L, 
34406351L, 34960884L, 34961467L, 34961658L, 35937794L, 36985874L, 
37004521L, 37026473L, 37026697L, 37061801L, 37208295L, 37208607L, 
37402468L, 37430689L, 37430717L, 37545375L, 37706736L, 38079899L, 
38115545L, 38186710L, 38186830L, 38186842L, 38420578L, 38420783L, 
38662916L, 38663393L, 38664442L, 39680221L, 39866758L, 39943025L, 
39949510L, 39951640L, 39953075L, 39953435L, 39956558L, 39956797L, 
39956808L, 39958181L, 40006261L, 40020363L, 40026844L, 40027582L, 
40031550L, 40035961L, 40036023L, 40126573L, 40440191L, 40594678L, 
40594903L, 40595209L, 40693703L, 40944772L, 41192275L, 41192538L, 
41332957L, 41782297L, 41782692L, 41782695L, 42637044L, 42637578L, 
42637584L, 43515213L, 43515575L, 43741601L, 43809039L, 44202777L, 
44402068L, 44402332L, 44732352L, 44732817L, 45017072L, 45017137L, 
45709881L, 46433132L, 46433828L, 46434442L, 46434696L, 46618632L, 
46696420L, 46937653L, 46937658L, 47004146L, 47004645L, 47092037L, 
47341898L, 47342124L, 47420411L, 47420444L, 47422454L, 47441581L, 
47479436L, 47483043L, 47489719L, 47497286L, 47497456L, 47509941L, 
47509947L, 47510405L, 47518114L, 47518136L, 47518504L, 47518579L, 
47518594L, 47696333L, 47696363L, 47862977L, 47930636L, 47985547L, 
48327875L, 48334413L, 48334621L, 48367069L, 48367166L, 48367223L, 
48367230L, 48367513L, 48380042L, 48380234L, 48397836L, 48398018L, 
48398048L, 48398133L, 48432279L, 48456564L, 48457128L, 48555275L, 
48660373L, 48690457L, 48690473L, 48755002L, 48755020L, 48755502L, 
48768342L, 48769107L, 48814955L, 48815747L, 48815787L, 48815856L, 
48900769L, 48900948L, 48911060L, 48911192L, 48931851L, 48958025L, 
48980043L, 48980258L, 49020091L, 49020114L, 49028148L, 49042889L, 
49090934L, 49092076L, 49126099L, 49126128L, 49126243L, 49166345L, 
49179088L, 49189225L, 49217059L, 49297285L, 49333935L, 49368707L, 
49593824L, 49643941L, 49644500L, 49687068L, 49687306L, 49687792L, 
50212665L, 50213977L, 50557022L, 50557066L, 50557122L, 50557283L, 
51139066L, 51239518L, 51240059L, 51486666L, 51636111L, 51636562L, 
51636681L, 52897080L, 52950534L, 52964651L, 53030043L, 53111427L, 
53123054L, 53254027L, 53254653L, 53286187L, 53349902L, 53350680L, 
53449152L, 53449561L, 53453272L, 53460671L, 53461421L, 53467938L, 
53711065L, 53711167L, 53713676L, 54209370L, 54383906L, 54384537L, 
54466836L, 54466849L, 54521732L, 54522221L, 54556536L, 54665817L, 
54666407L, 54835405L, 54835446L, 55101460L, 55187543L, 55187903L, 
55515315L, 55515614L, 55515751L, 55935143L, 56258973L, 56756686L, 
57147872L, 57163839L, 57618891L, 57618914L, 58562599L, 62974905L, 
62975065L, 63005366L, 63263994L, 63264258L, 63425725L, 63425794L, 
63425896L, 64195554L, 64754908L, 64886318L, 64887365L, 67352784L, 
67356424L, 67653324L, 67653598L, 67867448L, 67867676L, 67913324L, 
67913573L, 68004195L, 68047847L, 68047865L, 68047893L, 68048001L, 
68048224L, 68048660L, 68058033L, 68114669L, 68345134L, 68348465L, 
68441389L, 68723812L, 68725086L, 68758562L, 69353178L, 69502014L, 
69509773L, 69509790L, 69509801L, 69664599L, 69672415L, 69672435L, 
70273113L, 70364775L, 70402012L, 70460157L, 70474012L, 70474483L, 
70478246L, 70503563L, 70503908L, 70585931L, 70798610L, 70836822L, 
70887792L, 71092795L, 71096923L, 71263427L, 71351668L, 71351792L, 
71351803L, 71351858L, 71352048L, 71401203L, 71459071L, 71525984L, 
71526944L, 71527091L, 72223388L, 72299310L, 72435007L, 72667191L, 
72782852L, 72783164L, 72783402L, 73071041L, 73071194L, 73325368L, 
73513464L, 73640431L, 73640648L, 73641073L, 73641615L, 73641955L, 
73834086L, 73834489L, 75005102L, 75392755L, 75649367L, 77041722L, 
77151100L, 77358961L, 77359535L, 77394971L, 77395088L, 77395258L, 
77395277L, 79278012L, 79590905L, 79829018L, 79830173L, 80065003L, 
80259473L, 80377379L, 80457687L, 80457709L, 82763219L, 83757131L, 
84258791L, 84581306L, 85403122L, 85403388L, 89176658L, 89177498L, 
91035267L, 95939848L, 99195115L, 99665948L, 99666219L, 99899345L, 
100075379L, 100184268L, 100307072L, 100353183L, 100546291L, 100548167L, 
100603765L, 100603843L, 100673072L, 100807848L, 100807961L, 100878340L, 
100878362L, 100880276L, 100914950L, 101186992L, 101380608L, 101397146L, 
101410339L, 101410888L, 101771438L, 101854294L, 101906179L, 101906989L, 
102000746L, 102000758L, 102001018L, 102192359L, 102319340L, 102469950L, 
102470153L, 102531009L, 102565738L, 102565889L, 102565934L, 102602857L, 
102631697L, 102631887L, 102632072L, 102775697L, 102840724L, 102840912L, 
102862807L, 102862945L, 102883934L, 102884538L, 103087157L, 103089404L, 
103268245L, 103294519L, 103356954L, 103357323L, 103401646L, 103401766L, 
103401777L, 103401820L, 103411244L, 103411278L, 103499545L, 103499724L, 
103502294L, 103809580L, 103810984L, 103811315L, 103811660L, 105066292L, 
105066526L, 105421602L, 105855130L, 106045920L, 106242522L, 106243404L, 
106361852L, 106362045L, 106449904L, 106515879L, 106516174L, 106567457L, 
106693522L, 106750612L, 106871544L, 106960206L, 106960378L, 107019426L, 
107179321L, 107179415L, 107225589L, 107335011L, 107681469L, 107976167L, 
107979401L, 107979700L, 107980132L, 108868271L, 108868282L, 109561524L, 
110038954L, 110039369L, 110039536L, 110339654L, 110339837L, 110924355L, 
111623974L, 113816263L, 114141866L, 114252499L, 114423926L, 114426240L, 
114468833L, 114524286L, 114524308L, 115085326L, 117250962L, 117479980L, 
117629338L, 117629928L, 117633362L, 117957689L, 117957786L, 117959263L, 
117973548L, 117973613L, 118107540L, 118284520L, 118284617L, 118370171L, 
118370187L, 118708353L, 118708375L, 118708409L, 118708623L, 118740406L, 
118827102L, 118827369L, 118828778L, 118892610L, 118925635L, 118925713L, 
118926017L, 118983320L, 118986703L, 118987146L, 119005413L, 119005603L, 
119022103L, 119249786L, 119378521L, 119379153L, 119379165L, 119602917L, 
119603233L, 119694964L, 119737944L, 119737969L, 119763815L, 120008681L, 
120181504L, 122318829L, 122993941L, 123094675L, 123095692L, 124337761L, 
124337817L, 124339261L, 124339462L, 125686940L, 125687011L, 125687041L, 
128674224L, 128674369L, 128812388L, 128977653L, 129039782L, 129039832L, 
129114962L, 129116503L, 129118279L, 129147515L, 129254804L, 129299802L, 
129299924L, 129299948L, 129300230L, 129305726L, 129402809L, 129402953L, 
129629140L, 129657974L, 130037150L, 130192365L, 130216380L, 131157495L, 
131157562L, 131157622L, 131157704L, 131351392L, 131352242L, 131352282L, 
131352293L, 131624049L, 132092575L, 132351068L, 132549003L, 132549205L, 
133119028L, 133371084L, 133593973L, 133594079L, 133594116L, 133680446L, 
133680463L, 134031461L, 134121706L, 134124948L, 134155740L, 134156306L, 
134158728L, 134232238L, 134232907L, 134478751L, 134478884L, 134555733L, 
134558553L, 134568966L, 134571427L, 134654334L, 135180748L, 135229382L, 
135229551L, 135229755L, 135333561L, 135579015L, 135579081L, 135579106L, 
135579224L, 135863104L, 135962199L, 135962940L, 135963596L, 135991582L, 
135991927L, 136113985L, 136114030L, 136114890L, 136510091L, 136633004L, 
136648241L, 136648249L, 138285393L, 138285922L, 138287603L, 138528984L, 
138774080L, 139006339L, 139014460L, 139173393L, 139332755L, 139584049L, 
139587311L, 139590383L, 139593371L, 140983037L, 141291755L, 142721385L, 
145700537L, 146993092L, 146993175L, 146993425L, 146993433L, 146993485L, 
147062702L, 147133821L, 147582069L, 147582133L, 147582520L, 148552714L, 
148586584L, 148586938L, 148621525L, 148622572L, 149106617L, 149106699L, 
149106755L, 149531594L, 149533195L, 149716257L, 149736729L, 149737876L, 
149861694L, 150067249L, 150067276L, 150067307L, 150067687L, 150151580L, 
150151615L, 150151624L, 150151809L, 150151823L, 150153136L, 150346599L, 
150565243L, 150731584L, 150863969L, 150905602L, 151142862L, 151806225L, 
151806628L, 151806923L, 151903174L, 151999289L, 151999547L, 152066574L, 
152066708L, 152066735L, 152161956L, 152482021L, 152486179L, 152529487L, 
152586916L, 152676991L, 152677200L, 152683499L, 152710312L, 152864599L, 
152864830L, 152875780L, 152938750L, 152939154L, 152939309L, 152953167L, 
152954284L, 152954816L, 152954836L, 152989492L, 152990341L, 152992265L, 
153032930L, 153035233L, 153050598L, 153051005L, 153059903L, 153060026L, 
153072756L, 153096307L, 153141270L, 153141451L, 153167899L, 153191600L, 
153200492L, 153218937L, 153220895L, 153236214L, 153236770L, 153236825L, 
153236845L, 153236942L, 153237590L, 153238133L, 153284103L, 153284899L, 
153362990L, 153409560L, 153409667L, 153523440L, 153570171L, 153583236L, 
153586557L, 153602918L, 153603062L, 153603066L, 153607129L, 153607825L, 
153626633L, 153626754L, 153637827L, 153639778L, 153640000L, 153640589L, 
153653174L, 153656891L, 153656930L, 153665103L, 153688713L, 153695784L, 
153707029L, 153707099L, 153707710L, 153714660L, 153715087L, 153715241L, 
153715321L, 153719132L, 153719176L, 153719192L, 153744612L, 153775262L, 
153775341L, 153775517L, 153775683L, 153775885L, 153880742L, 153979588L, 
154033409L, 154113543L, 154299395L, 154299737L, 154445068L, 154488728L, 
154493858L, 2657879L, 2657936L, 2658057L, 2802287L, 2802975L, 
2802985L, 2803070L, 2803127L, 2804320L, 3447947L, 4868368L, 4868397L, 
6114255L, 6114379L, 6778623L, 6778641L, 6778695L, 6891543L, 7142046L, 
7142073L, 7428198L, 8148233L, 9172441L, 9193029L, 9194502L, 9214205L, 
9215053L, 9303646L, 9303715L, 9306450L, 9307448L, 9340946L, 9363356L, 
9363365L, 9365070L, 9385539L, 9385586L, 9385861L, 9747821L, 9930240L, 
10037020L, 13911503L, 14074773L, 14074873L, 14099742L, 14100276L, 
14100573L, 14649201L, 14649262L, 14773536L, 14774193L, 14774195L, 
14774198L, 15016579L, 15016590L, 15016598L, 15016622L, 15016705L, 
15591533L, 15591617L, 15815552L, 15815688L, 15816361L, 15863367L, 
15864778L, 16635745L, 16636258L, 17568097L, 20508275L, 21155270L, 
21238472L, 21239348L, 21239461L, 21664604L, 21728575L, 21729069L, 
21729144L, 21729251L, 21729314L, 21906636L, 21906893L, 21906943L, 
22737424L, 22737591L, 22737594L, 22737896L, 22917087L, 22917104L, 
22917937L, 22917942L, 22918038L, 23566730L, 24453757L, 24549675L, 
28555550L), width = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), NAMES = c("cg01003813", 
"cg05113908", "cg03723195", "cg05479376", "cg07652272", "cg07160107", 
"cg00074638", "cg04371585", "cg07276379", "cg04065558", "cg04394795", 
"cg04483741", "cg03043405", "cg01728536", "cg05524154", "cg01864404", 
"cg03723938", "cg02156712", "cg05371922", "cg04820960", "cg02810043", 
"cg04414946", "cg05096731", "cg05782106", "cg05181702", "cg07416427", 
"cg04297907", "cg06144999", "cg04055739", "cg06139288", "cg02195366", 
"cg02210067", "cg03802931", "cg05887304", "cg02522370", "cg00241907", 
"cg03120461", "cg01408682", "cg00650640", "cg02723311", "cg06407366", 
"cg04373587", "cg04096096", "cg01310267", "cg04167725", "cg06178309", 
"cg07413830", "cg07650623", "cg04665139", "cg06428288", "cg05219621", 
"cg06454337", "cg04931939", "cg04381324", "cg03043267", "cg05572834", 
"cg01732428", "cg04765675", "cg07660411", "cg03348338", "cg03811055", 
"cg07096248", "cg03048084", "cg03171708", "cg06630839", "cg06464066", 
"cg04779297", "cg05950094", "cg01813294", "cg00458505", "cg04376185", 
"cg00266918", "cg07686944", "cg06535161", "cg02286623", "cg05049545", 
"cg00457389", "cg06131666", "cg04716051", "cg02939364", "cg06408185", 
"cg07519908", "cg06700462", "cg02035866", "cg06104510", "cg02540826", 
"cg02161919", "cg02859554", "cg04301343", "cg06615444", "cg05958126", 
"cg07647518", "cg01051089", "cg02223323", "cg00378717", "cg02909397", 
"cg03717198", "cg06818555", "cg05747459", "cg01891172", "cg01828474", 
"cg06775759", "cg01991530", "cg05184682", "cg06938654", "cg02496423", 
"cg02417823", "cg03031357", "cg05087624", "cg01284128", "cg05086798", 
"cg04292836", "cg05442715", "cg05044339", "cg01832419", "cg02624484", 
"cg02817946", "cg05293502", "cg06024075", "cg02539591", "cg02623256", 
"cg06721573", "cg00114625", "cg00139317", "cg06079963", "cg02938958", 
"cg05242815", "cg06943593", "cg03971469", "cg04730443", "cg00824273", 
"cg04689451", "cg01078565", "cg04646630", "cg03757053", "cg02714462", 
"cg04685060", "cg05137263", "cg07051162", "cg04289416", "cg00021786", 
"cg03370193", "cg00661180", "cg04647039", "cg06746884", "cg01570817", 
"cg01275664", "cg07405239", "cg06282443", "cg05456652", "cg07324045", 
"cg01710449", "cg03851490", "cg04149171", "cg01780412", "cg02332456", 
"cg05123368", "cg06112349", "cg01397290", "cg06408301", "cg02153534", 
"cg01475387", "cg04014504", "cg02533866", "cg05370638", "cg01573782", 
"cg05378963", "cg00996177", "cg02062238", "cg06944922", "cg03219705", 
"cg04345928", "cg06135650", "cg05996419", "cg05803913", "cg00981879", 
"cg02540440", "cg07688057", "cg00206414", "cg01522249", "cg05721877", 
"cg05473496", "cg04413754", "cg02685544", "cg05200893", "cg07096038", 
"cg05946161", "cg05685296", "cg02602182", "cg03140487", "cg02932805", 
"cg00016934", "cg05804339", "cg02997061", "cg07381502", "cg00573298", 
"cg07458836", "cg06309256", "cg07093674", "cg05196231", "cg01411845", 
"cg03102848", "cg06625916", "cg00818649", "cg02161125", "cg03983969", 
"cg05692422", "cg05454424", "cg03801901", "cg05443523", "cg04406445", 
"cg02929371", "cg02393514", "cg07481063", "cg07658614", "cg01573544", 
"cg07167981", "cg00751785", "cg04029366", "cg00551957", "cg04490290", 
"cg01483252", "cg00666173", "cg01773478", "cg06540859", "cg04027312", 
"cg01999076", "cg06472116", "cg03139204", "cg02538330", "cg01555661", 
"cg02581653", "cg02124059", "cg05526804", "cg07464598", "cg06922569", 
"cg01814235", "cg02896361", "cg06783548", "cg04026379", "cg01798375", 
"cg07559615", "cg03829216", "cg07038409", "cg02291897", "cg04626171", 
"cg06803079", "cg00636562", "cg06158088", "cg00265812", "cg06093412", 
"cg01668271", "cg06804788", "cg01869765", "cg04709809", "cg01413492", 
"cg02151779", "cg00473354", "cg06834235", "cg01737421", "cg07682072", 
"cg02386310", "cg00026186", "cg03244432", "cg04387098", "cg00011200", 
"cg01873087", "cg06272245", "cg00685925", "cg06172626", "cg03128268", 
"cg06027835", "cg00014152", "cg03759948", "cg07153944", "cg06077978", 
"cg00723997", "cg06297686", "cg01303569", "cg04771154", "cg01120006", 
"cg00810519", "cg03831206", "cg00680673", "cg02337670", "cg02480419", 
"cg02004156", "cg05028071", "cg04734394", "cg01533115", "cg01191902", 
"cg07109010", "cg01150083", "cg03360374", "cg00116709", "cg00583618", 
"cg02602528", "cg04675919", "cg06157408", "cg05104476", "cg02156782", 
"cg03748372", "cg05223760", "cg03746520", "cg03928924", "cg00824714", 
"cg06256374", "cg02540297", "cg04886382", "cg01814152", "cg03675615", 
"cg06624970", "cg00478198", "cg03705894", "cg00264378", "cg02937293", 
"cg03806192", "cg05922253", "cg06673178", "cg03683587", "cg05152874", 
"cg05947181", "cg03440272", "cg06380355", "cg05414241", "cg04238575", 
"cg05127178", "cg06551391", "cg06053110", "cg03553781", "cg01472347", 
"cg01463832", "cg00688681", "cg00776430", "cg03905487", "cg04927657", 
"cg04927982", "cg03832506", "cg06649034", "cg00381376", "cg02353937", 
"cg01404988", "cg03360001", "cg02883100", "cg01477427", "cg05393376", 
"cg04288012", "cg01924074", "cg04031645", "cg03334316", "cg04820593", 
"cg00895705", "cg06069996", "cg03751162", "cg05476522", "cg05425577", 
"cg00360365", "cg05260852", "cg06185870", "cg06614969", "cg03323437", 
"cg07413956", "cg07674075", "cg00936435", "cg02714202", "cg03728850", 
"cg07386410", "cg03723123", "cg06774787", "cg00997174", "cg02293258", 
"cg04699313", "cg04524851", "cg07507776", "cg07260325", "cg06055478", 
"cg00727483", "cg05239680", "cg06016676", "cg02027189", "cg03730082", 
"cg05687312", "cg00904184", "cg07066594", "cg04388383", "cg00997875", 
"cg06943437", "cg05045659", "cg06267203", "cg01825872", "cg04702045", 
"cg01850541", "cg02621658", "cg06104959", "cg00200463", "cg03668629", 
"cg00839572", "cg01999212", "cg04932755", "cg02775175", "cg05849149", 
"cg00373606", "cg03240752", "cg05914696", "cg05411980", "cg02268650", 
"cg00427681", "cg06097615", "cg01759889", "cg00374088", "cg04856605", 
"cg03748858", "cg03272642", "cg01000789", "cg05109619", "cg03894002", 
"cg02879223", "cg01600123", "cg02639793", "cg04037732", "cg02330362", 
"cg06256785", "cg03213202", "cg02214597", "cg07550694", "cg03977822", 
"cg06506080", "cg07516457", "cg02188515", "cg05356800", "cg02971392", 
"cg01419069", "cg03197110", "cg04777541", "cg04072009", "cg06796204", 
"cg03679269", "cg01997410", "cg03056321", "cg02031980", "cg05872222", 
"cg07156563", "cg03752015", "cg05449830", "cg00767637", "cg03505772", 
"cg07693661", "cg04065832", "cg02157475", "cg04836978", "cg05109065", 
"cg03554089", "cg05533223", "cg04624564", "cg04667267", "cg04317640", 
"cg03280420", "cg03055372", "cg03580328", "cg06805513", "cg00399450", 
"cg04094482", "cg04752574", "cg06444329", "cg04428826", "cg04298609", 
"cg07363416", "cg00855706", "cg00832270", "cg00192980", "cg07466166", 
"cg01915804", "cg05605384", "cg00554969", "cg00680081", "cg04533302", 
"cg06968752", "cg05835545", "cg02600772", "cg00008945", "cg06144825", 
"cg05474077", "cg05134041", "cg06544877", "cg02954623", "cg03374735", 
"cg00993140", "cg03802424", "cg07070466", "cg00378950", "cg00072839", 
"cg02875834", "cg05411132", "cg05032903", "cg03769817", "cg05911774", 
"cg06072560", "cg01543116", "cg06411441", "cg01366378", "cg01538344", 
"cg06963219", "cg05899999", "cg01062269", "cg03657257", "cg00408231", 
"cg04033011", "cg05453458", "cg02295504", "cg05532720", "cg00622389", 
"cg01142317", "cg00611101", "cg00380985", "cg01671070", "cg04924736", 
"cg03363535", "cg00968771", "cg04225046", "cg04748497", "cg04039555", 
"cg06302025", "cg04595393", "cg04369574", "cg00668426", "cg01374431", 
"cg07012573", "cg02275875", "cg01804836", "cg03347749", "cg05515118", 
"cg06070578", "cg04167532", "cg00416689", "cg06650776", "cg03962769", 
"cg01600263", "cg05032098", "cg01706033", "cg03485809", "cg06376033", 
"cg06705078", "cg04166210", "cg04493225", "cg01821906", "cg02746718", 
"cg05059648", "cg07056506", "cg05140257", "cg01187510", "cg03978312", 
"cg06443675", "cg05994819", "cg06510592", "cg05788681", "cg05467600", 
"cg06672093", "cg02064569", "cg01757402", "cg00241296", "cg02283535", 
"cg02327549", "cg07674139", "cg02580986", "cg02360578", "cg06462425", 
"cg06228453", "cg05096434", "cg07098277", "cg01831199", "cg06408025", 
"cg06462727", "cg02285579", "cg00735883", "cg03024957", "cg05829338", 
"cg03927302", "cg07464524", "cg05866836", "cg04027004", "cg04302300", 
"cg03440485", "cg06184979", "cg02010442", "cg05064925", "cg07553115", 
"cg06779802", "cg05893072", "cg06443888", "cg01992935", "cg06720669", 
"cg04424654", "cg07653640", "cg07051329", "cg00619443", "cg01052065", 
"cg00412010", "cg05551025", "cg07441824", "cg05124235", "cg02918903", 
"cg00423014", "cg05091491", "cg06170110", "cg02127807", "cg05114100", 
"cg03245429", "cg04190662", "cg04029664", "cg03944921", "cg04061482", 
"cg00112256", "cg06130360", "cg00018261", "cg05397816", "cg02295369", 
"cg02049865", "cg03989304", "cg00114913", "cg07207959", "cg02894810", 
"cg01333849", "cg04290452", "cg00935924", "cg05206294", "cg06206449", 
"cg00142683", "cg03517379", "cg06039729", "cg07681512", "cg00685229", 
"cg06945800", "cg00622384", "cg04327763", "cg03679005", "cg05939965", 
"cg06135529", "cg04184316", "cg05452887", "cg00988678", "cg00243584", 
"cg00907920", "cg05704524", "cg05172693", "cg03364121", "cg06807018", 
"cg02770249", "cg03754195", "cg03900860", "cg05200254", "cg02274705", 
"cg03601619", "cg03102729", "cg04128303", "cg04302178", "cg01318188", 
"cg02510708", "cg07648454", "cg07136872", "cg04691867", "cg07200487", 
"cg02261899", "cg07344627", "cg01913196", "cg05032353", "cg05147108", 
"cg04763286", "cg04855977", "cg04216286", "cg02201836", "cg02890812", 
"cg03825574", "cg05785344", "cg02935635", "cg01215761", "cg07393670", 
"cg05045028", "cg06252876", "cg01913024", "cg01120894", "cg06899582", 
"cg01364818", "cg04294190", "cg06915915", "cg06295352", "cg02864732", 
"cg02229344", "cg04739874", "cg01996818", "cg07419801", "cg04663649", 
"cg02354343", "cg04402486", "cg07674503", "cg06051391", "cg04029282", 
"cg02276461", "cg05629323", "cg06558166", "cg07312966", "cg05445331", 
"cg00729461", "cg03523199", "cg00769799", "cg05630320", "cg01972979", 
"cg07194250", "cg03687305", "cg01990854", "cg05237970", "cg04494122", 
"cg05907136", "cg07172237", "cg00575851", "cg05600581", "cg02803670", 
"cg05908188", "cg04650971", "cg04617012", "cg04495420", "cg06292022", 
"cg04843066", "cg01013491", "cg02285254", "cg06521531", "cg01742836", 
"cg07446674", "cg03959273", "cg02821380", "cg01938887", "cg03104298", 
"cg06293983", "cg02936290", "cg04419618", "cg06288270", "cg02288667", 
"cg02971902", "cg06469252", "cg06164717", "cg07439872", "cg00391044", 
"cg06650546", "cg00240113", "cg06915321", "cg00412368", "cg03100923", 
"cg01777017", "cg02722239", "cg07395435", "cg04630982", "cg01857253", 
"cg01762011", "cg00940287", "cg04481865", "cg03202526", "cg06964654", 
"cg06282524", "cg01761453", "cg05257372", "cg05135828", "cg06864633", 
"cg05288927", "cg04744025", "cg04552106", "cg02921434", "cg03513471", 
"cg00812634", "cg05059874", "cg01353788", "cg06174815", "cg05806018", 
"cg05679489", "cg03514678", "cg02589074", "cg01758988", "cg00466309", 
"cg07089242", "cg06098232", "cg03814733", "cg07659240", "cg03605032", 
"cg03718079", "cg06148972", "cg00016522", "cg04075675", "cg07693301", 
"cg02623604", "cg06119392", "cg05091873", "cg05379196", "cg06136002", 
"cg01807728", "cg05905814", "cg05935584", "cg02634083", "cg06538336", 
"cg01370077", "cg04702079", "cg04177426", "cg06467636", "cg04929599", 
"cg00529027", "cg05849875", "cg03335173", "cg06878303", "cg05476089", 
"cg01056373", "cg01405303", "cg01215118", "cg02615131", "cg04855291", 
"cg05307865", "cg05031352", "cg00916680", "cg06779458", "cg03906572", 
"cg05088151", "cg01274846", "cg07206010", "cg05374090", "cg06511189", 
"cg00739467", "cg00598664", "cg00849191", "cg07653728", "cg01819787", 
"cg00140085", "cg04676446", "cg04307491", "cg00621925", "cg06041068", 
"cg02772106", "cg03315431", "cg00938641", "cg05184436", "cg05463813", 
"cg07187289", "cg06137672", "cg05876899", "cg03892808", "cg06300944", 
"cg03971283", "cg03658985", "cg06791102", "cg00072288", "cg01370179", 
"cg02973417", "cg03968699", "cg03177323", "cg04764476", "cg03672915", 
"cg07086565", "cg03189022", "cg06022838", "cg02742918", "cg06334238", 
"cg01083397", "cg03822658", "cg06654051", "cg04186471", "cg03590418", 
"cg01055931", "cg02931149", "cg07261646", "cg03691313", "cg05438092", 
"cg04344997", "cg03391801", "cg01755617", "cg05100261", "cg06084034", 
"cg04712194", "cg06124711", "cg03670113", "cg00388637", "cg04149024", 
"cg00645049", "cg05222959", "cg04393989", "cg06963664", "cg05534333", 
"cg02333283", "cg06042004", "cg00011891", "cg01434723", "cg05803370", 
"cg04371001", "cg06616857", "cg05424879", "cg06266461", "cg05799859", 
"cg02869694", "cg06554760", "cg07215528", "cg01058588", "cg00813156", 
"cg05260949", "cg02225164", "cg02994943", "cg06058235", "cg05461361", 
"cg05941375", "cg00845806", "cg00697812", "cg04924141", "cg15563434", 
"cg07939587", "cg03767353", "cg11131351", "cg10213302", "cg27433982", 
"cg03683899", "cg02842889", "cg04840163", "cg27539833", "cg15295597", 
"cg02494853", "cg05865243", "cg08242338", "cg04042030", "cg02839557", 
"cg01707559", "cg08921682", "cg04689676", "cg05480730", "cg04964672", 
"cg00213748", "cg25071634", "cg03052502", "cg02011394", "cg17834650", 
"cg04016144", "cg05544622", "cg15935877", "cg15810474", "cg25705492", 
"cg17837162", "cg00050873", "cg03443143", "cg09350919", "cg00455876", 
"cg09460641", "cg03155755", "cg15682806", "cg14210405", "cg14466580", 
"cg04462340", "cg03695421", "cg13851368", "cg26520468", "cg05213048", 
"cg04023335", "cg04303809", "cg18188392", "cg25032547", "cg15746461", 
"cg05890011", "cg14741114", "cg15429127", "cg09856092", "cg10698069", 
"cg18077436", "cg14180491", "cg06479204", "cg04448376", "cg02004872", 
"cg00214611", "cg18032798", "cg13268984", "cg10363397", "cg03706273", 
"cg25518695", "cg04792227", "cg10252249", "cg05230942", "cg03244189", 
"cg00212031", "cg15345074", "cg15027426", "cg25756647", "cg05621349", 
"cg10076560", "cg15682993", "cg07731488", "cg15329860", "cg27049643", 
"cg26517491", "cg15422579", "cg02233190", "cg26983535", "cg03750315", 
"cg07747963", "cg10841270", "cg06322277", "cg26058907", "cg02050847", 
"cg25427172", "cg10267609", "cg26983430", "cg08265308"), elementType = "ANY", 
    elementMetadata = NULL, metadata = list()), strand = new("Rle", 
    values = 3L, lengths = 1000L, elementMetadata = NULL, metadata = list()), 
    seqinfo = new("Seqinfo", seqnames = c("chrX", "chrY"), seqlengths = c(NA_integer_, 
    NA_integer_), is_circular = c(NA, NA), genome = c("hg19", 
    "hg19")), elementMetadata = new("DataFrame", rownames = NULL, 
        nrows = 1000L, listData = list(), elementType = "ANY", 
        elementMetadata = NULL, metadata = list()), elementType = "ANY", 
    metadata = list()), colData = new("DataFrame", rownames = c("5723646052_R02C02", 
"5723646052_R04C01", "5723646052_R05C02", "5723646053_R04C02", 
"5723646053_R05C02", "5723646053_R06C02"), nrows = 6L, listData = list(
    Sample_Name = c("GroupA_3", "GroupA_2", "GroupB_3", "GroupB_1", 
    "GroupA_1", "GroupB_2"), Sample_Well = c("H5", "D5", "C6", 
    "F7", "G7", "H7"), Sample_Plate = c(NA_character_, NA_character_, 
    NA_character_, NA_character_, NA_character_, NA_character_
    ), Sample_Group = c("GroupA", "GroupA", "GroupB", "GroupB", 
    "GroupA", "GroupB"), Pool_ID = c(NA_character_, NA_character_, 
    NA_character_, NA_character_, NA_character_, NA_character_
    ), person = c("id3", "id2", "id3", "id1", "id1", "id2"), 
    age = c(83L, 58L, 83L, 75L, 75L, 58L), sex = c("M", "F", 
    "M", "F", "F", "F"), status = c("normal", "normal", "cancer", 
    "cancer", "normal", "cancer"), Array = c("R02C02", "R04C01", 
    "R05C02", "R04C02", "R05C02", "R06C02"), Slide = c("5723646052", 
    "5723646052", "5723646052", "5723646053", "5723646053", "5723646053"
    ), Basename = c("../extdata/5723646052/5723646052_R02C02", 
    "../extdata/5723646052/5723646052_R04C01", "../extdata/5723646052/5723646052_R05C02", 
    "../extdata/5723646053/5723646053_R04C02", "../extdata/5723646053/5723646053_R05C02", 
    "../extdata/5723646053/5723646053_R06C02"), filenames = c("../extdata/5723646052/5723646052_R02C02", 
    "../extdata/5723646052/5723646052_R04C01", "../extdata/5723646052/5723646052_R05C02", 
    "../extdata/5723646053/5723646053_R04C02", "../extdata/5723646053/5723646053_R05C02", 
    "../extdata/5723646053/5723646053_R06C02")), elementType = "ANY", 
    elementMetadata = NULL, metadata = list()), assays = new("ShallowSimpleListAssays", 
    .xData = <environment>), NAMES = NULL, elementMetadata = new("DataFrame", 
    rownames = NULL, nrows = 1000L, listData = list(), elementType = "ANY", 
    elementMetadata = NULL, metadata = list()), metadata = list()), 
    design = c(1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0), what = "M", 
    coef = 2, datatype = c("array", "sequencing"), arraytype = c("EPIC", 
        "450K"), analysis.type = c("differential", "variability", 
        "ANOVA", "diffVar"), contrasts = FALSE, cont.matrix = NULL, 
    fdr = 0.05, ... = )
 --- call from argument --- 
if (datatype == "array") {
    stopifnot(class(object) %in% c("matrix", "GenomicRatioSet"))
    if (class(object) == "matrix") {
        if (arraytype == "450K") {
            grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylation450k", 
                annotation = "ilmn12.hg19", mergeManifest = TRUE, 
                what = what)
        }
        if (arraytype == "EPIC") {
            grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylationEPIC", 
                annotation = "ilm10b2.hg19", mergeManifest = TRUE, 
                what = what)
        }
    }
    else {
        grset <- object
    }
    object <- getM(grset)
    analysis.type <- match.arg(analysis.type)
    switch(analysis.type, differential = {
        stopifnot(is.matrix(design))
        if (!contrasts) {
            stopifnot(colnames(design)[1] == "(Intercept)")
        } else {
            stopifnot(!is.null(cont.matrix))
        }
        fit <- lmFit(object, design, ...)
        if (contrasts) {
            stopifnot(coef %in% colnames(cont.matrix))
            fit <- contrasts.fit(fit, cont.matrix)
        }
        fit <- eBayes(fit)
        tt <- topTable(fit, coef = coef, number = nrow(object))
        nsig <- sum(tt$adj.P.Val < fdr)
        if (nsig == 0) {
            message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
        }
        if (nsig > 0 & nsig <= 100) {
            message(paste("Your contrast returned", nsig, "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
        }
        if (nsig > 100) {
            message(paste("Your contrast returned", nsig, "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
        }
        betafit <- lmFit(ilogit2(object), design, ...)
        if (contrasts) {
            betafit <- contrasts.fit(betafit, cont.matrix)
        }
        betafit <- eBayes(betafit)
        betatt <- topTable(betafit, coef = coef, number = nrow(object))
        m <- match(rownames(tt), rownames(betatt))
        tt$betafc <- betatt$logFC[m]
        m <- match(rownames(object), rownames(tt))
        tt <- tt[m, ]
        anno <- getAnnotation(grset)
        stat <- tt$t
        annotated <- data.frame(ID = rownames(tt), stat = stat, 
            CHR = anno$chr, pos = anno$pos, betafc = tt$betafc, 
            indfdr = tt$adj.P.Val, is.sig = tt$adj.P.Val < fdr)
    }, variability = {
        RSanno <- getAnnotation(grset)
        wholevar <- var(object)
        weights <- apply(object, 1, var)
        weights <- weights/mean(weights)
        annotated <- data.frame(ID = rownames(object), stat = weights, 
            CHR = RSanno$chr, pos = RSanno$pos, betafc = rep(0, 
                nrow(object)), indfdr = rep(0, nrow(object)), 
            is.sig = weights > quantile(weights, 0.95))
    }, ANOVA = {
        message("You are annotating in ANOVA mode: consider making the value of fdr quite small, e.g. 0.001")
        stopifnot(is.matrix(design))
        fit <- lmFit(object, design, ...)
        fit <- eBayes(fit)
        sqrtFs <- sqrt(fit$F)
        sqrtfdrs <- p.adjust(fit$F.p.value, method = "BH")
        nsig <- sum(sqrtfdrs < fdr)
        if (nsig == 0) {
            message("Your design returned no individually significant probes for ANOVA. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
        }
        if (nsig > 0 & nsig <= 100) {
            message(paste("Your design returned", nsig, "individually significant probes for ANOVA; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
        }
        if (nsig > 100) {
            message(paste("Your design returned", nsig, "individually significant probes for ANOVA. We recommend the default setting of pcutoff in dmrcate(). Large numbers (e.g. > 100000) may warrant a smaller value of the argument passed to fdr"))
        }
        anno <- getAnnotation(grset)
        stat <- sqrtFs
        annotated <- data.frame(ID = rownames(object), stat = stat, 
            CHR = anno$chr, pos = anno$pos, betafc = 0, indfdr = sqrtfdrs, 
            is.sig = sqrtfdrs < fdr)
    }, diffVar = {
        stopifnot(is.matrix(design))
        if (!contrasts) {
            stopifnot(colnames(design)[1] == "(Intercept)")
        } else {
            stopifnot(!is.null(cont.matrix))
        }
        fitvar <- varFit(object, design = design, ...)
        if (contrasts) {
            stopifnot(coef %in% colnames(cont.matrix))
            fitvar <- contrasts.varFit(fitvar, cont.matrix)
        }
        tt <- topVar(fitvar, coef = coef, number = nrow(object))
        nsig <- sum(tt$Adj.P.Value < fdr)
        if (nsig == 0) {
            message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DVMRs, but be warned there is an increased risk of Type I errors.")
        }
        if (nsig > 0 & nsig <= 100) {
            message(paste("Your contrast returned", nsig, "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DVMRs, but be warned that doing this increases the risk of Type I errors."))
        }
        if (nsig > 100) {
            message(paste("Your contrast returned", nsig, "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
        }
        m <- match(rownames(object), rownames(tt))
        tt <- tt[m, ]
        anno <- getAnnotation(grset)
        stat <- tt$t
        annotated <- data.frame(ID = rownames(tt), stat = stat, 
            CHR = anno$chr, pos = anno$pos, betafc = 0, indfdr = tt$Adj.P.Value, 
            is.sig = tt$Adj.P.Value < fdr)
    })
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
        ]
    class(annotated) <- "annot"
    return(annotated)
}
 --- R stacktrace ---
where 1: (function(datatype = c("array", "sequencing"), object, what=c("Beta", "M"), arraytype=c("EPIC", "450K"), analysis.type = c("differential", "variability", "ANOVA", "diffVar"), 
                         design, contrasts = FALSE, cont.matrix = NULL, fdr = 0.05, coef, ...) 
{
  if (datatype == "array") {
    stopifnot(class(object) %in% c("matrix", "GenomicRatioSet"))
    if(class(object) == "matrix"){
      if(arraytype=="450K"){grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylation450k", annotation = "ilmn12.hg19", mergeManifest = TRUE, what = what)}
      if(arraytype=="EPIC"){grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylationEPIC", annotation = "ilm10b2.hg19", mergeManifest = TRUE, what = what)}
    } else {
	grset <- object
    }
    object <- getM(grset)
    analysis.type <- match.arg(analysis.type)
    switch(analysis.type, differential = {
      stopifnot(is.matrix(design))
      if (!contrasts) {
        stopifnot(colnames(design)[1] == "(Intercept)")
      } else {
        stopifnot(!is.null(cont.matrix))
      }
      fit <- lmFit(object, design, ...)
      if (contrasts) {
        stopifnot(coef %in% colnames(cont.matrix))
        fit <- contrasts.fit(fit, cont.matrix)
      }
      fit <- eBayes(fit)
      tt <- topTable(fit, coef = coef, number = nrow(object))
      nsig <- sum(tt$adj.P.Val < fdr)
      if (nsig == 0) {
        message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
      }
      betafit <- lmFit(ilogit2(object), design, ...)
      if (contrasts) {
        betafit <- contrasts.fit(betafit, cont.matrix)
      }
      betafit <- eBayes(betafit)
      betatt <- topTable(betafit, coef = coef, number = nrow(object))
      m <- match(rownames(tt), rownames(betatt))
      tt$betafc <- betatt$logFC[m]
      m <- match(rownames(object), rownames(tt))
      tt <- tt[m, ]
      
      anno <- getAnnotation(grset)
      stat <- tt$t
      annotated <- data.frame(ID = rownames(tt), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = tt$betafc, 
                              indfdr = tt$adj.P.Val, is.sig=tt$adj.P.Val < fdr)
    }, variability = {
      RSanno <- getAnnotation(grset)
      wholevar <- var(object)
      weights <- apply(object, 1, var)
      weights <- weights/mean(weights)
      annotated <- data.frame(ID = rownames(object), stat = weights, CHR = RSanno$chr, pos = RSanno$pos, 
                              betafc = rep(0, nrow(object)), indfdr = rep(0, nrow(object)), is.sig=weights > quantile(weights, 0.95))
    }, ANOVA = {
      message("You are annotating in ANOVA mode: consider making the value of fdr quite small, e.g. 0.001")
      stopifnot(is.matrix(design))
      fit <- lmFit(object, design, ...)
      fit <- eBayes(fit)
      sqrtFs <- sqrt(fit$F)
      sqrtfdrs <- p.adjust(fit$F.p.value, method="BH")
      nsig <- sum(sqrtfdrs < fdr)
      if (nsig == 0) {
        message("Your design returned no individually significant probes for ANOVA. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your design returned", nsig, 
                      "individually significant probes for ANOVA; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your design returned", nsig, 
                      "individually significant probes for ANOVA. We recommend the default setting of pcutoff in dmrcate(). Large numbers (e.g. > 100000) may warrant a smaller value of the argument passed to fdr"))
      }
      
      anno <- getAnnotation(grset)
      stat <- sqrtFs
      annotated <- data.frame(ID = rownames(object), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = 0, 
                              indfdr = sqrtfdrs, is.sig=sqrtfdrs < fdr)
    }, diffVar={
      stopifnot(is.matrix(design))
      if (!contrasts) {
        stopifnot(colnames(design)[1] == "(Intercept)")
      } else {
        stopifnot(!is.null(cont.matrix))
      }
      fitvar <- varFit(object, design = design, ...)
      if (contrasts) {
        stopifnot(coef %in% colnames(cont.matrix))
        fitvar <- contrasts.varFit(fitvar, cont.matrix)
      }
      tt <- topVar(fitvar, coef=coef, number = nrow(object))
      nsig <- sum(tt$Adj.P.Value < fdr)
      if (nsig == 0) {
        message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DVMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DVMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
      }
      m <- match(rownames(object), rownames(tt))
      tt <- tt[m, ]
      
      anno <- getAnnotation(grset)
      stat <- tt$t
      annotated <- data.frame(ID = rownames(tt), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = 0, 
                              indfdr = tt$Adj.P.Value, is.sig=tt$Adj.P.Value < fdr)
      
      

      
    })
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
    return(annotated)
  }
  if (datatype == "sequencing") {
    if (!all(c("stat", "chr", "pos", "diff", "fdr") %in% 
             colnames(object))) 
      stop("Error: object does not contain all required columns, was it created by DSS::DMLtest()? Must contain colNames 'stat', 'chr', 'pos', 'diff' and 'fdr'.")
    if(analysis.type != "differential")
      stop("Error: only differential analysis.type available for sequencing assays")
    annotated <- data.frame(ID = rownames(object), stat = object$stat, 
                            CHR = object$chr, pos = object$pos, betafc = object$diff, 
                            indfdr = object$fdr, is.sig=object$fdr < fdr)
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
  }
  else {
    message("Error: datatype must be one of 'array' or 'sequencing'")
  }
  return(annotated)
})(object = new("GenomicRatioSet", preprocessMethod = c(rg.norm = "Raw (no normalization or bg correction)", 
minfi = "1.21.2", manifest = "0.4.0"), annotation = c(array = "IlluminaHumanMethylation450k", 
annotation = "ilmn12.hg19"), rowRanges = new("GRanges", seqnames = new("Rle", 
    values = 1:2, lengths = c(905L, 95L), elementMetadata = NULL, 
    metadata = list()), ranges = new("IRanges", start = c(2715058L, 
2747136L, 2847354L, 2847478L, 2847510L, 2882294L, 2883307L, 3264725L, 
3265089L, 3631575L, 3762130L, 5821720L, 7066183L, 7070451L, 7811760L, 
8434367L, 8700319L, 8700341L, 8751557L, 9431250L, 9433103L, 9435372L, 
9754594L, 9754927L, 9983462L, 10085204L, 10126668L, 11129626L, 
11157142L, 11683125L, 11776368L, 11777709L, 12155999L, 12809548L, 
12992795L, 12993156L, 12993214L, 13063132L, 13587678L, 13707135L, 
13707511L, 13752698L, 13752933L, 13956720L, 14027171L, 14048147L, 
14048197L, 14547147L, 15353772L, 15511530L, 15683403L, 15683427L, 
15693595L, 15808235L, 15809023L, 16730380L, 16730881L, 16804334L, 
16804380L, 16804461L, 16888211L, 16888596L, 16888622L, 16889152L, 
16964684L, 16964808L, 16964882L, 16964965L, 17393426L, 17393449L, 
17755081L, 17755541L, 17755642L, 17878715L, 17879424L, 18372696L, 
18372736L, 18373515L, 18443256L, 18443708L, 18443714L, 18443723L, 
19002006L, 19002442L, 19002482L, 19002582L, 19002980L, 19140359L, 
19140658L, 19533456L, 19533458L, 19904979L, 19989310L, 20134399L, 
20160007L, 20284697L, 20285056L, 20287610L, 21393306L, 21676483L, 
21676593L, 21676994L, 21857632L, 21857796L, 21875563L, 21958619L, 
21958684L, 21959700L, 22290866L, 22290916L, 23350313L, 23761484L, 
23926141L, 24040675L, 24043059L, 24043392L, 24168272L, 24380421L, 
24480790L, 24483092L, 24483231L, 24483234L, 24483478L, 24665544L, 
24711994L, 25022847L, 25023562L, 25030643L, 25031338L, 26210529L, 
26576402L, 27827716L, 30233575L, 30233581L, 30265185L, 30265188L, 
30265350L, 30327625L, 30671305L, 31089464L, 31090306L, 31284813L, 
31285029L, 31285105L, 31285129L, 34148917L, 34405983L, 34406213L, 
34406351L, 34960884L, 34961467L, 34961658L, 35937794L, 36985874L, 
37004521L, 37026473L, 37026697L, 37061801L, 37208295L, 37208607L, 
37402468L, 37430689L, 37430717L, 37545375L, 37706736L, 38079899L, 
38115545L, 38186710L, 38186830L, 38186842L, 38420578L, 38420783L, 
38662916L, 38663393L, 38664442L, 39680221L, 39866758L, 39943025L, 
39949510L, 39951640L, 39953075L, 39953435L, 39956558L, 39956797L, 
39956808L, 39958181L, 40006261L, 40020363L, 40026844L, 40027582L, 
40031550L, 40035961L, 40036023L, 40126573L, 40440191L, 40594678L, 
40594903L, 40595209L, 40693703L, 40944772L, 41192275L, 41192538L, 
41332957L, 41782297L, 41782692L, 41782695L, 42637044L, 42637578L, 
42637584L, 43515213L, 43515575L, 43741601L, 43809039L, 44202777L, 
44402068L, 44402332L, 44732352L, 44732817L, 45017072L, 45017137L, 
45709881L, 46433132L, 46433828L, 46434442L, 46434696L, 46618632L, 
46696420L, 46937653L, 46937658L, 47004146L, 47004645L, 47092037L, 
47341898L, 47342124L, 47420411L, 47420444L, 47422454L, 47441581L, 
47479436L, 47483043L, 47489719L, 47497286L, 47497456L, 47509941L, 
47509947L, 47510405L, 47518114L, 47518136L, 47518504L, 47518579L, 
47518594L, 47696333L, 47696363L, 47862977L, 47930636L, 47985547L, 
48327875L, 48334413L, 48334621L, 48367069L, 48367166L, 48367223L, 
48367230L, 48367513L, 48380042L, 48380234L, 48397836L, 48398018L, 
48398048L, 48398133L, 48432279L, 48456564L, 48457128L, 48555275L, 
48660373L, 48690457L, 48690473L, 48755002L, 48755020L, 48755502L, 
48768342L, 48769107L, 48814955L, 48815747L, 48815787L, 48815856L, 
48900769L, 48900948L, 48911060L, 48911192L, 48931851L, 48958025L, 
48980043L, 48980258L, 49020091L, 49020114L, 49028148L, 49042889L, 
49090934L, 49092076L, 49126099L, 49126128L, 49126243L, 49166345L, 
49179088L, 49189225L, 49217059L, 49297285L, 49333935L, 49368707L, 
49593824L, 49643941L, 49644500L, 49687068L, 49687306L, 49687792L, 
50212665L, 50213977L, 50557022L, 50557066L, 50557122L, 50557283L, 
51139066L, 51239518L, 51240059L, 51486666L, 51636111L, 51636562L, 
51636681L, 52897080L, 52950534L, 52964651L, 53030043L, 53111427L, 
53123054L, 53254027L, 53254653L, 53286187L, 53349902L, 53350680L, 
53449152L, 53449561L, 53453272L, 53460671L, 53461421L, 53467938L, 
53711065L, 53711167L, 53713676L, 54209370L, 54383906L, 54384537L, 
54466836L, 54466849L, 54521732L, 54522221L, 54556536L, 54665817L, 
54666407L, 54835405L, 54835446L, 55101460L, 55187543L, 55187903L, 
55515315L, 55515614L, 55515751L, 55935143L, 56258973L, 56756686L, 
57147872L, 57163839L, 57618891L, 57618914L, 58562599L, 62974905L, 
62975065L, 63005366L, 63263994L, 63264258L, 63425725L, 63425794L, 
63425896L, 64195554L, 64754908L, 64886318L, 64887365L, 67352784L, 
67356424L, 67653324L, 67653598L, 67867448L, 67867676L, 67913324L, 
67913573L, 68004195L, 68047847L, 68047865L, 68047893L, 68048001L, 
68048224L, 68048660L, 68058033L, 68114669L, 68345134L, 68348465L, 
68441389L, 68723812L, 68725086L, 68758562L, 69353178L, 69502014L, 
69509773L, 69509790L, 69509801L, 69664599L, 69672415L, 69672435L, 
70273113L, 70364775L, 70402012L, 70460157L, 70474012L, 70474483L, 
70478246L, 70503563L, 70503908L, 70585931L, 70798610L, 70836822L, 
70887792L, 71092795L, 71096923L, 71263427L, 71351668L, 71351792L, 
71351803L, 71351858L, 71352048L, 71401203L, 71459071L, 71525984L, 
71526944L, 71527091L, 72223388L, 72299310L, 72435007L, 72667191L, 
72782852L, 72783164L, 72783402L, 73071041L, 73071194L, 73325368L, 
73513464L, 73640431L, 73640648L, 73641073L, 73641615L, 73641955L, 
73834086L, 73834489L, 75005102L, 75392755L, 75649367L, 77041722L, 
77151100L, 77358961L, 77359535L, 77394971L, 77395088L, 77395258L, 
77395277L, 79278012L, 79590905L, 79829018L, 79830173L, 80065003L, 
80259473L, 80377379L, 80457687L, 80457709L, 82763219L, 83757131L, 
84258791L, 84581306L, 85403122L, 85403388L, 89176658L, 89177498L, 
91035267L, 95939848L, 99195115L, 99665948L, 99666219L, 99899345L, 
100075379L, 100184268L, 100307072L, 100353183L, 100546291L, 100548167L, 
100603765L, 100603843L, 100673072L, 100807848L, 100807961L, 100878340L, 
100878362L, 100880276L, 100914950L, 101186992L, 101380608L, 101397146L, 
101410339L, 101410888L, 101771438L, 101854294L, 101906179L, 101906989L, 
102000746L, 102000758L, 102001018L, 102192359L, 102319340L, 102469950L, 
102470153L, 102531009L, 102565738L, 102565889L, 102565934L, 102602857L, 
102631697L, 102631887L, 102632072L, 102775697L, 102840724L, 102840912L, 
102862807L, 102862945L, 102883934L, 102884538L, 103087157L, 103089404L, 
103268245L, 103294519L, 103356954L, 103357323L, 103401646L, 103401766L, 
103401777L, 103401820L, 103411244L, 103411278L, 103499545L, 103499724L, 
103502294L, 103809580L, 103810984L, 103811315L, 103811660L, 105066292L, 
105066526L, 105421602L, 105855130L, 106045920L, 106242522L, 106243404L, 
106361852L, 106362045L, 106449904L, 106515879L, 106516174L, 106567457L, 
106693522L, 106750612L, 106871544L, 106960206L, 106960378L, 107019426L, 
107179321L, 107179415L, 107225589L, 107335011L, 107681469L, 107976167L, 
107979401L, 107979700L, 107980132L, 108868271L, 108868282L, 109561524L, 
110038954L, 110039369L, 110039536L, 110339654L, 110339837L, 110924355L, 
111623974L, 113816263L, 114141866L, 114252499L, 114423926L, 114426240L, 
114468833L, 114524286L, 114524308L, 115085326L, 117250962L, 117479980L, 
117629338L, 117629928L, 117633362L, 117957689L, 117957786L, 117959263L, 
117973548L, 117973613L, 118107540L, 118284520L, 118284617L, 118370171L, 
118370187L, 118708353L, 118708375L, 118708409L, 118708623L, 118740406L, 
118827102L, 118827369L, 118828778L, 118892610L, 118925635L, 118925713L, 
118926017L, 118983320L, 118986703L, 118987146L, 119005413L, 119005603L, 
119022103L, 119249786L, 119378521L, 119379153L, 119379165L, 119602917L, 
119603233L, 119694964L, 119737944L, 119737969L, 119763815L, 120008681L, 
120181504L, 122318829L, 122993941L, 123094675L, 123095692L, 124337761L, 
124337817L, 124339261L, 124339462L, 125686940L, 125687011L, 125687041L, 
128674224L, 128674369L, 128812388L, 128977653L, 129039782L, 129039832L, 
129114962L, 129116503L, 129118279L, 129147515L, 129254804L, 129299802L, 
129299924L, 129299948L, 129300230L, 129305726L, 129402809L, 129402953L, 
129629140L, 129657974L, 130037150L, 130192365L, 130216380L, 131157495L, 
131157562L, 131157622L, 131157704L, 131351392L, 131352242L, 131352282L, 
131352293L, 131624049L, 132092575L, 132351068L, 132549003L, 132549205L, 
133119028L, 133371084L, 133593973L, 133594079L, 133594116L, 133680446L, 
133680463L, 134031461L, 134121706L, 134124948L, 134155740L, 134156306L, 
134158728L, 134232238L, 134232907L, 134478751L, 134478884L, 134555733L, 
134558553L, 134568966L, 134571427L, 134654334L, 135180748L, 135229382L, 
135229551L, 135229755L, 135333561L, 135579015L, 135579081L, 135579106L, 
135579224L, 135863104L, 135962199L, 135962940L, 135963596L, 135991582L, 
135991927L, 136113985L, 136114030L, 136114890L, 136510091L, 136633004L, 
136648241L, 136648249L, 138285393L, 138285922L, 138287603L, 138528984L, 
138774080L, 139006339L, 139014460L, 139173393L, 139332755L, 139584049L, 
139587311L, 139590383L, 139593371L, 140983037L, 141291755L, 142721385L, 
145700537L, 146993092L, 146993175L, 146993425L, 146993433L, 146993485L, 
147062702L, 147133821L, 147582069L, 147582133L, 147582520L, 148552714L, 
148586584L, 148586938L, 148621525L, 148622572L, 149106617L, 149106699L, 
149106755L, 149531594L, 149533195L, 149716257L, 149736729L, 149737876L, 
149861694L, 150067249L, 150067276L, 150067307L, 150067687L, 150151580L, 
150151615L, 150151624L, 150151809L, 150151823L, 150153136L, 150346599L, 
150565243L, 150731584L, 150863969L, 150905602L, 151142862L, 151806225L, 
151806628L, 151806923L, 151903174L, 151999289L, 151999547L, 152066574L, 
152066708L, 152066735L, 152161956L, 152482021L, 152486179L, 152529487L, 
152586916L, 152676991L, 152677200L, 152683499L, 152710312L, 152864599L, 
152864830L, 152875780L, 152938750L, 152939154L, 152939309L, 152953167L, 
152954284L, 152954816L, 152954836L, 152989492L, 152990341L, 152992265L, 
153032930L, 153035233L, 153050598L, 153051005L, 153059903L, 153060026L, 
153072756L, 153096307L, 153141270L, 153141451L, 153167899L, 153191600L, 
153200492L, 153218937L, 153220895L, 153236214L, 153236770L, 153236825L, 
153236845L, 153236942L, 153237590L, 153238133L, 153284103L, 153284899L, 
153362990L, 153409560L, 153409667L, 153523440L, 153570171L, 153583236L, 
153586557L, 153602918L, 153603062L, 153603066L, 153607129L, 153607825L, 
153626633L, 153626754L, 153637827L, 153639778L, 153640000L, 153640589L, 
153653174L, 153656891L, 153656930L, 153665103L, 153688713L, 153695784L, 
153707029L, 153707099L, 153707710L, 153714660L, 153715087L, 153715241L, 
153715321L, 153719132L, 153719176L, 153719192L, 153744612L, 153775262L, 
153775341L, 153775517L, 153775683L, 153775885L, 153880742L, 153979588L, 
154033409L, 154113543L, 154299395L, 154299737L, 154445068L, 154488728L, 
154493858L, 2657879L, 2657936L, 2658057L, 2802287L, 2802975L, 
2802985L, 2803070L, 2803127L, 2804320L, 3447947L, 4868368L, 4868397L, 
6114255L, 6114379L, 6778623L, 6778641L, 6778695L, 6891543L, 7142046L, 
7142073L, 7428198L, 8148233L, 9172441L, 9193029L, 9194502L, 9214205L, 
9215053L, 9303646L, 9303715L, 9306450L, 9307448L, 9340946L, 9363356L, 
9363365L, 9365070L, 9385539L, 9385586L, 9385861L, 9747821L, 9930240L, 
10037020L, 13911503L, 14074773L, 14074873L, 14099742L, 14100276L, 
14100573L, 14649201L, 14649262L, 14773536L, 14774193L, 14774195L, 
14774198L, 15016579L, 15016590L, 15016598L, 15016622L, 15016705L, 
15591533L, 15591617L, 15815552L, 15815688L, 15816361L, 15863367L, 
15864778L, 16635745L, 16636258L, 17568097L, 20508275L, 21155270L, 
21238472L, 21239348L, 21239461L, 21664604L, 21728575L, 21729069L, 
21729144L, 21729251L, 21729314L, 21906636L, 21906893L, 21906943L, 
22737424L, 22737591L, 22737594L, 22737896L, 22917087L, 22917104L, 
22917937L, 22917942L, 22918038L, 23566730L, 24453757L, 24549675L, 
28555550L), width = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), NAMES = c("cg01003813", 
"cg05113908", "cg03723195", "cg05479376", "cg07652272", "cg07160107", 
"cg00074638", "cg04371585", "cg07276379", "cg04065558", "cg04394795", 
"cg04483741", "cg03043405", "cg01728536", "cg05524154", "cg01864404", 
"cg03723938", "cg02156712", "cg05371922", "cg04820960", "cg02810043", 
"cg04414946", "cg05096731", "cg05782106", "cg05181702", "cg07416427", 
"cg04297907", "cg06144999", "cg04055739", "cg06139288", "cg02195366", 
"cg02210067", "cg03802931", "cg05887304", "cg02522370", "cg00241907", 
"cg03120461", "cg01408682", "cg00650640", "cg02723311", "cg06407366", 
"cg04373587", "cg04096096", "cg01310267", "cg04167725", "cg06178309", 
"cg07413830", "cg07650623", "cg04665139", "cg06428288", "cg05219621", 
"cg06454337", "cg04931939", "cg04381324", "cg03043267", "cg05572834", 
"cg01732428", "cg04765675", "cg07660411", "cg03348338", "cg03811055", 
"cg07096248", "cg03048084", "cg03171708", "cg06630839", "cg06464066", 
"cg04779297", "cg05950094", "cg01813294", "cg00458505", "cg04376185", 
"cg00266918", "cg07686944", "cg06535161", "cg02286623", "cg05049545", 
"cg00457389", "cg06131666", "cg04716051", "cg02939364", "cg06408185", 
"cg07519908", "cg06700462", "cg02035866", "cg06104510", "cg02540826", 
"cg02161919", "cg02859554", "cg04301343", "cg06615444", "cg05958126", 
"cg07647518", "cg01051089", "cg02223323", "cg00378717", "cg02909397", 
"cg03717198", "cg06818555", "cg05747459", "cg01891172", "cg01828474", 
"cg06775759", "cg01991530", "cg05184682", "cg06938654", "cg02496423", 
"cg02417823", "cg03031357", "cg05087624", "cg01284128", "cg05086798", 
"cg04292836", "cg05442715", "cg05044339", "cg01832419", "cg02624484", 
"cg02817946", "cg05293502", "cg06024075", "cg02539591", "cg02623256", 
"cg06721573", "cg00114625", "cg00139317", "cg06079963", "cg02938958", 
"cg05242815", "cg06943593", "cg03971469", "cg04730443", "cg00824273", 
"cg04689451", "cg01078565", "cg04646630", "cg03757053", "cg02714462", 
"cg04685060", "cg05137263", "cg07051162", "cg04289416", "cg00021786", 
"cg03370193", "cg00661180", "cg04647039", "cg06746884", "cg01570817", 
"cg01275664", "cg07405239", "cg06282443", "cg05456652", "cg07324045", 
"cg01710449", "cg03851490", "cg04149171", "cg01780412", "cg02332456", 
"cg05123368", "cg06112349", "cg01397290", "cg06408301", "cg02153534", 
"cg01475387", "cg04014504", "cg02533866", "cg05370638", "cg01573782", 
"cg05378963", "cg00996177", "cg02062238", "cg06944922", "cg03219705", 
"cg04345928", "cg06135650", "cg05996419", "cg05803913", "cg00981879", 
"cg02540440", "cg07688057", "cg00206414", "cg01522249", "cg05721877", 
"cg05473496", "cg04413754", "cg02685544", "cg05200893", "cg07096038", 
"cg05946161", "cg05685296", "cg02602182", "cg03140487", "cg02932805", 
"cg00016934", "cg05804339", "cg02997061", "cg07381502", "cg00573298", 
"cg07458836", "cg06309256", "cg07093674", "cg05196231", "cg01411845", 
"cg03102848", "cg06625916", "cg00818649", "cg02161125", "cg03983969", 
"cg05692422", "cg05454424", "cg03801901", "cg05443523", "cg04406445", 
"cg02929371", "cg02393514", "cg07481063", "cg07658614", "cg01573544", 
"cg07167981", "cg00751785", "cg04029366", "cg00551957", "cg04490290", 
"cg01483252", "cg00666173", "cg01773478", "cg06540859", "cg04027312", 
"cg01999076", "cg06472116", "cg03139204", "cg02538330", "cg01555661", 
"cg02581653", "cg02124059", "cg05526804", "cg07464598", "cg06922569", 
"cg01814235", "cg02896361", "cg06783548", "cg04026379", "cg01798375", 
"cg07559615", "cg03829216", "cg07038409", "cg02291897", "cg04626171", 
"cg06803079", "cg00636562", "cg06158088", "cg00265812", "cg06093412", 
"cg01668271", "cg06804788", "cg01869765", "cg04709809", "cg01413492", 
"cg02151779", "cg00473354", "cg06834235", "cg01737421", "cg07682072", 
"cg02386310", "cg00026186", "cg03244432", "cg04387098", "cg00011200", 
"cg01873087", "cg06272245", "cg00685925", "cg06172626", "cg03128268", 
"cg06027835", "cg00014152", "cg03759948", "cg07153944", "cg06077978", 
"cg00723997", "cg06297686", "cg01303569", "cg04771154", "cg01120006", 
"cg00810519", "cg03831206", "cg00680673", "cg02337670", "cg02480419", 
"cg02004156", "cg05028071", "cg04734394", "cg01533115", "cg01191902", 
"cg07109010", "cg01150083", "cg03360374", "cg00116709", "cg00583618", 
"cg02602528", "cg04675919", "cg06157408", "cg05104476", "cg02156782", 
"cg03748372", "cg05223760", "cg03746520", "cg03928924", "cg00824714", 
"cg06256374", "cg02540297", "cg04886382", "cg01814152", "cg03675615", 
"cg06624970", "cg00478198", "cg03705894", "cg00264378", "cg02937293", 
"cg03806192", "cg05922253", "cg06673178", "cg03683587", "cg05152874", 
"cg05947181", "cg03440272", "cg06380355", "cg05414241", "cg04238575", 
"cg05127178", "cg06551391", "cg06053110", "cg03553781", "cg01472347", 
"cg01463832", "cg00688681", "cg00776430", "cg03905487", "cg04927657", 
"cg04927982", "cg03832506", "cg06649034", "cg00381376", "cg02353937", 
"cg01404988", "cg03360001", "cg02883100", "cg01477427", "cg05393376", 
"cg04288012", "cg01924074", "cg04031645", "cg03334316", "cg04820593", 
"cg00895705", "cg06069996", "cg03751162", "cg05476522", "cg05425577", 
"cg00360365", "cg05260852", "cg06185870", "cg06614969", "cg03323437", 
"cg07413956", "cg07674075", "cg00936435", "cg02714202", "cg03728850", 
"cg07386410", "cg03723123", "cg06774787", "cg00997174", "cg02293258", 
"cg04699313", "cg04524851", "cg07507776", "cg07260325", "cg06055478", 
"cg00727483", "cg05239680", "cg06016676", "cg02027189", "cg03730082", 
"cg05687312", "cg00904184", "cg07066594", "cg04388383", "cg00997875", 
"cg06943437", "cg05045659", "cg06267203", "cg01825872", "cg04702045", 
"cg01850541", "cg02621658", "cg06104959", "cg00200463", "cg03668629", 
"cg00839572", "cg01999212", "cg04932755", "cg02775175", "cg05849149", 
"cg00373606", "cg03240752", "cg05914696", "cg05411980", "cg02268650", 
"cg00427681", "cg06097615", "cg01759889", "cg00374088", "cg04856605", 
"cg03748858", "cg03272642", "cg01000789", "cg05109619", "cg03894002", 
"cg02879223", "cg01600123", "cg02639793", "cg04037732", "cg02330362", 
"cg06256785", "cg03213202", "cg02214597", "cg07550694", "cg03977822", 
"cg06506080", "cg07516457", "cg02188515", "cg05356800", "cg02971392", 
"cg01419069", "cg03197110", "cg04777541", "cg04072009", "cg06796204", 
"cg03679269", "cg01997410", "cg03056321", "cg02031980", "cg05872222", 
"cg07156563", "cg03752015", "cg05449830", "cg00767637", "cg03505772", 
"cg07693661", "cg04065832", "cg02157475", "cg04836978", "cg05109065", 
"cg03554089", "cg05533223", "cg04624564", "cg04667267", "cg04317640", 
"cg03280420", "cg03055372", "cg03580328", "cg06805513", "cg00399450", 
"cg04094482", "cg04752574", "cg06444329", "cg04428826", "cg04298609", 
"cg07363416", "cg00855706", "cg00832270", "cg00192980", "cg07466166", 
"cg01915804", "cg05605384", "cg00554969", "cg00680081", "cg04533302", 
"cg06968752", "cg05835545", "cg02600772", "cg00008945", "cg06144825", 
"cg05474077", "cg05134041", "cg06544877", "cg02954623", "cg03374735", 
"cg00993140", "cg03802424", "cg07070466", "cg00378950", "cg00072839", 
"cg02875834", "cg05411132", "cg05032903", "cg03769817", "cg05911774", 
"cg06072560", "cg01543116", "cg06411441", "cg01366378", "cg01538344", 
"cg06963219", "cg05899999", "cg01062269", "cg03657257", "cg00408231", 
"cg04033011", "cg05453458", "cg02295504", "cg05532720", "cg00622389", 
"cg01142317", "cg00611101", "cg00380985", "cg01671070", "cg04924736", 
"cg03363535", "cg00968771", "cg04225046", "cg04748497", "cg04039555", 
"cg06302025", "cg04595393", "cg04369574", "cg00668426", "cg01374431", 
"cg07012573", "cg02275875", "cg01804836", "cg03347749", "cg05515118", 
"cg06070578", "cg04167532", "cg00416689", "cg06650776", "cg03962769", 
"cg01600263", "cg05032098", "cg01706033", "cg03485809", "cg06376033", 
"cg06705078", "cg04166210", "cg04493225", "cg01821906", "cg02746718", 
"cg05059648", "cg07056506", "cg05140257", "cg01187510", "cg03978312", 
"cg06443675", "cg05994819", "cg06510592", "cg05788681", "cg05467600", 
"cg06672093", "cg02064569", "cg01757402", "cg00241296", "cg02283535", 
"cg02327549", "cg07674139", "cg02580986", "cg02360578", "cg06462425", 
"cg06228453", "cg05096434", "cg07098277", "cg01831199", "cg06408025", 
"cg06462727", "cg02285579", "cg00735883", "cg03024957", "cg05829338", 
"cg03927302", "cg07464524", "cg05866836", "cg04027004", "cg04302300", 
"cg03440485", "cg06184979", "cg02010442", "cg05064925", "cg07553115", 
"cg06779802", "cg05893072", "cg06443888", "cg01992935", "cg06720669", 
"cg04424654", "cg07653640", "cg07051329", "cg00619443", "cg01052065", 
"cg00412010", "cg05551025", "cg07441824", "cg05124235", "cg02918903", 
"cg00423014", "cg05091491", "cg06170110", "cg02127807", "cg05114100", 
"cg03245429", "cg04190662", "cg04029664", "cg03944921", "cg04061482", 
"cg00112256", "cg06130360", "cg00018261", "cg05397816", "cg02295369", 
"cg02049865", "cg03989304", "cg00114913", "cg07207959", "cg02894810", 
"cg01333849", "cg04290452", "cg00935924", "cg05206294", "cg06206449", 
"cg00142683", "cg03517379", "cg06039729", "cg07681512", "cg00685229", 
"cg06945800", "cg00622384", "cg04327763", "cg03679005", "cg05939965", 
"cg06135529", "cg04184316", "cg05452887", "cg00988678", "cg00243584", 
"cg00907920", "cg05704524", "cg05172693", "cg03364121", "cg06807018", 
"cg02770249", "cg03754195", "cg03900860", "cg05200254", "cg02274705", 
"cg03601619", "cg03102729", "cg04128303", "cg04302178", "cg01318188", 
"cg02510708", "cg07648454", "cg07136872", "cg04691867", "cg07200487", 
"cg02261899", "cg07344627", "cg01913196", "cg05032353", "cg05147108", 
"cg04763286", "cg04855977", "cg04216286", "cg02201836", "cg02890812", 
"cg03825574", "cg05785344", "cg02935635", "cg01215761", "cg07393670", 
"cg05045028", "cg06252876", "cg01913024", "cg01120894", "cg06899582", 
"cg01364818", "cg04294190", "cg06915915", "cg06295352", "cg02864732", 
"cg02229344", "cg04739874", "cg01996818", "cg07419801", "cg04663649", 
"cg02354343", "cg04402486", "cg07674503", "cg06051391", "cg04029282", 
"cg02276461", "cg05629323", "cg06558166", "cg07312966", "cg05445331", 
"cg00729461", "cg03523199", "cg00769799", "cg05630320", "cg01972979", 
"cg07194250", "cg03687305", "cg01990854", "cg05237970", "cg04494122", 
"cg05907136", "cg07172237", "cg00575851", "cg05600581", "cg02803670", 
"cg05908188", "cg04650971", "cg04617012", "cg04495420", "cg06292022", 
"cg04843066", "cg01013491", "cg02285254", "cg06521531", "cg01742836", 
"cg07446674", "cg03959273", "cg02821380", "cg01938887", "cg03104298", 
"cg06293983", "cg02936290", "cg04419618", "cg06288270", "cg02288667", 
"cg02971902", "cg06469252", "cg06164717", "cg07439872", "cg00391044", 
"cg06650546", "cg00240113", "cg06915321", "cg00412368", "cg03100923", 
"cg01777017", "cg02722239", "cg07395435", "cg04630982", "cg01857253", 
"cg01762011", "cg00940287", "cg04481865", "cg03202526", "cg06964654", 
"cg06282524", "cg01761453", "cg05257372", "cg05135828", "cg06864633", 
"cg05288927", "cg04744025", "cg04552106", "cg02921434", "cg03513471", 
"cg00812634", "cg05059874", "cg01353788", "cg06174815", "cg05806018", 
"cg05679489", "cg03514678", "cg02589074", "cg01758988", "cg00466309", 
"cg07089242", "cg06098232", "cg03814733", "cg07659240", "cg03605032", 
"cg03718079", "cg06148972", "cg00016522", "cg04075675", "cg07693301", 
"cg02623604", "cg06119392", "cg05091873", "cg05379196", "cg06136002", 
"cg01807728", "cg05905814", "cg05935584", "cg02634083", "cg06538336", 
"cg01370077", "cg04702079", "cg04177426", "cg06467636", "cg04929599", 
"cg00529027", "cg05849875", "cg03335173", "cg06878303", "cg05476089", 
"cg01056373", "cg01405303", "cg01215118", "cg02615131", "cg04855291", 
"cg05307865", "cg05031352", "cg00916680", "cg06779458", "cg03906572", 
"cg05088151", "cg01274846", "cg07206010", "cg05374090", "cg06511189", 
"cg00739467", "cg00598664", "cg00849191", "cg07653728", "cg01819787", 
"cg00140085", "cg04676446", "cg04307491", "cg00621925", "cg06041068", 
"cg02772106", "cg03315431", "cg00938641", "cg05184436", "cg05463813", 
"cg07187289", "cg06137672", "cg05876899", "cg03892808", "cg06300944", 
"cg03971283", "cg03658985", "cg06791102", "cg00072288", "cg01370179", 
"cg02973417", "cg03968699", "cg03177323", "cg04764476", "cg03672915", 
"cg07086565", "cg03189022", "cg06022838", "cg02742918", "cg06334238", 
"cg01083397", "cg03822658", "cg06654051", "cg04186471", "cg03590418", 
"cg01055931", "cg02931149", "cg07261646", "cg03691313", "cg05438092", 
"cg04344997", "cg03391801", "cg01755617", "cg05100261", "cg06084034", 
"cg04712194", "cg06124711", "cg03670113", "cg00388637", "cg04149024", 
"cg00645049", "cg05222959", "cg04393989", "cg06963664", "cg05534333", 
"cg02333283", "cg06042004", "cg00011891", "cg01434723", "cg05803370", 
"cg04371001", "cg06616857", "cg05424879", "cg06266461", "cg05799859", 
"cg02869694", "cg06554760", "cg07215528", "cg01058588", "cg00813156", 
"cg05260949", "cg02225164", "cg02994943", "cg06058235", "cg05461361", 
"cg05941375", "cg00845806", "cg00697812", "cg04924141", "cg15563434", 
"cg07939587", "cg03767353", "cg11131351", "cg10213302", "cg27433982", 
"cg03683899", "cg02842889", "cg04840163", "cg27539833", "cg15295597", 
"cg02494853", "cg05865243", "cg08242338", "cg04042030", "cg02839557", 
"cg01707559", "cg08921682", "cg04689676", "cg05480730", "cg04964672", 
"cg00213748", "cg25071634", "cg03052502", "cg02011394", "cg17834650", 
"cg04016144", "cg05544622", "cg15935877", "cg15810474", "cg25705492", 
"cg17837162", "cg00050873", "cg03443143", "cg09350919", "cg00455876", 
"cg09460641", "cg03155755", "cg15682806", "cg14210405", "cg14466580", 
"cg04462340", "cg03695421", "cg13851368", "cg26520468", "cg05213048", 
"cg04023335", "cg04303809", "cg18188392", "cg25032547", "cg15746461", 
"cg05890011", "cg14741114", "cg15429127", "cg09856092", "cg10698069", 
"cg18077436", "cg14180491", "cg06479204", "cg04448376", "cg02004872", 
"cg00214611", "cg18032798", "cg13268984", "cg10363397", "cg03706273", 
"cg25518695", "cg04792227", "cg10252249", "cg05230942", "cg03244189", 
"cg00212031", "cg15345074", "cg15027426", "cg25756647", "cg05621349", 
"cg10076560", "cg15682993", "cg07731488", "cg15329860", "cg27049643", 
"cg26517491", "cg15422579", "cg02233190", "cg26983535", "cg03750315", 
"cg07747963", "cg10841270", "cg06322277", "cg26058907", "cg02050847", 
"cg25427172", "cg10267609", "cg26983430", "cg08265308"), elementType = "ANY", 
    elementMetadata = NULL, metadata = list()), strand = new("Rle", 
    values = 3L, lengths = 1000L, elementMetadata = NULL, metadata = list()), 
    seqinfo = new("Seqinfo", seqnames = c("chrX", "chrY"), seqlengths = c(NA_integer_, 
    NA_integer_), is_circular = c(NA, NA), genome = c("hg19", 
    "hg19")), elementMetadata = new("DataFrame", rownames = NULL, 
        nrows = 1000L, listData = list(), elementType = "ANY", 
        elementMetadata = NULL, metadata = list()), elementType = "ANY", 
    metadata = list()), colData = new("DataFrame", rownames = c("5723646052_R02C02", 
"5723646052_R04C01", "5723646052_R05C02", "5723646053_R04C02", 
"5723646053_R05C02", "5723646053_R06C02"), nrows = 6L, listData = list(
    Sample_Name = c("GroupA_3", "GroupA_2", "GroupB_3", "GroupB_1", 
    "GroupA_1", "GroupB_2"), Sample_Well = c("H5", "D5", "C6", 
    "F7", "G7", "H7"), Sample_Plate = c(NA_character_, NA_character_, 
    NA_character_, NA_character_, NA_character_, NA_character_
    ), Sample_Group = c("GroupA", "GroupA", "GroupB", "GroupB", 
    "GroupA", "GroupB"), Pool_ID = c(NA_character_, NA_character_, 
    NA_character_, NA_character_, NA_character_, NA_character_
    ), person = c("id3", "id2", "id3", "id1", "id1", "id2"), 
    age = c(83L, 58L, 83L, 75L, 75L, 58L), sex = c("M", "F", 
    "M", "F", "F", "F"), status = c("normal", "normal", "cancer", 
    "cancer", "normal", "cancer"), Array = c("R02C02", "R04C01", 
    "R05C02", "R04C02", "R05C02", "R06C02"), Slide = c("5723646052", 
    "5723646052", "5723646052", "5723646053", "5723646053", "5723646053"
    ), Basename = c("../extdata/5723646052/5723646052_R02C02", 
    "../extdata/5723646052/5723646052_R04C01", "../extdata/5723646052/5723646052_R05C02", 
    "../extdata/5723646053/5723646053_R04C02", "../extdata/5723646053/5723646053_R05C02", 
    "../extdata/5723646053/5723646053_R06C02"), filenames = c("../extdata/5723646052/5723646052_R02C02", 
    "../extdata/5723646052/5723646052_R04C01", "../extdata/5723646052/5723646052_R05C02", 
    "../extdata/5723646053/5723646053_R04C02", "../extdata/5723646053/5723646053_R05C02", 
    "../extdata/5723646053/5723646053_R06C02")), elementType = "ANY", 
    elementMetadata = NULL, metadata = list()), assays = new("ShallowSimpleListAssays", 
    .xData = <environment>), NAMES = NULL, elementMetadata = new("DataFrame", 
    rownames = NULL, nrows = 1000L, listData = list(), elementType = "ANY", 
    elementMetadata = NULL, metadata = list()), metadata = list()), 
    design = c(1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0), what = "M", 
    coef = 2, datatype = c("array", "sequencing"), arraytype = c("EPIC", 
        "450K"), analysis.type = c("differential", "variability", 
        "ANOVA", "diffVar"), contrasts = FALSE, cont.matrix = NULL, 
    fdr = 0.05, ... = )
where 2: do.call(DMRcate::cpg.annotate, c(list(object = mat, design = model, 
    what = "M", coef = coefficient), annParams))
where 3 at /var/scratch2/tomas/tmp/RtmpQBQCTh/R.INSTALLbd0464c24190/MEAL/R/runDMRcate.R#54: do.call(DMRcate::cpg.annotate, c(list(object = mat, design = model, 
    what = "M", coef = coefficient), annParams))
where 4 at testthat/test_06regionAnalysis.R#19: runDMRcate(set = set, model = ~status, pcutoff = 0.9)
where 5: eval(code, test_env)
where 6 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#152: eval(code, test_env)
where 7 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#149: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 8: doTryCatch(return(expr), name, parentenv, handler)
where 9: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 10: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 11: doTryCatch(return(expr), name, parentenv, handler)
where 12: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 13: tryCatchList(expr, classes, parentenv, handlers)
where 14 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#149: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 15 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#31: test_code(desc, code, env = parent.frame())
where 16 at testthat/test_06regionAnalysis.R#18: test_that("DMRcate", {
    regions <- runDMRcate(set = set, model = ~status, pcutoff = 0.9)
    expect_match(class(regions), "data.frame")
    expect_equal(nrow(regions), 9)
})
where 17: eval(code, test_env)
where 18 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#152: eval(code, test_env)
where 19 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#149: withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error)
where 20: doTryCatch(return(expr), name, parentenv, handler)
where 21: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 22: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
where 23: doTryCatch(return(expr), name, parentenv, handler)
where 24: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), 
    names[nh], parentenv, handlers[[nh]])
where 25: tryCatchList(expr, classes, parentenv, handlers)
where 26 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-that.R#149: tryCatch(withCallingHandlers({
    eval(code, test_env)
    if (!handled && !is.null(test)) {
        skip_empty()
    }
}, expectation = handle_expectation, skip = handle_skip, warning = handle_warning, 
    message = handle_message, error = handle_error), error = handle_fatal, 
    skip = function(e) {
    })
where 27 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/source.R#42: test_code(NULL, exprs, env)
where 28 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-files.R#131: source_file(path, new.env(parent = env), chdir = TRUE, wrap = wrap)
where 29 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/reporter-zzz.R#53: force(code)
where 30 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-files.R#125: with_reporter(reporter = reporter, start_end_reporter = start_end_reporter, 
    {
        lister$start_file(basename(path))
        source_file(path, new.env(parent = env), chdir = TRUE, 
            wrap = wrap)
        end_context()
    })
where 31: FUN(X[[i]], ...)
where 32 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-files.R#25: lapply(paths, test_file, env = env, reporter = current_reporter, 
    start_end_reporter = FALSE, load_helpers = FALSE, wrap = wrap)
where 33 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/reporter-zzz.R#53: force(code)
where 34 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-files.R#25: with_reporter(reporter = current_reporter, results <- lapply(paths, 
    test_file, env = env, reporter = current_reporter, start_end_reporter = FALSE, 
    load_helpers = FALSE, wrap = wrap))
where 35 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-directory.R#86: test_files(paths, reporter = reporter, env = env, stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 36 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-directory.R#190: test_dir(path = test_path, reporter = reporter, env = env, filter = filter, 
    ..., stop_on_failure = stop_on_failure, stop_on_warning = stop_on_warning, 
    wrap = wrap)
where 37 at /var/scratch2/tomas/tmp/RtmpLjy9nM/R.INSTALL2049131c71f5/testthat/R/test-directory.R#171: test_package_dir(package = package, test_path = test_path, filter = filter, 
    reporter = reporter, ..., stop_on_failure = stop_on_failure, 
    stop_on_warning = stop_on_warning, wrap = wrap)
where 38: test_check("MEAL")

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function from context --- 
function(datatype = c("array", "sequencing"), object, what=c("Beta", "M"), arraytype=c("EPIC", "450K"), analysis.type = c("differential", "variability", "ANOVA", "diffVar"), 
                         design, contrasts = FALSE, cont.matrix = NULL, fdr = 0.05, coef, ...) 
{
  if (datatype == "array") {
    stopifnot(class(object) %in% c("matrix", "GenomicRatioSet"))
    if(class(object) == "matrix"){
      if(arraytype=="450K"){grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylation450k", annotation = "ilmn12.hg19", mergeManifest = TRUE, what = what)}
      if(arraytype=="EPIC"){grset <- makeGenomicRatioSetFromMatrix(object, array = "IlluminaHumanMethylationEPIC", annotation = "ilm10b2.hg19", mergeManifest = TRUE, what = what)}
    } else {
	grset <- object
    }
    object <- getM(grset)
    analysis.type <- match.arg(analysis.type)
    switch(analysis.type, differential = {
      stopifnot(is.matrix(design))
      if (!contrasts) {
        stopifnot(colnames(design)[1] == "(Intercept)")
      } else {
        stopifnot(!is.null(cont.matrix))
      }
      fit <- lmFit(object, design, ...)
      if (contrasts) {
        stopifnot(coef %in% colnames(cont.matrix))
        fit <- contrasts.fit(fit, cont.matrix)
      }
      fit <- eBayes(fit)
      tt <- topTable(fit, coef = coef, number = nrow(object))
      nsig <- sum(tt$adj.P.Val < fdr)
      if (nsig == 0) {
        message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
      }
      betafit <- lmFit(ilogit2(object), design, ...)
      if (contrasts) {
        betafit <- contrasts.fit(betafit, cont.matrix)
      }
      betafit <- eBayes(betafit)
      betatt <- topTable(betafit, coef = coef, number = nrow(object))
      m <- match(rownames(tt), rownames(betatt))
      tt$betafc <- betatt$logFC[m]
      m <- match(rownames(object), rownames(tt))
      tt <- tt[m, ]
      
      anno <- getAnnotation(grset)
      stat <- tt$t
      annotated <- data.frame(ID = rownames(tt), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = tt$betafc, 
                              indfdr = tt$adj.P.Val, is.sig=tt$adj.P.Val < fdr)
    }, variability = {
      RSanno <- getAnnotation(grset)
      wholevar <- var(object)
      weights <- apply(object, 1, var)
      weights <- weights/mean(weights)
      annotated <- data.frame(ID = rownames(object), stat = weights, CHR = RSanno$chr, pos = RSanno$pos, 
                              betafc = rep(0, nrow(object)), indfdr = rep(0, nrow(object)), is.sig=weights > quantile(weights, 0.95))
    }, ANOVA = {
      message("You are annotating in ANOVA mode: consider making the value of fdr quite small, e.g. 0.001")
      stopifnot(is.matrix(design))
      fit <- lmFit(object, design, ...)
      fit <- eBayes(fit)
      sqrtFs <- sqrt(fit$F)
      sqrtfdrs <- p.adjust(fit$F.p.value, method="BH")
      nsig <- sum(sqrtfdrs < fdr)
      if (nsig == 0) {
        message("Your design returned no individually significant probes for ANOVA. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your design returned", nsig, 
                      "individually significant probes for ANOVA; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your design returned", nsig, 
                      "individually significant probes for ANOVA. We recommend the default setting of pcutoff in dmrcate(). Large numbers (e.g. > 100000) may warrant a smaller value of the argument passed to fdr"))
      }
      
      anno <- getAnnotation(grset)
      stat <- sqrtFs
      annotated <- data.frame(ID = rownames(object), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = 0, 
                              indfdr = sqrtfdrs, is.sig=sqrtfdrs < fdr)
    }, diffVar={
      stopifnot(is.matrix(design))
      if (!contrasts) {
        stopifnot(colnames(design)[1] == "(Intercept)")
      } else {
        stopifnot(!is.null(cont.matrix))
      }
      fitvar <- varFit(object, design = design, ...)
      if (contrasts) {
        stopifnot(coef %in% colnames(cont.matrix))
        fitvar <- contrasts.varFit(fitvar, cont.matrix)
      }
      tt <- topVar(fitvar, coef=coef, number = nrow(object))
      nsig <- sum(tt$Adj.P.Value < fdr)
      if (nsig == 0) {
        message("Your contrast returned no individually significant probes. Try increasing the fdr. Alternatively, set pcutoff manually in dmrcate() to return DVMRs, but be warned there is an increased risk of Type I errors.")
      }
      if (nsig > 0 & nsig <= 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DVMRs, but be warned that doing this increases the risk of Type I errors."))
      }
      if (nsig > 100) {
        message(paste("Your contrast returned", nsig, 
                      "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))
      }
      m <- match(rownames(object), rownames(tt))
      tt <- tt[m, ]
      
      anno <- getAnnotation(grset)
      stat <- tt$t
      annotated <- data.frame(ID = rownames(tt), stat = stat, 
                              CHR = anno$chr, pos = anno$pos, betafc = 0, 
                              indfdr = tt$Adj.P.Value, is.sig=tt$Adj.P.Value < fdr)
      
      

      
    })
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
    return(annotated)
  }
  if (datatype == "sequencing") {
    if (!all(c("stat", "chr", "pos", "diff", "fdr") %in% 
             colnames(object))) 
      stop("Error: object does not contain all required columns, was it created by DSS::DMLtest()? Must contain colNames 'stat', 'chr', 'pos', 'diff' and 'fdr'.")
    if(analysis.type != "differential")
      stop("Error: only differential analysis.type available for sequencing assays")
    annotated <- data.frame(ID = rownames(object), stat = object$stat, 
                            CHR = object$chr, pos = object$pos, betafc = object$diff, 
                            indfdr = object$fdr, is.sig=object$fdr < fdr)
    annotated <- annotated[order(annotated$CHR, annotated$pos), 
                           ]
    class(annotated) <- "annot"
  }
  else {
    message("Error: datatype must be one of 'array' or 'sequencing'")
  }
  return(annotated)
}
<bytecode: 0x3822d268>
<environment: namespace:DMRcate>
 --- function search by body ---
Function cpg.annotate in namespace DMRcate has this body.
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1
