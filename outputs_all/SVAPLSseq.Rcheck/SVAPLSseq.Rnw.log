
> options(width = 65)

> BiocStyle::latex()
\RequirePackage[]{/var/scratch2ro/tomas/test/mine/R-svn-dev-75396/lib/BiocStyle/resources/tex/Bioconductor}
\AtBeginDocument{\bibliographystyle{/var/scratch2ro/tomas/test/mine/R-svn-dev-75396/lib/BiocStyle/resources/tex/unsrturl}}
\usepackage[noae, nogin]{Sweave}
> library(SummarizedExperiment)
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply


> library(SVAPLSseq)

> library(edgeR)
Loading required package: limma

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA


> data(sim.dat)

> dat = SummarizedExperiment(assays = SimpleList(counts = sim.dat))

> dat = DGEList(counts = sim.dat)

> sim.dat[1:6, c(1:3, 11:13)]
      S1  S2  S3  S11  S12  S13
[1,] 180 180 183  594  555  585
[2,] 278 275 269  357  359  350
[3,] 182 196 205  439  454  444
[4,] 438 430 345 2818 2790 2888
[5,] 238 226 215 1413 1452 1471
[6,] 156 158 180  486  527  455

> data(sim.dat)

> group = as.factor(c(rep(1, 10), rep(-1, 10)))

> sim.dat.se = SummarizedExperiment(assays = SimpleList(counts = sim.dat))

> sim.dat.dg = DGEList(counts = sim.dat)

> sv <- svplsSurr(dat = sim.dat.se, group = group, max.surrs = 3, 
+     surr.select = "automatic", controls = NULL)

> slotNames(sv)
[1] "surr"      "prop.vars"

> head(surr(sv))
      Comp 1     Comp 2    Comp 3
1 -40.926156 -0.8084875  4.224341
2 -40.055960 -0.4950606  3.898370
3 -42.367566 -1.5554843  5.060546
4 -42.233553 -1.3974685  4.856386
5 -41.106307 -0.9151236  4.329619
6   7.970834 17.1226899 -1.939348

> head(prop.vars(sv))
    Comp 1     Comp 2     Comp 3 
0.87480779 0.10710424 0.01808797 

> data(sim.dat)

> controls = c(1:nrow(sim.dat)) > 400

> group = as.factor(c(rep(1, 10), rep(-1, 10)))

> sim.dat.se = SummarizedExperiment(assays = SimpleList(counts = sim.dat))

> sim.dat.dg = DGEList(counts = sim.dat)

> sv <- svplsSurr(dat = sim.dat.se, group = group, max.surrs = 3, 
+     surr.select = "automatic", controls = controls)

> slotNames(sv)
[1] "surr"      "prop.vars"

> head(surr(sv))
       Comp 1    Comp 2      Comp 3
S1 -31.926628 -3.208735 -0.03536976
S2 -31.272906 -2.904747 -0.14619953
S3 -32.891642 -3.941770  0.28247933
S4 -32.853971 -3.871881  0.26042255
S5 -31.989481 -3.260728  0.03723828
S6   5.474165  3.098831  0.45612324

> head(prop.vars(sv))
      Comp 1       Comp 2       Comp 3 
0.9800041257 0.0196787967 0.0003170775 

> data(sim.dat)

> group = as.factor(c(rep(1, 10), rep(-1, 10)))

> sv = svplsSurr(dat = sim.dat, group = group)
 ----------- FAILURE REPORT -------------- 
 --- srcref --- 
 at /var/scratch2/tomas/tmp/Rtmp2eZ18y/R.INSTALLa83036435cba/SVAPLSseq/R/svplsSurr.R#101: 
 --- package (from environment) --- 
SVAPLSseq
 --- call from context --- 
svplsSurr(dat = sim.dat, group = group)
 --- call from argument --- 
if (surr.select == "automatic") {
    if (!is.null(controls)) 
        pvals = anova(lm(as.formula(paste("svd(Y[controls, ])$v[, 1] ~", 
            surr.effect, sep = " "))))[, 5]
    if (is.null(controls)) 
        pvals = anova(lm(as.formula(paste("svd(E)$v[, 1] ~", 
            surr.effect, sep = " "))))[, 5]
    index = which(pvals < cutoff)
}
 --- R stacktrace ---
where 1: svplsSurr(dat = sim.dat, group = group)
where 2: eval(ei, envir)
where 3: eval(ei, envir)
where 4: withVisible(eval(ei, envir))
where 5 at ../../../../R/src/library/tools/R/Vignettes.R#1005: source(output, echo = TRUE)
where 6: doTryCatch(return(expr), name, parentenv, handler)
where 7: tryCatchOne(expr, names, parentenv, handlers[[1L]])
where 8: tryCatchList(expr, classes, parentenv, handlers)
where 9 at ../../../../R/src/library/tools/R/Vignettes.R#1004: tryCatch({
    source(output, echo = TRUE)
}, error = function(e) {
    cat("\n  When sourcing ", sQuote(output), ":\n", sep = "")
    stop(conditionMessage(e), call. = FALSE, domain = NA)
})
where 10: tools:::.run_one_vignette("SVAPLSseq.Rnw", "/var/scratch2/tomas/test/mine/R-svn-dev-75396/check/SVAPLSseq.Rcheck/00_pkg_src/SVAPLSseq/vignettes", 
    pkgdir = "/var/scratch2/tomas/test/mine/R-svn-dev-75396/check/SVAPLSseq.Rcheck/00_pkg_src/SVAPLSseq")

 --- value of length: 2 type: logical ---
[1]  TRUE FALSE
 --- function from context --- 
function(dat, group, controls = NULL, phi = function(x) log(x + const), const = 1,
           pls.method = "oscorespls", max.surrs = 3, opt.surrs = 1, surr.select = c("automatic", "manual"), cutoff = 10^-7, parallel = FALSE,
           num.cores = NULL, plot = FALSE){

    if (class(dat) == "matrix") data = dat
    if (class(dat) == "SummarizedExperiment") data = assay(dat)
    if (class(dat) == "DGEList") data = dat$counts
    Y = phi(data)

    ###Fit an Initial Model to Y and organize the fitted model residuals into a matrix
    if (parallel){
      e = unlist(mclapply(1:nrow(Y), function(u) lm(Y[u, ] ~ group)$resid, mc.cores = num.cores))
    }
    if (!parallel) e = unlist(lapply(1:nrow(Y), function(u) lm(Y[u, ] ~ group)$resid))

    E = matrix(e, nrow(Y), ncol(Y), byrow = TRUE)

    ###Extract the signatures of hidden variation using Partial Least Squares
    if (!is.null(controls)) pls.fit = mvr(t(Y) ~ t(Y[controls, ]), ncomp = max.surrs, method = pls.method)
    if (is.null(controls)) pls.fit = mvr(t(E) ~ t(Y), ncomp = max.surrs, method = pls.method)

    sc = scores(pls.fit)
    surr.effect = paste("+", paste("sc[, ", paste(as.character(1:ncol(sc)), "]", sep = ""), sep = "", collapse = "+"), sep = "")

    if (surr.select == "automatic"){
      if (!is.null(controls)) pvals = anova(lm(as.formula(paste("svd(Y[controls, ])$v[, 1] ~", surr.effect, sep = " "))))[, 5]
      if (is.null(controls)) pvals = anova(lm(as.formula(paste("svd(E)$v[, 1] ~", surr.effect, sep = " "))))[, 5]
      index = which(pvals < cutoff)
    }

    if (surr.select == "manual") index = opt.surrs

    if (length(index) == 0) stop("No Significant Surrogate Variables")
    if (length(index) > 0){
      surr = sc[, index]

      if (length(index) == 1) vars = var(surr)
      if (length(index) > 1)  vars = apply(surr, 2, var)
      prop.vars = vars/sum(vars)

      if (plot == TRUE){
        surr.df = as.data.frame(surr[, 1:max.surrs])
        colnames(surr.df) = paste("surr", as.character(1:max.surrs), sep = "")
        grp = factor(colnames(surr.df), levels = colnames(surr.df))

        bp.df = data.frame(grp, prop.vars)
        bp <- qplot(grp, data = bp.df, geom="bar", weight = prop.vars) + scale_x_discrete("Surrogate Variable") + scale_y_continuous("Explained Variance Proportion")
        bp + theme(axis.text.x = element_text(angle = 0, hjust = 1))
      }

      res = new("svplsSurr", surr = surr, prop.vars = prop.vars)
    }
    return(res)
  }
<bytecode: 0x8bdbe10>
<environment: namespace:SVAPLSseq>
 --- function search by body ---
Function svplsSurr in namespace SVAPLSseq has this body.
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: the condition has length > 1
